%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Data_processing_04.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: Руслан Олегович Холяев
%%CreationDate: 12/17/2018
%%BoundingBox: 0 0 600 400
%%HiResBoundingBox: 0 0 600 400
%%CropBox: 0 0 600 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.0 x223 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 12174 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7
%B7B8FD63FFB2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2
%FD04B7FD63FFFD1CB7C4FD63FFB7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7
%B7B2B7B7B7B2B7B7B7B2B7CAFD63FFB7B7B8B7B7B7B8B7B7B7B8B7B7B7B8
%B7B7B7B8B7B7B7B8B7B7B7B8B7FD64FFB7B7B2B7B7B7B2B7B7B7B2B7B7B7
%B2B7B7B7B2B7B7B7B2B7B7B7B2C4FD64FFFD1BB7FD65FFB2B7B7B7B2B7B7
%B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7BDFD3DFFA9FFAFFD25FFB8
%B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7CBFD3CFFA9
%FFAFFFAFFD24FFB2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7
%B7B2B7FD3AFFA9AFA9AFA9AFA9AFA9FD23FFFD19B7BEFD39FFAFAFA9FFAF
%AFA9FFAFAFA9FD22FFB7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7
%B7B2B7B7CBFD38FFA9AFA9AFA97E305A2FA9A9AFA9AFA9FD1FFFB7B7B8B7
%B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7BEFD38FFA9FFAFFF845A
%302F062F5A5AA9FFAFFFA9FD1EFFB7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7
%B7B7B2B7B7B7B2B7C4FD35FFA9AFA9AFA9AF2F5A06290628062F2F5A5AAF
%A9AFA9AFAFFD1BFFFD18B7FD35FFAFAFA9FFAFAF5A300629065AA92F062F
%295A3085AFAFA9FFAFFD1AFFB2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7
%B7B7B2B7B7C4FD34FFA8FFA9AFA9AFA9A953290606062F065A2829062F2F
%5A84AFA9AFA9AFA9FD17FFB8B7B7B7B8B7B7B7B8B7B7B7B8B7B7B7B8B7B7
%B7B8B7BEFD26FFA3A3CBFD0CFFAFAFFFFFFFAFFFA9FFA953062F062F5A53
%292F062F2F5A5AFFAFFFA9FFAFFD16FFB2B7B7B7B2B7B7B7B2B7B7B7B2B7
%B7B7B2B7B7B7B2BECAFD24FFA3729D799D78CBFD0AFF84AFA9FFAFFFA9AF
%A9AFA98428290628068484280629062F2F85A9AFA9AFA9FD15FFFD14B7C4
%FD26FF739D799D799D799DA3FD08FFAFA9FFAFAFAFFFAFAFA9FFAFAF592F
%0629062F2F852F2F062F2F85AFAFA9FFAFAFFD13FFB7B7B2B7B7B7B2B7B7
%B7B2B7B7B7B2B7B7BEC4FD28FF737273729D729D729D72A3FD06FF7EA9A9
%AFA9AFA9FFAFAFA9AFA9AF845A0606062F2F060629065A84AFA9AFA9FFA9
%84FD12FFB7B7B8B7B7B7B8B7B7B7B8B7B7B7BEC4FD2BFF73737279739D79
%9D799D799DA3FD04FF845AA9A9FFA9FFAFFFFFFFAFFFA9FFAFA92F2F062F
%062F2FAFA9FFAFFFAFFFFF847EFD12FFB7B7B2B7B7B7B2B7B7B7B2B7BDCB
%FD2DFF7372724E737273729D799D72734EA3FFFF5A5A595A84AFA9AFA9AF
%A9FFAFAFA9AFA9AF5A2F062F7EAFA9AFA9AFAFFF7E302F84FD12FFBEFD08
%B7BECBFD30FF72794E72487372737279727348734E73A9845A5A2F5A5AAF
%A9FFAFAFA9FFFFFFA9FFAFAFA9FFAFAFA9FFAFFFFFAF2F302F367EFD05FF
%789D72A3FD0AFFCABDB7B2B7B7C4CAFD32FF737272484E484E4E73727372
%724872484E4E5A53FD042F84A9AFA9AFA9AFA9FFA9AFA9AFA9AFA9AFA9FF
%A95AFD052F84FFFFFFA34E7248734873A2FD42FF72794E73487348734873
%737372734E7348734E5A2F5A2F302F5AA9FFA9FFAFFFAFFFFFFFA9FFAFFF
%FFFF7E302F5A2F302F5A7EFFA99D727972737273727379CBFD40FF737273
%484E484E484E487272737273484E484E484EFD052F307EAFA9AFA9AFA9FF
%FFFFA9FFFFA92F302F2F2F302F2F2F8478734873727372734E7348734EA3
%FD3FFF7273487348724873487248734E73727972724873484E2F302F2F2F
%305AA9A9FFAFAFA9FFA9857E5A2F302F362F30292F06307E9D72734E7372
%73729D72734E7372FD3FFF73724E484E484E484E484E484E487272737272
%484E484E29FD062F5AA8AFA9AFA985365AFD062F060606292F8478734E72
%487348724873487248A9FD3FFF73734E7348734873487348734873487372
%7372734E7348734E302F5A2F302F5A85FFA9FF845A365A2F302F2F062F06
%2F06307EFFA979727372737273727378FD41FF73724E484E484E484E484E
%484E484E48724E737273484E484E4854FD042F295A5AA9A985365A2F2F06
%2806290628062F2F84FFFFFFA372734E724879A9FD26FFAFFD06FFAFFD14
%FF72794E7248734872487348724873487248734E7372797272487348542F
%302F2F2F5A5AAF7E5A3630292F0629062F062F2F367EFFFFFFA9A978734E
%7F84FD16FF8406062FFF5906A9060606A90684FFFF7E0606A90606592F06
%297E29FF067D29062F84292F060653535953FFFF737272484E484E484E48
%4E484E484E484E484E487272734E4E484E4E5AFD052F5A8485305A2F2906
%29060606FD042F84FFFF84A984A984A984A984A9AFFD13FFA906FF06A92F
%2FA8A906FF842F59FFFF5A2F7E842FA8FF06A9068406FF068406A906AF06
%FF0684842F28A9FFFF72794E734873487348734873487348734873487348
%737373727348725A7E5A5A5A5B5AAF845B5A30062F062F2F5A2F302F5A7E
%FFFFAF85A984AF85A984AFA9FD14FFA828FF29A82806A8A828FF7E2853FF
%FF842853FF062F7E29A8A87E29FF287D292F2F8429FF2859FF0629FFFFFF
%737273484E484E484E484E484E484E484E484E484E48737273484E4E5A59
%7E59855A5A8585305A2F2906FD042F302F2F2F84FFFFFFAF84A984A984A9
%A8FD15FFA906FF0684062F59A906FF2F2F06FFFFFF7E297E2F7EA806A97E
%A806FF0684065959A906FF067EFF5959FFFFFF7273487348724873487248
%73487248734872487348724879727248725A7E597EAFAF85FF845A30362F
%2F2F362F302F302F307EFD05FFA9A984AFFD17FF84297E06532F2F538429
%FF065329A8FF2F2F2F7E06A9A8067D297D067E297E067D2F8406FF2959FF
%2F7EFFFFFF73724E484E484E484E484E484E484E484E484E484E484E7273
%484E2353535A53AFA9AFA985365AFD082F06292F84FD21FF5353598459AF
%2FFF53AF2FFF53A9FFFF2F53A95953A8592F53FF2F2F59AF2FFF53A92FFF
%53A8FF7E84FFFFFF73734E73487348734873487348734873487348734873
%4E797373484E2F30537EAFFFA9FF845A365A2F302F5A2F2F062F285454FD
%4DFF73724E484E484E484E484E484E484E484E484E484E484E7273484E4E
%FD042F85A9AFA985365A2F302F2F06290628064E484848A9FD4BFF78794E
%724873487248734872487348724873487248734E737273484E2F30535436
%85A9AF7E5A36302F2F0629062F064E484E484E78FD4BFF797273484E484E
%484E4872484E484E484E484E484E48727273484E4E2F2F5A2F2F2F5AA985
%305A2F2F0629060606294D7871A24872FD1FFFA9FD2BFFA3797273487348
%734873B772487348734873487348734E7372734872595A2F302F5A5AAF84
%5B5A30062F062F062F2F5ACACAC9724EFD1FFFA97EA97E84A8A97E7E7EA9
%7E8484A9A8847EA984845AA9A8A87E847E8484847EA9A8FD05847E847EAF
%FFA97273484E484E484E487248B74872484E484E484E48737273484E4E5A
%595A2F5A2F5A8485305A2F290629062F2F304EA2CACA4872FD1FFF84A9A8
%A9A9FF84A984A9A8A984A984FF84A9A8AFA8A984FF84A984A9A8AF7EA9A8
%FF84AF84A984A98484A9FFCB737273487248734872487348969573487248
%7348724879727248725A7E597E845A36AF845A3036292907302F30297372
%CAC3CA78FD20FFA8AFFFFFFFAFA8FD09FFA9FD05FFA8FFA9AFA8FFFFFFA8
%FD09FFA8FFFFFF7273484E484E484E484E484E484E484E484E484E484E72
%73484E4E5A595A53AFA9A9A985365AFD072F4E4E7378CAA27972A3FD1DFF
%7EAFA8AF84A9A88584A984A9848484A9A9A984857E8584A984A97EA98485
%7EFD0EFFA372734873487348734873487348734873487348734E79737348
%4E2F5A5A7EAFFFA9FF845A365A2F302F5A2F304E7973737279739D79FD1D
%FFA9A884A8A9A8A97EA9A8A984A984A984FF84A9848484A984A984A884A9
%84A8A8FD0DFFA973724E484E484E484E484E484E484E484E484E484E7273
%484E4E2F2F5A59AFA9AFA985365A2F30FD042F0673727372737273729DA9
%FD30FFAFFD19FF73734E73487248734872487348724873487248734E7372
%73484E2F302F3084FFAFAF7E5A36302F362F2F062F727372797273729D79
%CBFD1CFF8484A97E847E84A8FD26FFA37273484E484E484E484E484E484E
%484E484E48727273484E4EFD042F5A5AA9A985305A2F2F06290606069C72
%7372737273729DA3FD1CFFA8FFA9AFA8AFA9FD27FFCB7372734873487348
%73487348734873487348734E737273484E2F5A292F5A615AFF845B5A302F
%2F062F062FC9A27279737372A379CBFD40FFAFA9AFA9AFFD06FF78734E4E
%484E484E484E484E484E484E484E48737273484E4E5A2F2F2F857E5A8485
%305A2F290629062806CA787372737273789DA2FD3EFFAFFFAFAFA9FFAFAF
%AFFD04FFCB7273487348724873487248734872487348724879727248725A
%7E535A5A5A36AF845A30362929062F2930C9787273727972A3C9FD3EFFA9
%AFA97E5A8584AFA9AFA9FD04FF9D7272484E484E484E484E484E484E484E
%484E7273484E4D5A595A7E85365A8485365A2F2F06292F2F2FC972737273
%7273A2C9CAFD1EFFCACBCACBCACBCACBCACBCACBCACBCACBCACBCACBCAFD
%08FFA9AFFFA9FFAFFF5AA985FFA9FF84FFFFFFCB73727348734873487348
%734873487348734E79727348785A7E5AAFAFAF85FF845A365A2F2F2F5A2F
%30C99D7373727973CBC9FD1DFFCBB7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7
%B7B7B2B7B7B7B2C4FD06FF848584AFA9AFA9AF845AA9AF7E2FFD04FF7873
%4E4E484E484E484E484E484E484E48727273484E295A597EA9AFA9AFA985
%365A2F302F2F2F302FC9777372737273A3CACAFD1CFFFD06B7C4C4BEC4BD
%C4C4BEBEC4BEC4C4FD06B7FD07FF5A305AAFA9FFAFAFA9AF532FA8FD05FF
%73734E7348724873487248734872487372734E734E2F2F547EAFA9FFAFAF
%7E5A36302F362F302F2F53A17279727372C4C9CB729DFD19FFCAB7B2B7B7
%B7B2C4C4CBCABEC4C4B7FFC4CBCAFFB7B7B2B7B7B7BEFD07FFA85A2F84A9
%AFA85A067EFD07FFA97273484E484E484E484E484E484E4873724E48542F
%2F2F5A5AA9A9AFA985305AFD042F060606297CC8779C78A1A1CA724E78FD
%1AFFB7B8B7B7B7B8C4C4CACBB7C4C4BECBCBCACBCAB7B7B8B7B7B7CBFD09
%FFA92F5A292F53FD0AFF9D72734E7348734873487348734873737348732F
%302F5A845A5A85A9FF845B5A302F2F062F062F067DC8C8C8C978739C7248
%A3FD1AFFC4B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7B7B2B7B7BDFD
%08FFA9AF84A9595A7EA984AFFD08FFCB737273484E484E484E484E484E72
%73484E535A535A30857E5A3685A985305A2F2F06290628062952C89FC872
%4E4872484E78FD1BFFCBFD15C4CBFD09FFAF84AF85A984AF85A984FD09FF
%A9737273487248734872487372737273548484FF855A365A858536AF845A
%30362929062F062F297DC8C8C8784872487348A3FD3BFFAFA984A984A984
%A984A9A8CFC9CEC9FD05FFA2737272484E484E484E4E7372727EAFA9AFA9
%AFA985365A5A5A8485365A2F2F0606062F2F2F53C89FC84E4E484E4879A9
%FD3EFFA9A984AFA9FFC7C7C0C7C7C8C7C8CFFFFFFF797973734E73727372
%79727F84AFA9AFA9FFAFFFA9AF845A5AAF845A365A292F06302F302F5AC8
%C8C779487372CBFD41FFA9AFA8FF9FC09EC79FC79EC7C1C7C9FFFFFF7273
%72737273727378FF84A984A984A9A9AFA9AFA9AFA985A985365AFD052F30
%2F2F53C8C7C84E72A2FD46FFC9C7C1C79FC7C1C7C1C7C7C8FD04FF727973
%9D78CBFD04FFAFA984AF85A984AFAFAFA9FFAFAF7E5A36302F362F302F5A
%7EA9C8C8C7C9C8FD47FFC89EC79EC79EC79EC79EC7C7FD10FFAF84A984A9
%84AFA9AFA9AFA985305AFD052F5A84A984C9A5C8C8C8CAFD46FFC8C8C1C7
%C1C7C1C7C1C7C7C8FD12FFA9A984AF85AFA9FFAFFF845B5A302F5A5AA984
%AF85AFC9CDC1CDC8FD13FFCB789D78A3A2FD2EFFC8C8C8C1C79EC79FC7A5
%C8C7C8CAFD11FFAFA984A984A984AFA985305A2F5A7EA984A984AFFFCFFD
%04C8FD12FFCB727372797273729DA3CBFD2AFFCFC8C8CDC8C8C1C7C0C7C7
%C8C1C7C8FD13FF84AF85A984A9845A368485A984AFA9FFFFFFCFC89FCDC8
%FD11FFCB72737273727372737273727378A3CBFD27FFA9A79FC8C7C09EC7
%9EC09EC79EC19ECECFFD11FFA8A984A984A984A984A984A9A8FFFFFF84A8
%C89FA5C8A8FD10FF72797373727973737279737372797379A9FD29FFAFFF
%A9FFFFFFA7C9C0C7C8C7C1C7CFFD12FFAF84AF85A984AFA9FD05FF84AF2F
%539FCDC8A984FD0EFF72737273727372737273727372737273729DFD31FF
%A89FC69EC89EC7A5CFFD12FF84A984A9A8FD05FF84A953292F7E7CA784A9
%A8FD0DFF797273727972737279727372797273727972FD32FFC9C0C79FC7
%C7C79FCEFD12FFAFFD08FFAF85845AAF592959AF85AFFD0DFF7273727372
%73727372737273727372737273A2FD33FFA9CA9EC7C8C79EC8C9FD19FFA8
%A984A9847E068484A9A9FD0DFF7973737279737372797373727973737279
%73A3FD35FFCFC0C79EC7C0C79FFD19FFAFAF84AF858584AFFD0FFF727372
%73727372737273727372737273727372FD36FFCF9FC19EC79EC1FD1CFFA9
%FFAFFD11FF73727972737279727372797273727972737279A9FD39FFAFFD
%32FF72737273727372737273727372737273727372A3FD6CFF7372797373
%727973737279737372797373727979FD6CFF727372737273727372737273
%7273727372737273A9FD6BFF797273727972737279727372797273727972
%7372CBFD6BFF72737273727372737273727372737273727372737EFD6BFF
%7973737279737372797373727973737279737372CBFD6BFF727372737273
%7273727372737273727372737273A9FD6BFF737279727372797273727972
%73727972737279A3FD6CFF727372737273727372737273727372737273A2
%FD6DFF7372797373727973737279737372797373A3FD6EFFA3A3A2A3A3A3
%A2A3A3A3A2A3A3A3A2A3A9FDFCFFFD72FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 4 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">600_450_clean</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-12-17T15:20:54+10:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-12-17T15:20:54+10:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-12-17T15:20:54+10:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>132</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAhAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqpzq7x8V6kjf5b5KJosZCwuQMBufoPbAUhdgS7FXYqlPmjTta1DSJLfRtROmXxI&#xA;ZbjgJAQAaoa7qD/Mu4zJ0mXHCd5I8ce5sxyETZFozS7a8ttOt7e9uje3UaBZrplVDIw6txXYZVll&#xA;GUiYjhHcwkQTYFIrK0OxV2KuxV2KuxV2KuxV2KuxV2KuxV8yeTvz58z6RerDrDtqunciJEkNZgK/&#xA;aSVvi5D+VjQ/5PXO71vYOHLG4eiX2fJ2+bSRly2L6bzhHUMauvzJ8kWurDSptVhW6rxdhUwo38rz&#xA;Aemp+bbd8z4dmaiUOMRNfb8ubeNPMi6TbVNYh06za9kilmtI43mmmhCuEjReXIgsGII6cQfuzFx4&#xA;jOXCOZNNHUBjHlD83/JvmWSK2huDaahKQqWtx8PNj+yj/ZJrsAaE9hmw1nY+fALI4o94cnLpZQ35&#xA;hm2apxnE0BPh9OJKpfp2u2N9I8KcobhOsEwCyEeIWpqM1+k7TxZyYi4yHSWxcjNppYxZ3HeEwzYO&#xA;O7FWC+b/AM04PLmstpj6c9yyxpJ6qyhB8YrShVsvx4OIXb0nZns7LV4vEE+Hciq/anXkvzYfM+my&#xA;34sms4klMSBnD8yoBJFAuw5UyGTHwmnX9q9m/k8ghxcRq+VUyDK3VoDWtd0rRLF77VJ/q1pHQyTF&#xA;XZVqwUV4BupYZbgwTyyEYC5FlGJkaHNW03VNO1O0S80+5jurWT7MsTBl9wadCO4O4wZcUscuGQor&#xA;KJiaKJyti871/wDOK20fWbvTG0t5mtZDGZRMFDUFa04HMmGnsXb1Wi9l5Z8UcniAcQuq/ay/yvrj&#xA;67osGqG2NotxyMcTMHPFWKhqgL1plM48Jp0XaGjGmzHFxcXD1TXIOE1zTlx5Dl/LXfDSLbwJdirs&#xA;VdirsVdirsVdirsVdirsVdir5i8zfkt5nHnqfTtHtjNpVxKZre5qBFDHKa0k324dPftnd6XtrD4A&#xA;nM1MCiOpr9bt8esiYbncdHuvmnzPDaapa+XggebVLa4NPj51CERhAo4tyIatXWn05yWm0xMTl/hj&#xA;Id34+wuBiwkgy7nytqa3dvfCF7XjeiQxFXRhIGrTiUJC8qkjPQ4mJjxA7U7yMvk+i9Tt9Ut/yNmh&#xA;WJ4b+PR0SaJ1KuAIwZQyncHiWrnEYJRlrwbuPH/Y6ewdQT04ny1b19aMITUn4gB27/PO+Pm7Y0+y&#xA;vJd1qa6Xb6Tq0TLqVhaWxmnMpnEyuHjEhdgrc2MDMykbVG5zzDV8JmZR+kk/B5sZOInamQ5jMlG5&#xA;srS5aNp4lkaI8o2I3U+x65Tl02PIQZxBMeXkzhklG6PNWy5g7FWA+ffImi3t5L5j1GS9ljiSJJbK&#xA;yjWSV/iCDgKE/tVb2zIw5SPSKd9ovaHLpMHhwiDvz36+S/TvPGg6RYW9hp/l/WEtY1+BI7NjQkty&#xA;5EtUtUVb54ThlI2TH5uj1OunmmZzsyKd+Xtan1syamiXVjp8bmJbS8txFKzKoBYHm9Y/i2+EHkOt&#xA;NshkiIitiWiJs30Yt+dEg1f8v9Yh0mdLuSxeJr+GB1dkSORXYOqklaD4jXsM2vYhENTHi2u697l6&#xA;OY8UMI/5x40/X7Vr7Vowy6ZK8Nr9Wk5gS85AGkQgheUI3qUNRVRxqTmz9o8kCIw/i3P497kdoZBY&#xA;AfQGci4LzjzZ+XvlmG9vvM+sTXc9s8iPJZWygsWkdYgPhHIrVt6UoO+ZWPLI1EPQ4vafNg04xwjE&#xA;cIq+f2JhF+Z3laysAsVjfw2ttByjjW0f4Y4+K0Cjw5DB+XkTzHzebyanjJlKyTuUB5u8yzeZPJRu&#xA;/L0NyON9DDLHNDLDIRxWQME+FmVWkQ+G2/TMjSHFhy/vpCMaO9j5X57jv7nL0JjOXwY15nvbF7m4&#xA;16cXttf6enqJqGmSDlLChoqvHLXjzDUEigq3v0zJxRNUOXce90+pxnFKp86BsHoe/uZz+V/nxPN+&#xA;hvdSp9XvYZCJLYkMRGSfSYMPt1AoWApyBHbMDV6c45eTmYTIwBIZlmI2OxV2KuxV2KuxV2KuxV2K&#xA;uxV2KrWjjZlZlBZfssRuK+GNrSR6vaWz+Z9GupLVpHt0uj9a4MY4laMA8n+wvKvfc/flUvG4wIH9&#xA;2b4xfP8Am7dd7b4ZhHHKJ61+1I/P1ydOt21zQ/LkGs67COCTsq+pGp2LgAepJT+Vd82mASI4JSIh&#xA;3OBkzkCo/s+TzLyv+furRXRtPNQh1DTbostzMsRiaAMSrqyKCGVQN1Ir7nMrJoRsYbHo0Y9TOO5Z&#xA;X5M/KX8tJtSXXNGv21KJHE0NuZUdYqmqhlUBvhp+0fmMyNT23qDDgkAPN2ktdLJGgQB9r0vTF532&#xA;o3BAoJEtoHHQxQRg0+azSSDNFM7Bx49Uxytm7FXYq7FUDrsFxPpF1FbRevOyH04eYi5MDUDmQwH3&#xA;ZKBo22YoQlICZ4Ynmauvgx+y0KR7i2iudEVbdlZbm4acBk4r8JCo7cuRFOgy45T3t2TSaYQJjO5D&#xA;kKO/3U8/8w+atS8u+ab/AEO9EMeh6tNMJGQuHSN0KxcAjrxryo1OwrStSdjDTjV6WUtOf3+P0+rl&#xA;xbX79txz3Pds3fk4SgCATy2HXvY3N5H8xaPqH+I/I16AIlZ1jTdQnGrqXkryrvVJQCO1TTNbo9Zn&#xA;vwNVA8f8+O8JfYOE9N+dOn1GCAueI1/RP1D9b0Lyh5t846nNZWmsWtpZ6m6G7skEqxR3PGMq0Y4e&#xA;t8fCb1GoGpxpSteOZl08BEyiSQNjty877un43vjjJwiQ+q9/0PTYRMIl9YqZafGUBC19qk5rSoQX&#xA;mBbo6Pc/VYZLi4AUxQxMqOxDA7M/wjJYzRbcOKOSQjKXBE9edJJZafcSXkNvNp9zFAwcyXQumIQo&#xA;Bx5KwQnn/k198tOT3fJuyaLDGBkMlyFbVz+08vNgfkbz/rvmK/1bSri1gtrWzjF+x/ex+l6csYaN&#xA;pJDLQleRowO48Nhse3+ysGLBGZuW/wA6BPSm7JpxiiDA7nb5pH5g8vtp/l3XJLezaLT2jlNpIVSQ&#xA;u4co7AIQY6U4qBswIFARXMjDqjmjCUpXIxHwBiCPee/nv1dP2tImQvmBX4LLPyI0O+s7K41HUeUV&#xA;7fwxFrRolhMaq8gU8VovxgBqBRSuajW9pjLk/LiO2H+K7viAP2cuZc8ZJS08DLnv+x6vmK0OxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVZPDHPDJBKvKKVSkinurChH3YQaNoIvZi8+j63pNWsmbVbBf8Aj2lY&#xA;fWkHhHK1BJ8pDX/K7Zlwzxlz2Lizwkct3n2p/l3pPmq/1C81C8aCQosiemEia3lKAOWRizFfg/aI&#xA;r1FDmTg7QE4ARG0SRf6Px827UmPhRgRUhv8ANI/Iv5U+YrfzGuoaXqhNvay1hvYQ8cEiAqQGYlWl&#xA;VqfEq/CQTSTbezPqY8NEOFjxSJ2fQNlZxWdskEZJClmZ2NWZ3Yu7t7szEnNPKVm3YgUr4EuxV2Ku&#xA;xV41+aPl/wA9X3nEXujW93JbwwxrbzQOVCNuW40YU3651XZOp00MHDkMbJN27PS5MYhUqeu6b9c/&#xA;R1r9eoL30Y/rQBBHq8RzoR/lVzmcvDxnh+m9vc66VWa5MN86/lJo3mnUIr6S8uLOYEC59NuYkjG/&#xA;EB68Po29sz9B2nLTQlGMQeLf48r83IwauWPlun9l5fiEyC7srVo7WNYbaUVkkZYiPTLclFOIHQlt&#xA;+h8cOeYnkTvzcIx4pEypS/whplvqs+txQibVpWYJdOq84onrVI+IUD7R+L7RGxJGDBk4ImF+gnir&#xA;z/HTkzy5ZmPCDsnlsrLborCjAbg5XM7sYDZ4r5g8v/mM35i3Op6Xb3RhN0noT8ysRjUrQMeX2PEe&#xA;GdXptTpfyohMxvh+N/rdvjyYvCo1ye3ZyTqlJrO0ZJkMKFbiv1gcRSSo4nnt8WwpvkuI7b8lO6Fs&#xA;NB0iw0+LTra1RbKBi0MLVcKSxfbny/aNcnPNKUuIndZermpTaVDBLJPZwhZpyfXcElzU1oCSaLXf&#xA;iNq4MQiCSeZasvFVBM4wQig9QBkDzbBybwJdirsVdirsVdirsVdirsVdirsVdirsVSd/J/ld/T56&#xA;ZA/pO0kfJA3FmNSRWtNxlgyyHIsDjieYTdERFCooVR0UCgGVs28VdirsVdirsVYr5i/Mny9oGpNp&#xA;18twbhUVyYkVlo243LLlsMMpCw7rQ9g59Tj8SHDw+Z/YmPlfzVpvmSzlu9PSZYIpPSZplC1agY0o&#xA;W6BhkZ4zE0XE7Q7OyaSYjkIsi9k5yDgKc1xbw8PWlSPmwRObBeTMQoUV6kkgYQCUEgKmBLsVYbq/&#xA;5r+V9K1K4066S5NxbPwkKRqVqPAlxl0cEiLd/pvZzU5sYyR4eGXn+xkOga7aa5pcepWaSJbTFhH6&#xA;yhWPElSaAttUZXOJiaLqtbo5afIccyOIdyY5FxXYq7FVK8uorS0nupa+lbxtLJx3PFFLGn0DCBZb&#xA;MWMzmIjnI182Dr+dPlBmCrHeFiaACJSST/s8v/LSehPspqh1h8/2M8U1UGhFRWh6jMd5shvFDsVd&#xA;irCdQ/N3ypYX9zYzpdGa1leCUrGpXlGxVqHmNqjLxp5EW9Dg9mdTkhGcTGpAHn379zKNE1i21jS4&#xA;NStkkS3uAWjEoCvQMVrQE9abZVKPCadPq9LLBkOORHFHuR2RcZ2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV5t+YP5eJqmrza/eamljpkMC/WT6TSSKsQ3IVTvXMrDlocIG71HZntFHSafw+DikCTz2Rehed&#xA;/wAsPLun2+j2urKFTiQXjmLu80YnDMRHSrowYe2CWHJI3Tzuu7SOpynJM7n8UyO386eXbvRRrdnd&#xA;C40vnwa7RXCJQVLPUAhRtU0yAwS4uHq43iAixujVvIby2WSIc0kUEow34OD9pT0DDxwCNHdiZWFG&#xA;aG6063knsv3sMa8hYE/C1AaLCx3jJqAFNU2AAWtcbEuaaI5JplTY8r80/lhaza3f6/rGsRWGkSSC&#xA;SRitGXmQgUuxCrViBXf5Zl48xoRAsvW6b2oGn00cYhcoirJ2ZXbecfy90XTba0TWbK2tIYgsAeZR&#xA;8CsY61J3qynfxyo4ckjyLymo1fizM5n1SNsK/Mj85p/L+qabLoUtvqOnTxyrcJTkvqoy/tCjbK46&#xA;H783nZXZMNRjlx2JAuTpcMMkSx6P8xbbzRN+kV1K98vatYRs6unO7s3jX42JjHCj0U7H4TTpWlJZ&#xA;+zpac8JAlE/B1WtwSxS9R9xZr5S/Nq71w6clrod5dWl3O9sdSbhGAIwtZGjFQv2uVCw2+yWOYE+z&#xA;4CMpGYiY/wAPf+P7acjTSjOBJlRHTveg6naG8027s1bgbmGSEORUAyKVrT2rmriaNuRp8vh5Iz/m&#xA;yB+ReY6H+WXl/wAv6taXXmLWrY3Cv6lnZM6Qq7IQVb94wZ6H9kD78y5ZpSHpD0/aXtWcsDjxx4OI&#xA;VZO/nX62ff408nUr+ntOp4/W4P8AmvMfwZ9x+Tx/iR7wkvmnzjqFtLDHoi2t4hVZpEeb0nmhdQ6v&#xA;byErEy8TVjyJp23rmTg04IuVuPmzkGhTHfL/AJlntHv30XUZ9cjBjMGn3U8Z5SO7CRIrl+Rk4BGH&#xA;w06bc61zIyYRIDiFeYaYZeE7H4Fnvl3zNa61DQQy2d6ih57C5XhNGCSAWQ/EFYg8SwFcwMuEw8w5&#xA;mPJxeRYBrP5UWJ1q+1jW9bhstMurqSYV4xms0hcJ6kjBAd/f5ZdHOaAAsva4/asYdPGEYeqMRGyd&#xA;thTObPzT5Hs7CGC31vTktLdVgipdwcQI/gC159RxplBxTJ5H5PIZdR4kjOR3kbKV+YdavLmFX03U&#xA;YRpF+yW1rqFmTcP65fdR6INAArFnL0A6065kYMcb3HqHft9/3OPOM53w8qY5oX5i63pNpBJrcbaj&#xA;pEigQanECW69GLAb07PQk9CcycujjM+jaXc4mPVSj9W473otp5g0S7itJIb2L/Tq/VEdgjy8SQwR&#xA;H4saEGu2a44Ji9j6efk7KHqHEOSYZUrsVdirsVdirsVdirsVdirsVQes8f0TeFq8RC5aiGQ0Ckn4&#xA;ACW+WShzDKGMzIiOZ23YHbR6XcNAl28jG4aJICkEbsDIoQc1Bd1+EAbr8PemZRnXIOUexcoBsx9N&#xA;/Z5kV7u/ojPOcN7Z+Wn0zTI/VtZVUm5iAMiSiTmGkTjxZDRR8q9hk9PkxwJyZNhEHnyru9/6acbR&#xA;14sRe36Xmd35X84eX9QbWPJckl48LiaW4WYSvcRSopaN468ZVDLt+0QdhtXMuOfFlj6vq7ug3P8A&#xA;Z8D7mjUmHhiUdp8R+R/Q9E/LzznrXnCCSPVtKbT7m1kiaSZSyxuIpPUoI3+NW5KoIY7g1HhmFqMQ&#xA;x8i04chmd3omYTlJT5rSF/L94J4DcxAKzQCH6wW4urU9Ig8un8csxGpBsxYDmkIAgX1lsGKQ6BoN&#xA;3PBYvp8jMyuVL2Vq0Q9P4ipajKnIsePKgJOX+KRv+ks8vZhhAz4omq2679wIF+fc89/ObQYb/Q7f&#xA;VtKtpUj0iaSK7ilRUJil48ZFQKh4qVoTTv7Zv+w9XCGU4ZSHFMWO/b8fY29l5eYra2DeS7C7XTdU&#xA;vHRo7YWUyLMS6Kz8WPAMPhNAeRB9jmy7WmDKI6/2OH25Iekdd/0PVv8AnHm8hgtJNKEiH17VL+FU&#xA;MhLDmUlkbmevqP6daCvH2zmu0OGcBKN+mXDLyNWB8vV/nNsccRp4GL2bNQ1MW85W1nNeaeLi2eev&#xA;qASJbJNwAAP95J8KV+e+X4ZUC3YtCcwJEox4e/nv3IPSfKnl/UZbhns2X0n4yCe0t05llDclcK4c&#xA;b779euSlmkP7WGo0HhVcoy4u79PUMD8zercapr3CKun2UawQSHl6YWKDgiohQxArxPLavxbEdM2+&#xA;LhjCAv1ncjbbfn3+rp09JcftLTxhigf4mO+XbS7g0aykdoWtNT5J6bSVZnE1wEX0/wB4G5A1BY0A&#xA;6MK7SjOEiQL4493LkOf468mrFiidNM16rB5dLrn87Zb+RRJ8z+bO4EiUO/8Av6bxLfrzC7R5RadF&#xA;1em+b1jOhyl4mm4PGyokP1hq8wAQlD0r17ZrsRqTtMWnOaXACAT1JoMbsfLmgX11HZGzdFVHljaS&#xA;ytvTX4hyHJQ4RmJrTauXHKRv+ks83ZphDiMoneqHP5EITVbPRtTt9L06yVYdMstSj+s+oEiZJXI4&#xA;RhVAjqfiDofj3GWfmpacGXOc6iK7idz3ihuDy2YaLNECXQ0paNHcWHmWHy1LHx0i2hkt5EnVz6nq&#xA;GSVHQgmNgQAvJlHQjq1BackJRMgbyeRG3Ln1v9bjw4BhMJCpcW233Hu/TSY6V5b8sX2p2bXGnA3O&#xA;kyzfU5F+wF9Z5AHXpRXYla9D0phnqssIyEZemfP5MNNnlEcANBnmatvdirsVdirsVdirsVdirsVd&#xA;irxr80fMPnmx84iPRp7uO0hhjMccCFoizVLcgFKsfnnVdk6bTzwXkEeIk8+bs9LjxmHqq3rumzXM&#xA;+nWs11GYbmWGN54TsUdlBZfoO2czliBMgGxbrpAAmkNb+X9It7a4tordRBdf3yVO4HRetQB2A6ZG&#xA;czP6t2qMBHkls3kiyd5GivLqH1GLFUlKqoPRVVOA4r25V8OmTw5BjugNzZ97GeLiIs8vuQfk/wAt&#xA;675c066hvb9b8ySj6vwiWMRxio2A/m226DsBmbqtRizSHDHgod/NszSFeiIiyq1LG3QtUsRvXrmv&#xA;nzRDk8X8weaPzBtfzFuEsWvJrGO6SKK0WMtC8YKjiBx4/F/N1986vTaTSy0o4uES4efW3bY8WM4t&#xA;6untuck6tLNS8vWF7I1xvDdkU+sJvUUpxZTVWUjqKb5r9R2dCc/FiTDKOUonf9Tk4tVKA4ece5Zc&#xA;+WtPvdNFlfxpKpT05WiX0Q6+HFSdqZsdPlywA4pcUu+ufw3cTPjhMnZfougWmkPcCzoltNw9K2VF&#xA;VYhGCOKlQCQeu/fImI4jL+KXP7mQsREeg5K+tzXEGjX89tUXMVtK8BA5HmqErQb13y7BEHJEHkSG&#xA;UADIW8q/KTzD56uvMUlnq7Xdzp7wu7vcq1I3BBUh2Fd+nGv6s6PtnTaaOLihwiV9OrsNXjxiNxq3&#xA;sOcu61Kl8vWbXWoPcRQS2t6Ub6uIQpDBSHZ25HmXJ/lH04xuMzO5cRoc+QHIDu5lOQ8YEZbgKH+F&#xA;of06dQ9atkLb6vHp3poFjYspMkUi0ZarGAV+nLITERKh65kEm+dA1t8VJuHB0dpOiafo1y9vp1qt&#xA;tDNIZZmUHlIxqeTsdz1y6eQzjZNlxYQ4ZUBs8t/xP+Ycf5lTRRNeT6f+k3txalGMBthMU2FOI/d/&#xA;tfTnSflNKdICeES4Lvrdfr6O+8LH4XS6e3ZyLqlvoxfyL15dB9rx+eG0UlWo6Ver9dutNmJurpUD&#xA;20zVibgpWilg/p1B68SPFTksQhGVkc+ZY5BIjYtxQ3lnYxREIJn5NcPEvEF2JJ8fHrlwIkSWqVxA&#xA;ATbMZyHYq7FXYq7FXYq7FXYq7FXYqwXzf+acHlzWW0x9Oe5ZY0k9VZQg+MVpQq2X48HELt6Tsz2d&#xA;lq8XiCfDuRVftTryX5sPmfTZb8WTWcSSmJAzh+ZUAkigXYcqZDJj4TTr+1ezfyeQQ4uI1fKqZBlb&#xA;q1NLq2ed7dJka4iAMkIYF1DdCy9RXJGBAutimjVqmRQ7FXnev/nFbaPrN3pjaW8zWshjMomChqCt&#xA;acDmTDT2Lt6rRey8s+KOTxAOIXVftZf5X1x9d0WDVDbG0W45GOJmDnirFQ1QF60ymceE06LtDRjT&#xA;Zji4uLh6prkHCWTzwwQvPPIsUMSl5JXIVVVRUszHYADDGJJoblIFqWnajYalZx3thOlzaTAmKeM8&#xA;kYAkGhHuMlkxShLhkKIWUSDRdqN2LLT7m8K8xbRPMUBpX01LUr70yIFmmzBi8ScYfziB83m0P55w&#xA;zSpDFosjyyMEjQTrUsxoAPg8cyvyvm9bL2QMQScoof0f2vUFJKgkUNNx1ocxHji3ihTiuLebn6Mq&#xA;Sem3GTgwbi1K0NOhocJBCAVTAl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsF86/l/5e1C/n&#xA;8x6zfTW1nbQBrpYwKBIgSWrxZunWgzIxZZAcIDvtD7Q5NJg8OMY9TZtdpf5iflbpViun2OqQwW1m&#xA;tOHCbatSWJKb1oSThlp8pNkOj1GuOaZnOVyKte/mh5dm8t6lqugT/pR7BYw6Ro6hGnqI2bmq/CKE&#xA;n5ZdpdDKeWMJem/0Lp+HJKgXmHkvSvN2o+Z5POuo6k2i6RbySNLc3bqryu6AqDCSKBgU+EhfhoF8&#xA;c6HXZ8McX5eEeOfcN6/s+Pm7PVGMYcIG5Hd9vm9k8v8AmGG8lmspp/VvIpCvL0niRhQkBGYAPspN&#xA;R29qE8xmwGIutnR4swJq909zGb3nvmP8t/KQ1O88ya9qLwWMkivMjskUSs7LGoaTrRmIA6fPMmGa&#xA;VcMRu9Fh9ps2HAMcREcIriZFp/nDySDbabYapaVPCC1to5F9kRFH4AZXLFPmQXnZ5+ORkTciVPzR&#xA;5307RY5Iw4a8jeOJhIsgjQyxvIpZlU8hxj3CVIqtaVGW4NKZ79Px+Pm155nHDi70B5k0e28/eUPq&#xA;MlxLZw36q37sK3F4ZAeW4BIPHxG3bL9LmOly8YF8P6WWDUEESCVfk95T81+U/wBJ6Jq08NxpsZjm&#xA;09o2kNBIWDUVxRQSpqK1r88ye19Zh1HDOIIn15OXqM8clECi9Bv7RLyxuLR2KpcxPEzDqA6lSRX5&#xA;5pgaNtWHIccxMfwkH5PO4fKH5f8AkS5ttT1q+kkn5M1o8yMyK0dDyCRI3xLWtWPy6Zk8c8mwDu+0&#xA;fafNmgYbQiedcz8U/m/NXyFDM8L6mTLGzIyJb3LkstQQoWM8vsnpkBpp9zzfjR72C/nJ5s8x6Wbw&#xA;2V0bSKSBIUSNpVmUpdfE4KlVAdQN6dDSu5ruOw8GHNOiOKUbvkRy5Ed46fP3bfR0Y1Idb5c/j+h3&#xA;5Necde1/TbmTV5DNNYT2cNpeAETvHJKFlSVxs6KpBow8T1oRb25o8eGQ4BXEDY6eVOLrccISHDzL&#xA;2GzvLS9to7qznjubWYcop4WWSN18VZSQR8s52cDE0RRDQQRzVcih2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVD6kJjp10IQ7TGGQRrEQHLcTTiSVHKvTfJR5hlCAkQCeG+vd5sUsIdQlktEnh1NWm4&#xA;rM3ryL6VUJLPzRVoCKHi567Vy+Ux5OVk7PxxBIyg19vuok/Me+ky1m+udBsbl7KzmuvTtZJhPJK0&#xA;iBoVZvjDtsO5oRXt7HBjGWYEjVyA+bhYx6xGti+bPN3mL9P6u66elzO0zNNHbGRpj60rFpOHp8RT&#xA;l0CDf2ztezsJxY7nQ+FbDv8A29HooYxCJFiXD1Hd8ft8/m9b/KHyVrNi1tqGrzJDcWqOq6byDyRi&#xA;QMPiH+6tmrxr8xXOb7W1cJyIhuD1/HN53UxjLUGcSK2+7d6zmkSlnmazmvdDuraGE3ErhSkIKDkV&#xA;dWpVyFHTvk8cqlbKGOMyIylwxPWrr4BIdG8pxG953Wnz2awhZIpfrMTh3qRx/dBHUp1BB75dLMa6&#xA;fJnm0mGABhPjPdRDD/PC3Oi+amml/wBIg1IoklRItYYVqnx1Usyrsw5kNRSwrTM3TZzkiYAUIDbz&#xA;kbv4cum1no4uvzDgxx6b39n7Uq0K0/MvTTLeR6un6LvYp4ng1GaV2jliDemUcvyiJjSoYPsOo+zj&#xA;PNpZVW8bAsd/Uctze1Vu3xxcGoHDZjse9Ofy6/NLUdY84ros9rC6TQembqJnLg26O5dyxZSHYmnc&#xA;V398vtDsuGLB4gJvuP3e8OfqNDGETMH8F67nPOuSjzDaXdyLUW8MswWQ+qIp1t+KlT8RJVi29BQU&#xA;65ZjlVtuPFjnfHLhrltd+SG0rRC7Tm+tZbcKwWEG7aXmtAxb4eHH4tqZKWTu+5GbBijXBIz232Ir&#xA;9aE1HStBfU9UtL24e5TV7eOGfSpQWiPCpUo5oQx5HYN16b0zFx9q4cOaOMERzcV3v1A/zejYIZfD&#xA;4wNopVc6Boelafb6PoKm3Wd5JJY4qhwvptFxP7YYmUfa329s20tTkySM57kcrcCeW5iRPEb+7omn&#xA;5bQavb+XlhvyWEckgjkk+1IS5ZpB/kMzGldz1zG1OoxZiMmOuGUQaHTbkfMdfk7DWCspZZmM4zsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirxr80fL/AJ6vvOIvdGt7uS3hhjW3mgcqEbctxowpv1zq&#xA;uydTpoYOHIY2Sbt2elyYxCpU9d0365+jrX69QXvox/WgCCPV4jnQj/KrnM5eHjPD9N7e510qs1yR&#xA;BAIIIqDsQcrYpJpXknyppOpzanp2mQW19P8AbmRdwKUIQHaMHuFpXMrNrc2SIjORMR+Pj8WyWWUh&#xA;ROyNlsIoBNLZQJFPO3K4eNQrP13JHU1OVQlZ9TjTia9KKtlZbdFYUYDcHITO7OA2eLeYPL/5jN+Y&#xA;txqemW90YTdJ6E/qFYjEpFFJ5fY8R0zq9NqdL+VEJmN8Pxv9btseTF4VGuT23OSdWhr7TNPv1QXl&#xA;tFcemS0RkRXKEihK8gaZKMzHkWMog8wk+qeRNC1TS3sLwSuXDA3iuEn/AHgYOOSgLxbm3wceO/TB&#xA;pqwkcI5SEviDd/NuGWQlxdW9M8p6T5f0+Ky0O0W3iVeEjqKzOASR6kh+JtyepzLnqpZZGWQ393ya&#xA;tTkyZDZNplq6XZ0O9S15fWzayiDgaP6npkLxPjy6ZThMfEjxfTxC/mzx1Yt5Z+Umg+fNK8xSHUre&#xA;4g0uSF/XWd/gMhIKlVqfjr38K50XbOo02TEOAgzvo7DV5Mco7c3sOcu61QvLGzvIjFdQrKh7MNxT&#xA;wPUfRlOfTwyx4ZjiizhklA3E0WodPtIYhEiVCqYw7Es/A/s8z8VPpyeKAxxEY/SPMn72MzxGzzKF&#xA;tNPNnJDbW6stnDX0lLMwANT1Yk9TmQOEQoUGgiXF5JllTc7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq8D84Qeabvzxqdtpy3kpM59OOEyUC0G+2wHvmwxmIgLfTOy56aGjhLJwD&#xA;09aex+TtHutI8u2dldyNLeKpe5dmLn1HPIjka7LXjmFklcrDwfamqjn1EpwFR6dNh+LThmVFLMQq&#xA;jcsTQAZAB15LG/P/AJvl8r+W7vVbeyfULiBVZIF5BPjcJyZwCKKWrx6kfSRm6DSDPlECeEFniiJS&#xA;AJpLvyq/MaPztob3EyRwaraNwvreKvAFieDJUseJA8euX9q9nflpit4S5W26nB4Z8mbZq3HdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrzVfapY6Dc3WlmA&#xA;X0Zj9L62rtD8Uqq3IRlW+yTSh65ZiiJSosMkiBYYmNd/NV5gq2dgI240JtL2ooo51JkVeteO4zI8&#xA;PF3/AGhq459yU+a/MGrahNcaRPcxQOn1Vo/ghMLTemyzx8J2oeMrHkrMxXipCndszMGGEQJdd7HW&#xA;uh+I5d++7PXQrFH+dJE+UvzS8pT2/wCibu6aC8soWLx3SpCs4O7CE8ihAPwhSR7CmU5tLkuxHn80&#xA;YcZ4xjO0vP8AHJkXlLTPJ9treoXehQ20Nxe29vNcJA0ZNHaRg3BT8PIFT4dKZDVZc8oRGTi4QTV/&#xA;jo5MvEG0roMszAYOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KvPde/M/y2Nfn8q6hbXKwmRLeW8jYIA5INfhZWCg0qa/Rm5xdj5ZYRliRyunYafDkhWSJFj4s&#xA;y07Q7DT55JrYOHlVUcFzxopJHwCi1+LrSuagyJac+snlAEq2/HPmxPzz5E1HVdSttQ0poY3Ut66n&#xA;923JlCCTkoqxArWprsKZkaXLGBkZWeIAd42vby5uu1MZzEaP0/ppIL7ybbafoP6StPLw1K7g9eNe&#xA;cTm5dJubAemAknEsVAI3AJ2pyx0+sz5iPEIhIyG/ICIIF8+YG/w9znHhlmEyeg380H+Wn5deYNK1&#xA;u180a0yWI9ORotJQVl5SqyUkpRUADVAqfCgzd9o9oQyY/Bhcq/i933uVrddj4TCO91v972ZTyUHx&#xA;Fc5suuDeBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8g8x&#xA;/wDKof8AF91+lvrf6T+sr9Zpz9HnUdeP7PjTOn0v57wBwcPBW3e7LH43AOGqev5zDrXYq7FUNe/V&#xA;eK+vXqeNOvvlmPi6NeTh6ohKcFp0oKZAsw3gS7FXYq7FXYq7FXYq7FXYq7FX/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:fc9e1a62-03bf-0d4b-9dd0-bfa81737cc5e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:fc9e1a62-03bf-0d4b-9dd0-bfa81737cc5e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:471e0793-4424-5748-a16a-89b4f44b8205</stRef:instanceID>
            <stRef:documentID>xmp.did:471e0793-4424-5748-a16a-89b4f44b8205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1fc469ec-54d7-6444-9087-891d1f765b63</stEvt:instanceID>
                  <stEvt:when>2016-07-05T10:25:28+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:65093837-8c70-274d-a0b6-73be46bbcfe1</stEvt:instanceID>
                  <stEvt:when>2018-07-04T15:37:19+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:254258aa-7d0d-c94e-83d9-a2bc49954f99</stEvt:instanceID>
                  <stEvt:when>2018-09-27T09:50:25+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fc9e1a62-03bf-0d4b-9dd0-bfa81737cc5e</stEvt:instanceID>
                  <stEvt:when>2018-12-17T15:20:54+10:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
600 400 li
600 0 li
cp
clp
529.947 338.749 mo
520.204 344.374 504.408 344.374 494.664 338.749 cv
484.922 333.124 484.921 324.004 494.664 318.379 cv
504.407 312.754 520.203 312.754 529.947 318.379 cv
539.69 324.004 539.69 333.124 529.947 338.749 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.280034 .073518 .0233463 0 cmyk
f
446.151 328.202 mo
365.236 282.063 li
362.276 280.354 362.647 277.369 366.064 275.397 cv
412.62 248.518 li
416.037 246.545 421.206 246.331 424.166 248.039 cv
505.081 294.178 li
508.041 295.886 507.67 298.87 504.252 300.843 cv
457.696 327.723 li
454.279 329.696 449.11 329.91 446.151 328.202 cv
f
512.296 278.646 mo
512.296 89.7445 li
437.199 70.0893 li
423.366 62.103 li
420.192 60.27 414.647 60.4994 410.981 62.6167 cv
398.076 70.0678 li
358.021 70.0453 li
369.881 252.403 li
369.791 253.644 370.483 254.841 372.008 255.721 cv
446.951 312.269 li
450.125 314.102 455.67 313.872 459.336 311.755 cv
509.281 282.92 li
511.395 281.7 512.415 280.119 512.296 278.646 cv
.827268 .57586 .071809 .00112917 cmyk
f
417.62 60.8754 mo
415.296 60.9311 412.885 61.517 410.981 62.6167 cv
398.076 70.0678 li
358.021 70.0453 li
358.021 259.455 li
357.93 260.696 358.622 261.893 360.148 262.773 cv
446.951 312.269 li
448.476 313.15 450.55 313.549 452.699 313.497 cv
453.593 122.904 li
417.62 60.8754 li
.147219 .0154116 0 0 cmyk
f
447.747 312.66 mo
450.486 313.832 454.447 313.767 457.648 312.546 cv
457.648 120.651 li
447.747 120.651 li
447.747 312.66 li
cp
.657221 .328313 0 0 cmyk
f
446.951 122.925 mo
360.148 73.4291 li
356.973 71.5971 357.37 68.395 361.036 66.2787 cv
410.981 37.4438 li
414.647 35.3276 420.192 35.0971 423.367 36.9301 cv
510.169 86.4262 li
513.344 88.2592 512.946 91.4604 509.281 93.5766 cv
459.336 122.413 li
455.67 124.529 450.125 124.758 446.951 122.925 cv
cp
.147219 .0154116 0 0 cmyk
f
509.281 90.0649 mo
459.336 118.9 li
455.67 121.016 450.125 121.247 446.951 119.414 cv
360.148 69.9174 li
359.44 69.5082 358.919 69.0297 358.564 68.5121 cv
357.473 70.267 357.967 72.1713 360.148 73.4291 cv
446.951 122.925 li
450.125 124.758 455.67 124.529 459.336 122.413 cv
509.281 93.5766 li
512.128 91.9321 512.995 89.6352 511.753 87.8315 cv
511.256 88.6323 510.429 89.4018 509.281 90.0649 cv
cp
.0124514 0 0 0 cmyk
f
449.406 102.866 mo
391.615 69.3657 li
390.129 68.5082 390.315 67.0102 392.031 66.019 cv
415.402 52.5258 li
417.118 51.5356 419.712 51.4282 421.198 52.2856 cv
478.99 85.7856 li
480.475 86.643 480.288 88.1411 478.574 89.1323 cv
455.202 102.625 li
453.487 103.616 450.892 103.723 449.406 102.866 cv
cp
1 .866484 .240818 .0951247 cmyk
f
418.206 70.8705 mo
414.858 68.937 li
414.652 68.8178 414.678 68.6108 414.915 68.4741 cv
418.149 66.6069 li
418.386 66.4702 418.745 66.4545 418.951 66.5737 cv
422.299 68.5073 li
422.505 68.6254 422.479 68.8334 422.242 68.9702 cv
419.008 70.8373 li
418.771 70.9741 418.411 70.9887 418.206 70.8705 cv
cp
.147219 .0154116 0 0 cmyk
f
429.394 77.3032 mo
426.045 75.3696 li
425.84 75.2514 425.866 75.0434 426.103 74.9067 cv
429.336 73.0395 li
429.574 72.9028 429.933 72.8881 430.138 73.0063 cv
433.487 74.9399 li
433.693 75.059 433.667 75.2661 433.43 75.4028 cv
430.196 77.27 li
429.958 77.4067 429.6 77.4223 429.394 77.3032 cv
cp
f
440.582 83.7358 mo
437.233 81.8032 li
437.028 81.684 437.053 81.477 437.29 81.3403 cv
440.525 79.4731 li
440.762 79.3364 441.12 79.3207 441.327 79.4399 cv
444.675 81.3735 li
444.88 81.4916 444.855 81.6987 444.618 81.8364 cv
441.384 83.7026 li
441.147 83.8403 440.787 83.8549 440.582 83.7358 cv
cp
f
451.77 90.1694 mo
448.421 88.2358 li
448.215 88.1176 448.242 87.9096 448.479 87.7729 cv
451.712 85.9057 li
451.95 85.769 452.309 85.7543 452.514 85.8725 cv
455.863 87.8061 li
456.069 87.9252 456.042 88.1323 455.805 88.269 cv
452.572 90.1362 li
452.334 90.2729 451.975 90.2875 451.77 90.1694 cv
cp
f
391.615 69.3657 mo
391.683 69.4047 li
391.795 69.3246 391.9 69.2416 392.031 69.1664 cv
415.402 55.6723 li
417.118 54.6821 419.712 54.5746 421.198 55.4321 cv
478.921 88.893 li
480.29 87.9125 480.362 86.5786 478.99 85.7856 cv
421.198 52.2856 li
419.712 51.4282 417.118 51.5356 415.402 52.5258 cv
392.031 66.019 li
390.315 67.0102 390.129 68.5082 391.615 69.3657 cv
cp
.657221 .328313 0 0 cmyk
f
437.361 160.351 mo
373.222 123.321 li
371.372 122.253 369.873 119.389 369.873 116.923 cv
369.873 105.173 li
369.873 102.707 371.372 101.575 373.222 102.642 cv
437.361 139.673 li
439.21 140.741 440.709 143.605 440.709 146.07 cv
440.709 157.821 li
440.709 160.286 439.21 161.419 437.361 160.351 cv
f
432.51 149.964 mo
429.495 148.224 li
429.092 147.991 428.766 147.367 428.766 146.83 cv
428.766 143.61 li
428.766 143.073 429.092 142.826 429.495 143.058 cv
432.51 144.798 li
432.912 145.031 433.24 145.656 433.24 146.193 cv
433.24 149.413 li
433.24 149.95 432.912 150.197 432.51 149.964 cv
cp
1 .866484 .240818 .0951247 cmyk
f
422.431 144.145 mo
419.417 142.405 li
419.014 142.172 418.687 141.548 418.687 141.01 cv
418.687 137.791 li
418.687 137.253 419.014 137.006 419.417 137.239 cv
422.431 138.979 li
422.834 139.212 423.161 139.836 423.161 140.373 cv
423.161 143.593 li
423.161 144.13 422.834 144.377 422.431 144.145 cv
f
437.361 202.807 mo
373.222 165.776 li
371.372 164.708 369.873 161.845 369.873 159.379 cv
369.873 147.628 li
369.873 145.163 371.372 144.03 373.222 145.098 cv
437.361 182.128 li
439.21 183.196 440.709 186.06 440.709 188.526 cv
440.709 200.276 li
440.709 202.742 439.21 203.874 437.361 202.807 cv
.657221 .328313 0 0 cmyk
f
432.51 192.419 mo
429.495 190.679 li
429.092 190.447 428.766 189.823 428.766 189.285 cv
428.766 186.066 li
428.766 185.528 429.092 185.281 429.495 185.514 cv
432.51 187.254 li
432.912 187.487 433.24 188.111 433.24 188.648 cv
433.24 191.868 li
433.24 192.406 432.912 192.653 432.51 192.419 cv
cp
1 .866484 .240818 .0951247 cmyk
f
422.431 186.601 mo
419.417 184.861 li
419.014 184.627 418.687 184.003 418.687 183.466 cv
418.687 180.247 li
418.687 179.709 419.014 179.462 419.417 179.695 cv
422.431 181.435 li
422.834 181.667 423.161 182.292 423.161 182.83 cv
423.161 186.049 li
423.161 186.586 422.834 186.833 422.431 186.601 cv
.147219 .0154116 0 0 cmyk
f
437.361 245.263 mo
373.222 208.232 li
371.372 207.165 369.873 204.3 369.873 201.835 cv
369.873 190.084 li
369.873 187.619 371.372 186.486 373.222 187.553 cv
437.361 224.584 li
439.21 225.652 440.709 228.516 440.709 230.981 cv
440.709 242.732 li
440.709 245.198 439.21 246.331 437.361 245.263 cv
.657221 .328313 0 0 cmyk
f
432.51 234.875 mo
429.495 233.135 li
429.092 232.903 428.766 232.278 428.766 231.741 cv
428.766 228.521 li
428.766 227.984 429.092 227.737 429.495 227.969 cv
432.51 229.709 li
432.912 229.943 433.24 230.567 433.24 231.104 cv
433.24 234.324 li
433.24 234.861 432.912 235.108 432.51 234.875 cv
cp
.147219 .0154116 0 0 cmyk
f
422.431 229.056 mo
419.417 227.316 li
419.014 227.083 418.687 226.459 418.687 225.922 cv
418.687 222.703 li
418.687 222.164 419.014 221.917 419.417 222.151 cv
422.431 223.891 li
422.834 224.123 423.161 224.747 423.161 225.286 cv
423.161 228.504 li
423.161 229.042 422.834 229.29 422.431 229.056 cv
1 .866484 .240818 .0951247 cmyk
f
437.361 287.718 mo
373.222 250.688 li
371.372 249.621 369.873 246.756 369.873 244.29 cv
369.873 232.54 li
369.873 230.075 371.372 228.942 373.222 230.009 cv
437.361 267.039 li
439.21 268.108 440.709 270.971 440.709 273.437 cv
440.709 285.188 li
440.709 287.653 439.21 288.787 437.361 287.718 cv
.657221 .328313 0 0 cmyk
f
432.51 277.331 mo
429.495 275.59 li
429.092 275.358 428.766 274.734 428.766 274.197 cv
428.766 270.977 li
428.766 270.44 429.092 270.193 429.495 270.425 cv
432.51 272.165 li
432.912 272.398 433.24 273.022 433.24 273.56 cv
433.24 276.78 li
433.24 277.317 432.912 277.564 432.51 277.331 cv
cp
.147219 .0154116 0 0 cmyk
f
422.431 271.512 mo
419.417 269.772 li
419.014 269.539 418.687 268.914 418.687 268.377 cv
418.687 265.158 li
418.687 264.621 419.014 264.373 419.417 264.606 cv
422.431 266.346 li
422.834 266.58 423.161 267.204 423.161 267.741 cv
423.161 270.96 li
423.161 271.497 422.834 271.745 422.431 271.512 cv
cp
f
469.088 160.351 mo
501.947 141.539 li
503.795 140.471 505.294 137.607 505.294 135.141 cv
505.294 123.391 li
505.294 120.925 503.795 119.792 501.947 120.86 cv
469.088 139.673 li
467.239 140.741 465.74 143.605 465.74 146.07 cv
465.74 157.821 li
465.74 160.286 467.239 161.419 469.088 160.351 cv
cp
1 .866484 .240818 .0951247 cmyk
f
469.088 202.807 mo
501.947 183.994 li
503.795 182.926 505.294 180.062 505.294 177.597 cv
505.294 165.846 li
505.294 163.381 503.795 162.247 501.947 163.316 cv
469.088 182.128 li
467.239 183.196 465.74 186.06 465.74 188.526 cv
465.74 200.276 li
465.74 202.742 467.239 203.874 469.088 202.807 cv
cp
f
469.088 245.263 mo
501.947 226.45 li
503.795 225.382 505.294 222.518 505.294 220.053 cv
505.294 208.302 li
505.294 205.836 503.795 204.704 501.947 205.771 cv
469.088 224.584 li
467.239 225.652 465.74 228.516 465.74 230.981 cv
465.74 242.732 li
465.74 245.198 467.239 246.331 469.088 245.263 cv
cp
f
469.088 287.718 mo
501.947 268.906 li
503.795 267.838 505.294 264.974 505.294 262.508 cv
505.294 250.758 li
505.294 248.292 503.795 247.16 501.947 248.227 cv
469.088 267.039 li
467.239 268.108 465.74 270.971 465.74 273.437 cv
465.74 285.188 li
465.74 287.653 467.239 288.787 469.088 287.718 cv
cp
f
74.9515 168.811 mo
76.3402 168.811 li
76.8246 168.811 77.2494 168.768 77.6156 168.681 cv
77.9818 168.595 78.2885 168.494 78.5365 168.374 cv
78.7836 168.256 78.9906 168.063 79.1576 167.793 cv
79.3246 167.525 79.4506 167.277 79.5375 167.05 cv
79.6234 166.825 79.6879 166.483 79.7308 166.026 cv
79.7738 165.568 79.8011 165.178 79.8119 164.855 cv
79.8226 164.532 79.8275 164.053 79.8275 163.417 cv
79.8275 153.633 li
79.8275 152.998 79.8168 152.487 79.7953 152.099 cv
79.7738 151.712 79.723 151.322 79.642 150.929 cv
79.5609 150.536 79.4427 150.232 79.2865 150.017 cv
79.1302 149.801 78.9232 149.605 78.6654 149.427 cv
78.4066 149.249 78.0844 149.126 77.6967 149.056 cv
77.309 148.986 76.8402 148.951 76.2914 148.951 cv
74.9515 148.951 li
74.9515 168.811 li
cp
70.0756 172.234 mo
70.0756 145.463 li
76.308 145.463 li
77.9222 145.463 79.2728 145.624 80.3607 145.948 cv
81.4476 146.271 82.3197 146.782 82.976 147.482 cv
83.6322 148.181 84.098 149.039 84.3724 150.057 cv
84.6469 151.074 84.7845 152.326 84.7845 153.811 cv
84.7845 163.466 li
84.7845 164.995 84.6449 166.291 84.3646 167.358 cv
84.0844 168.423 83.6244 169.328 82.9847 170.07 cv
82.3441 170.813 81.4906 171.359 80.4252 171.708 cv
79.3597 172.059 78.0521 172.234 76.5013 172.234 cv
70.0756 172.234 li
cp
f
92.8256 162.836 mo
96.4095 162.836 li
94.6176 151.841 li
92.8256 162.836 li
cp
86.6097 172.234 mo
92.0502 145.463 li
97.1361 145.463 li
102.562 172.234 li
98.0248 172.234 li
96.9427 166.017 li
92.309 166.017 li
91.2113 172.234 li
86.6097 172.234 li
cp
f
106.872 172.234 mo
106.872 149.064 li
102.384 149.064 li
102.384 145.463 li
116.092 145.463 li
116.092 149.064 li
111.748 149.064 li
111.748 172.234 li
106.872 172.234 li
cp
f
122.921 162.836 mo
126.506 162.836 li
124.714 151.841 li
122.921 162.836 li
cp
116.705 172.234 mo
122.147 145.463 li
127.233 145.463 li
132.658 172.234 li
128.12 172.234 li
127.039 166.017 li
122.405 166.017 li
121.307 172.234 li
116.705 172.234 li
cp
f
150.112 172.556 mo
145.397 172.556 142.921 169.833 142.685 164.386 cv
146.931 163.498 li
147.038 167.04 148.05 168.811 149.966 168.811 cv
150.709 168.811 151.26 168.584 151.621 168.132 cv
151.982 167.68 152.162 167.073 152.162 166.308 cv
152.162 165.565 152.028 164.884 151.758 164.265 cv
151.49 163.647 151.177 163.141 150.822 162.747 cv
150.467 162.355 149.96 161.868 149.304 161.287 cv
145.785 158.235 li
144.751 157.331 143.982 156.392 143.476 155.417 cv
142.969 154.444 142.717 153.224 142.717 151.76 cv
142.717 149.683 143.328 148.069 144.549 146.916 cv
145.771 145.765 147.448 145.178 149.578 145.157 cv
150.558 145.146 151.425 145.267 152.178 145.52 cv
152.932 145.773 153.553 146.112 154.043 146.538 cv
154.533 146.962 154.942 147.493 155.27 148.127 cv
155.599 148.763 155.843 149.422 156.005 150.105 cv
156.166 150.789 156.28 151.55 156.344 152.39 cv
152.178 153.213 li
152.157 152.675 152.121 152.207 152.074 151.809 cv
152.025 151.411 151.942 151.007 151.824 150.598 cv
151.704 150.189 151.551 149.858 151.363 149.605 cv
151.174 149.352 150.921 149.15 150.604 148.999 cv
150.286 148.849 149.918 148.789 149.498 148.822 cv
148.777 148.865 148.225 149.104 147.843 149.54 cv
147.461 149.976 147.27 150.56 147.27 151.292 cv
147.27 152.154 147.44 152.861 147.779 153.415 cv
148.118 153.97 148.648 154.565 149.369 155.2 cv
152.857 158.235 li
153.438 158.762 153.944 159.274 154.374 159.769 cv
154.805 160.264 155.216 160.83 155.61 161.464 cv
156.002 162.099 156.301 162.799 156.505 163.563 cv
156.71 164.328 156.812 165.135 156.812 165.985 cv
156.812 167.933 156.196 169.516 154.963 170.732 cv
153.731 171.949 152.114 172.556 150.112 172.556 cv
cp
f
159.67 172.234 mo
159.67 145.463 li
170.875 145.463 li
170.875 148.903 li
164.546 148.903 li
164.546 156.588 li
169.551 156.588 li
169.551 160.027 li
164.546 160.027 li
164.546 168.859 li
170.956 168.859 li
170.956 172.234 li
159.67 172.234 li
cp
f
180.951 172.556 mo
179.798 172.556 178.782 172.412 177.899 172.121 cv
177.016 171.83 176.286 171.426 175.711 170.91 cv
175.135 170.393 174.666 169.752 174.306 168.988 cv
173.946 168.224 173.693 167.404 173.547 166.526 cv
173.402 165.649 173.329 164.661 173.329 163.563 cv
173.329 154.231 li
173.329 153.068 173.405 152.038 173.555 151.139 cv
173.706 150.24 173.959 149.406 174.315 148.636 cv
174.669 147.867 175.135 147.234 175.711 146.739 cv
176.286 146.244 177.013 145.857 177.891 145.577 cv
178.768 145.296 179.787 145.157 180.951 145.157 cv
182.285 145.157 183.426 145.334 184.373 145.69 cv
185.321 146.044 186.069 146.567 186.618 147.255 cv
187.166 147.945 187.565 148.749 187.813 149.669 cv
188.06 150.589 188.184 151.664 188.184 152.891 cv
188.184 155.183 li
183.486 155.183 li
183.486 152.907 li
183.486 151.572 183.415 150.673 183.276 150.21 cv
182.995 149.306 182.312 148.822 181.225 148.757 cv
180.966 148.757 li
180.557 148.757 180.2 148.806 179.893 148.903 cv
179.586 148.999 179.336 149.153 179.142 149.363 cv
178.949 149.573 178.792 149.796 178.674 150.033 cv
178.555 150.27 178.466 150.58 178.408 150.961 cv
178.348 151.343 178.311 151.696 178.294 152.019 cv
178.279 152.341 178.27 152.75 178.27 153.246 cv
178.27 164.581 li
178.27 166.152 178.466 167.272 178.86 167.939 cv
179.252 168.606 179.954 168.94 180.966 168.94 cv
181.311 168.94 181.615 168.9 181.879 168.819 cv
182.143 168.738 182.364 168.636 182.54 168.512 cv
182.718 168.388 182.87 168.21 182.993 167.979 cv
183.117 167.747 183.211 167.533 183.276 167.333 cv
183.34 167.134 183.388 166.857 183.421 166.501 cv
183.453 166.147 183.472 165.845 183.477 165.597 cv
183.483 165.35 183.486 165.011 183.486 164.581 cv
183.486 162.191 li
188.184 162.191 li
188.184 164.386 li
188.184 165.388 188.114 166.287 187.974 167.083 cv
187.834 167.879 187.594 168.627 187.255 169.328 cv
186.916 170.027 186.478 170.609 185.94 171.071 cv
185.401 171.534 184.712 171.897 183.872 172.161 cv
183.034 172.424 182.059 172.556 180.951 172.556 cv
cp
f
198.889 172.556 mo
197.694 172.556 196.658 172.416 195.781 172.137 cv
194.903 171.857 194.182 171.464 193.617 170.958 cv
193.052 170.453 192.6 169.803 192.261 169.012 cv
191.921 168.221 191.685 167.366 191.55 166.445 cv
191.415 165.525 191.348 164.456 191.348 163.241 cv
191.348 145.463 li
196.079 145.463 li
196.079 163.741 li
196.079 164.365 196.095 164.898 196.127 165.339 cv
196.16 165.781 196.23 166.244 196.337 166.728 cv
196.445 167.212 196.598 167.6 196.798 167.89 cv
196.996 168.181 197.271 168.423 197.621 168.617 cv
197.971 168.811 198.394 168.908 198.889 168.908 cv
199.384 168.908 199.806 168.811 200.157 168.617 cv
200.506 168.423 200.775 168.181 200.963 167.89 cv
201.152 167.6 201.302 167.212 201.415 166.728 cv
201.529 166.244 201.598 165.784 201.625 165.347 cv
201.652 164.912 201.665 164.376 201.665 163.741 cv
201.665 145.463 li
206.397 145.463 li
206.397 163.241 li
206.397 164.456 206.329 165.525 206.195 166.445 cv
206.06 167.366 205.824 168.221 205.485 169.012 cv
205.145 169.803 204.696 170.453 204.136 170.958 cv
203.577 171.464 202.858 171.857 201.981 172.137 cv
201.103 172.416 200.073 172.556 198.889 172.556 cv
cp
f
215.068 156.895 mo
216.246 156.895 li
217.688 156.895 218.713 156.588 219.322 155.974 cv
219.93 155.361 220.234 154.311 220.234 152.826 cv
220.234 151.395 219.97 150.37 219.443 149.75 cv
218.915 149.131 217.947 148.822 216.536 148.822 cv
215.068 148.822 li
215.068 156.895 li
cp
210.191 172.234 mo
210.191 145.463 li
216.327 145.463 li
217.737 145.463 218.948 145.58 219.959 145.811 cv
220.971 146.042 221.851 146.429 222.599 146.973 cv
223.347 147.517 223.908 148.254 224.279 149.185 cv
224.65 150.117 224.835 151.254 224.835 152.6 cv
224.835 154.279 224.585 155.652 224.085 156.717 cv
223.584 157.783 222.758 158.558 221.607 159.042 cv
225.32 172.234 li
220.428 172.234 li
217.231 160.011 li
215.068 160.011 li
215.068 172.234 li
210.191 172.234 li
cp
f
228.678 172.234 mo
228.678 145.463 li
233.49 145.463 li
233.49 172.234 li
228.678 172.234 li
cp
f
240.223 172.234 mo
240.223 149.064 li
235.735 149.064 li
235.735 145.463 li
249.443 145.463 li
249.443 149.064 li
245.099 149.064 li
245.099 172.234 li
240.223 172.234 li
cp
f
255.335 172.234 mo
255.335 162.045 li
249.878 145.463 li
254.431 145.463 li
257.742 156.12 li
260.906 145.463 li
265.411 145.463 li
259.986 162.045 li
259.986 172.234 li
255.335 172.234 li
cp
f
.000488281 -.000549316 mo
.000488281 104.767 li
9.55518 112.079 22.3101 114.072 33.77 109.749 cv
91.6781 87.9086 li
101.138 84.3403 108.605 76.8735 112.173 67.4135 cv
134.014 9.50531 li
135.184 6.40277 135.88 3.20453 136.146 -.000549316 cv
.000488281 -.000549316 li
cp
0 .912535 0 0 cmyk
f
84.1459 329.555 mo
82.3754 323.196 77.348 318.264 70.9554 316.618 cv
31.9556 306.572 li
25.563 304.925 18.7788 306.814 14.1567 311.527 cv
.000488281 325.96 li
.000488281 399.999 li
76.8461 399.999 li
90.3373 386.245 li
94.9594 381.533 96.7162 374.712 94.9457 368.353 cv
84.1459 329.555 li
cp
.587366 .778347 0 0 cmyk
f
175.979 274.006 mo
82.9828 274.006 li
75.8158 274.006 70.0062 268.197 70.0062 261.03 cv
70.0062 253.864 75.8158 248.053 82.9828 248.053 cv
175.979 248.053 li
183.145 248.053 188.954 253.864 188.954 261.03 cv
188.954 268.197 183.145 274.006 175.979 274.006 cv
cp
0 .912535 0 0 cmyk
f
101.121 266.808 mo
101.121 257.329 li
99.2855 257.329 li
99.2855 255.855 li
104.894 255.855 li
104.894 257.329 li
103.117 257.329 li
103.117 266.808 li
101.121 266.808 li
cp
0 0 0 0 cmyk
f
107.761 260.533 mo
108.244 260.533 li
108.833 260.533 109.253 260.407 109.501 260.156 cv
109.75 259.905 109.875 259.475 109.875 258.868 cv
109.875 258.282 109.767 257.863 109.551 257.609 cv
109.335 257.356 108.939 257.229 108.363 257.229 cv
107.761 257.229 li
107.761 260.533 li
cp
105.766 266.808 mo
105.766 255.855 li
108.277 255.855 li
108.853 255.855 109.349 255.903 109.763 255.997 cv
110.176 256.092 110.536 256.25 110.843 256.473 cv
111.149 256.696 111.378 256.997 111.53 257.378 cv
111.682 257.759 111.757 258.225 111.757 258.775 cv
111.757 259.462 111.656 260.024 111.451 260.459 cv
111.245 260.896 110.908 261.212 110.437 261.411 cv
111.955 266.808 li
109.954 266.808 li
108.646 261.807 li
107.761 261.807 li
107.761 266.808 li
105.766 266.808 li
cp
f
114.789 266.808 mo
114.789 262.64 li
112.557 255.855 li
114.419 255.855 li
115.774 260.215 li
117.069 255.855 li
118.911 255.855 li
116.692 262.64 li
116.692 266.808 li
114.789 266.808 li
cp
f
123.225 266.808 mo
123.225 255.855 li
125.194 255.855 li
125.194 266.808 li
123.225 266.808 li
cp
f
127.949 266.808 mo
127.949 257.329 li
126.113 257.329 li
126.113 255.855 li
131.721 255.855 li
131.721 257.329 li
129.944 257.329 li
129.944 266.808 li
127.949 266.808 li
cp
f
135.896 266.808 mo
135.896 255.855 li
137.27 255.855 li
139.952 262.058 li
139.952 255.855 li
141.604 255.855 li
141.604 266.808 li
140.295 266.808 li
137.587 260.288 li
137.587 266.808 li
135.896 266.808 li
cp
f
145.722 265.374 mo
145.861 265.432 146.027 265.46 146.221 265.46 cv
146.414 265.46 146.579 265.432 146.716 265.374 cv
146.853 265.318 146.962 265.243 147.043 265.15 cv
147.124 265.057 147.189 264.936 147.235 264.787 cv
147.282 264.637 147.312 264.487 147.328 264.337 cv
147.343 264.188 147.351 264.009 147.351 263.802 cv
147.351 258.828 li
147.351 258.564 147.337 258.343 147.311 258.167 cv
147.285 257.992 147.233 257.825 147.156 257.668 cv
147.078 257.512 146.963 257.396 146.809 257.319 cv
146.655 257.242 146.458 257.203 146.221 257.203 cv
145.983 257.203 145.786 257.242 145.629 257.319 cv
145.473 257.396 145.358 257.512 145.283 257.668 cv
145.208 257.825 145.158 257.992 145.131 258.167 cv
145.105 258.343 145.091 258.564 145.091 258.828 cv
145.091 263.802 li
145.091 264.009 145.099 264.188 145.115 264.337 cv
145.13 264.487 145.161 264.637 145.207 264.787 cv
145.253 264.936 145.316 265.057 145.395 265.15 cv
145.474 265.243 145.583 265.318 145.722 265.374 cv
cp
146.221 266.94 mo
145.093 266.94 144.286 266.634 143.796 266.022 cv
143.308 265.41 143.063 264.513 143.063 263.333 cv
143.063 259.29 li
143.063 258.709 143.119 258.205 143.229 257.778 cv
143.338 257.35 143.516 256.981 143.76 256.667 cv
144.004 256.355 144.331 256.121 144.742 255.964 cv
145.151 255.808 145.644 255.73 146.221 255.73 cv
147.344 255.73 148.151 256.032 148.642 256.635 cv
149.133 257.238 149.378 258.123 149.378 259.29 cv
149.378 263.333 li
149.378 263.906 149.323 264.409 149.21 264.843 cv
149.098 265.277 148.919 265.653 148.675 265.972 cv
148.431 266.291 148.104 266.533 147.694 266.696 cv
147.285 266.859 146.793 266.94 146.221 266.94 cv
cp
f
152.028 266.808 mo
150.462 255.855 li
152.14 255.855 li
153.038 262.917 li
154.207 255.855 li
155.549 255.855 li
156.745 262.923 li
157.643 255.855 li
159.287 255.855 li
157.722 266.808 li
156.13 266.808 li
154.895 259.496 li
153.666 266.808 li
152.028 266.808 li
cp
f
74.344 199.712 mo
70.8148 199.712 li
70.8148 190.41 li
71.6956 190.41 li
71.6956 199.056 li
74.344 199.056 li
74.344 199.712 li
.472602 .264286 .0650339 0 cmyk
f
76.6889 199.819 mo
76.349 199.819 76.0628 199.765 75.8305 199.657 cv
75.599 199.548 75.4163 199.383 75.2835 199.163 cv
75.1508 198.942 75.056 198.683 75.0004 198.385 cv
74.9447 198.088 74.9164 197.73 74.9164 197.311 cv
74.9164 195.471 li
74.9164 194.625 75.0473 193.997 75.3089 193.585 cv
75.5707 193.174 76.0306 192.968 76.6889 192.968 cv
77.3509 192.968 77.812 193.173 78.0726 193.582 cv
78.3324 193.993 78.4622 194.621 78.4622 195.471 cv
78.4622 197.311 li
78.4622 197.73 78.4339 198.088 78.3784 198.385 cv
78.3216 198.683 78.2279 198.942 78.0951 199.163 cv
77.9623 199.383 77.7796 199.548 77.5473 199.657 cv
77.3158 199.765 77.0296 199.819 76.6889 199.819 cv
76.6889 193.597 mo
76.5472 193.597 76.4232 193.616 76.3187 193.653 cv
76.2142 193.691 76.1283 193.751 76.061 193.835 cv
75.9935 193.919 75.9389 194.009 75.8978 194.105 cv
75.8568 194.2 75.8256 194.325 75.8051 194.478 cv
75.7845 194.631 75.7719 194.776 75.7659 194.913 cv
75.7611 195.049 75.7582 195.22 75.7582 195.426 cv
75.7582 197.356 li
75.7582 197.562 75.7611 197.733 75.7659 197.87 cv
75.7719 198.006 75.7845 198.151 75.8051 198.304 cv
75.8256 198.457 75.8568 198.582 75.8978 198.677 cv
75.9389 198.773 75.9935 198.863 76.061 198.947 cv
76.1283 199.031 76.2142 199.091 76.3187 199.129 cv
76.4232 199.166 76.5472 199.185 76.6889 199.185 cv
76.8578 199.185 76.9994 199.155 77.1155 199.092 cv
77.2318 199.031 77.3226 198.954 77.3881 198.86 cv
77.4535 198.766 77.5023 198.633 77.5365 198.461 cv
77.5697 198.289 77.5912 198.124 77.601 197.967 cv
77.6107 197.811 77.6146 197.607 77.6146 197.356 cv
77.6146 195.426 li
77.6146 195.175 77.6107 194.971 77.601 194.815 cv
77.5912 194.658 77.5697 194.493 77.5365 194.321 cv
77.5023 194.149 77.4535 194.016 77.3881 193.922 cv
77.3226 193.829 77.2318 193.751 77.1155 193.69 cv
76.9994 193.627 76.8578 193.597 76.6889 193.597 cv
f
80.5267 199.712 mo
79.6849 199.712 li
79.6849 193.07 li
80.5267 193.07 li
80.5267 193.984 li
80.7288 193.647 80.9652 193.399 81.2366 193.238 cv
81.5073 193.077 81.7815 192.997 82.058 192.997 cv
82.2044 193.002 li
82.2044 193.912 li
82.0844 193.863 81.9496 193.838 81.8001 193.838 cv
81.262 193.838 80.8372 194.096 80.5267 194.613 cv
80.5267 199.712 li
f
84.7122 199.819 mo
84.0766 199.819 83.6185 199.623 83.3372 199.23 cv
83.057 198.837 82.9164 198.165 82.9164 197.216 cv
82.9164 195.538 li
82.9164 194.891 82.9828 194.377 83.1156 193.998 cv
83.2484 193.619 83.4427 193.352 83.6996 193.199 cv
83.9554 193.045 84.2953 192.968 84.7182 192.968 cv
84.9984 192.968 85.2377 193.005 85.4359 193.078 cv
85.6342 193.151 85.7981 193.254 85.9301 193.389 cv
86.061 193.524 86.1644 193.706 86.2406 193.936 cv
86.3178 194.166 86.3715 194.42 86.4008 194.7 cv
86.431 194.978 86.4457 195.314 86.4457 195.707 cv
86.4399 196.307 li
83.7582 196.307 li
83.7582 197.3 li
83.7582 197.989 83.8245 198.474 83.9575 198.759 cv
84.0902 199.043 84.3401 199.185 84.7064 199.185 cv
84.9984 199.185 85.223 199.092 85.3802 198.908 cv
85.5365 198.722 85.6156 198.386 85.6156 197.9 cv
85.6156 197.44 li
86.4399 197.44 li
86.4399 197.811 li
86.4399 198.453 86.3061 198.95 86.0364 199.297 cv
85.7669 199.645 85.3255 199.819 84.7122 199.819 cv
84.7122 193.597 mo
84.3568 193.597 84.1088 193.72 83.9691 193.967 cv
83.8284 194.214 83.7582 194.683 83.7582 195.375 cv
83.7582 195.825 li
85.6156 195.825 li
85.6156 195.275 li
85.6156 195.042 85.6098 194.85 85.599 194.697 cv
85.5873 194.543 85.5638 194.391 85.5287 194.24 cv
85.4925 194.087 85.4438 193.969 85.3802 193.883 cv
85.3158 193.797 85.228 193.728 85.1165 193.675 cv
85.0042 193.623 84.8695 193.597 84.7122 193.597 cv
f
93.7454 199.712 mo
92.9486 199.712 li
92.9486 194.495 li
92.9486 194.132 92.8929 193.879 92.7807 193.737 cv
92.6684 193.595 92.5071 193.524 92.2982 193.524 cv
91.8753 193.532 91.4584 193.761 91.0462 194.214 cv
91.0541 194.327 91.058 194.412 91.058 194.472 cv
91.058 199.712 li
90.2729 199.712 li
90.2729 194.495 li
90.2729 194.132 90.2143 193.879 90.098 193.737 cv
89.9828 193.595 89.8197 193.524 89.6107 193.524 cv
89.1878 193.532 88.7738 193.761 88.3705 194.214 cv
88.3705 199.712 li
87.5795 199.712 li
87.5795 193.07 li
88.3705 193.07 li
88.3705 193.743 li
88.8158 193.215 89.3373 192.952 89.9359 192.952 cv
90.4896 192.952 90.8373 193.244 90.9789 193.827 cv
91.4427 193.244 91.9896 192.952 92.6176 192.952 cv
92.9467 192.952 93.2172 193.071 93.4281 193.308 cv
93.6399 193.545 93.7454 193.933 93.7454 194.472 cv
93.7454 199.712 li
f
98.2621 199.712 mo
97.4203 199.712 li
97.4203 193.07 li
98.2621 193.07 li
98.2621 199.712 li
98.2669 192.155 mo
97.4203 192.155 li
97.4203 191.01 li
98.2669 191.01 li
98.2669 192.155 li
f
100.517 201.901 mo
99.6752 201.901 li
99.6752 193.07 li
100.517 193.07 li
100.517 193.624 li
100.872 193.187 101.297 192.968 101.79 192.968 cv
102.037 192.968 102.253 193.019 102.439 193.12 cv
102.624 193.221 102.77 193.352 102.876 193.513 cv
102.983 193.673 103.069 193.874 103.135 194.113 cv
103.2 194.353 103.243 194.589 103.264 194.823 cv
103.285 195.057 103.294 195.322 103.294 195.617 cv
103.294 197.019 li
103.294 197.371 103.28 197.685 103.249 197.962 cv
103.22 198.239 103.167 198.496 103.092 198.734 cv
103.018 198.971 102.919 199.167 102.798 199.323 cv
102.676 199.478 102.524 199.599 102.341 199.687 cv
102.158 199.775 101.944 199.819 101.702 199.819 cv
101.271 199.819 100.876 199.608 100.517 199.185 cv
100.517 201.901 li
101.549 193.63 mo
101.209 193.63 100.865 193.801 100.517 194.141 cv
100.517 198.669 li
100.824 198.991 101.173 199.152 101.567 199.152 cv
101.716 199.152 101.843 199.121 101.948 199.059 cv
102.053 198.998 102.138 198.913 102.203 198.806 cv
102.269 198.7 102.32 198.555 102.358 198.371 cv
102.395 198.188 102.42 197.993 102.433 197.786 cv
102.447 197.578 102.452 197.327 102.452 197.031 cv
102.452 195.617 li
102.452 194.906 102.393 194.397 102.274 194.09 cv
102.154 193.784 101.912 193.63 101.549 193.63 cv
f
105.988 199.819 mo
105.46 199.819 105.038 199.649 104.723 199.309 cv
104.407 198.968 104.226 198.508 104.181 197.928 cv
104.888 197.715 li
104.933 198.22 105.049 198.591 105.236 198.829 cv
105.423 199.067 105.685 199.185 106.022 199.185 cv
106.313 199.185 106.543 199.099 106.711 198.927 cv
106.872 198.762 106.952 198.541 106.952 198.265 cv
106.952 198.226 li
106.942 197.785 106.672 197.343 106.145 196.902 cv
105.242 196.133 li
104.923 195.868 104.692 195.608 104.546 195.353 cv
104.404 195.106 104.332 194.818 104.332 194.489 cv
104.332 194.002 104.479 193.626 104.77 193.361 cv
105.055 193.099 105.438 192.968 105.92 192.968 cv
106.411 192.968 106.787 193.125 107.051 193.44 cv
107.315 193.754 107.461 194.178 107.492 194.713 cv
106.897 194.91 li
106.87 194.464 106.78 194.134 106.624 193.919 cv
106.469 193.704 106.246 193.597 105.954 193.597 cv
105.693 193.597 105.483 193.669 105.326 193.816 cv
105.172 193.957 105.096 194.149 105.096 194.388 cv
105.096 194.605 105.135 194.791 105.213 194.947 cv
105.292 195.102 105.436 195.269 105.646 195.449 cv
106.582 196.29 li
106.751 196.436 106.888 196.564 106.996 196.674 cv
107.102 196.785 107.214 196.921 107.334 197.084 cv
107.454 197.247 107.543 197.422 107.601 197.612 cv
107.659 197.8 107.69 198.003 107.694 198.22 cv
107.694 198.729 107.54 199.122 107.234 199.401 cv
106.927 199.68 106.511 199.819 105.988 199.819 cv
f
109.613 199.814 mo
109.28 199.814 109.026 199.69 108.85 199.443 cv
108.673 199.197 108.586 198.847 108.586 198.394 cv
108.586 193.07 li
109.433 193.07 li
109.433 198.22 li
109.433 198.557 109.484 198.796 109.584 198.938 cv
109.686 199.081 109.844 199.152 110.062 199.152 cv
110.439 199.152 110.832 198.935 111.24 198.5 cv
111.24 193.07 li
112.081 193.07 li
112.081 199.712 li
111.24 199.712 li
111.24 198.978 li
110.745 199.535 110.204 199.814 109.613 199.814 cv
f
119.533 199.712 mo
118.736 199.712 li
118.736 194.495 li
118.736 194.132 118.68 193.879 118.568 193.737 cv
118.455 193.595 118.294 193.524 118.085 193.524 cv
117.663 193.532 117.245 193.761 116.833 194.214 cv
116.841 194.327 116.845 194.412 116.845 194.472 cv
116.845 199.712 li
116.06 199.712 li
116.06 194.495 li
116.06 194.132 116.001 193.879 115.885 193.737 cv
115.77 193.595 115.607 193.524 115.398 193.524 cv
114.975 193.532 114.561 193.761 114.158 194.214 cv
114.158 199.712 li
113.367 199.712 li
113.367 193.07 li
114.158 193.07 li
114.158 193.743 li
114.603 193.215 115.124 192.952 115.723 192.952 cv
116.277 192.952 116.624 193.244 116.766 193.827 cv
117.23 193.244 117.777 192.952 118.405 192.952 cv
118.734 192.952 119.004 193.071 119.215 193.308 cv
119.427 193.545 119.533 193.933 119.533 194.472 cv
119.533 199.712 li
f
124.593 199.819 mo
124.021 199.819 123.611 199.604 123.362 199.174 cv
123.113 198.744 122.989 198.03 122.989 197.031 cv
122.989 195.802 li
122.989 195.435 123.001 195.114 123.028 194.836 cv
123.054 194.56 123.103 194.3 123.173 194.057 cv
123.245 193.814 123.338 193.616 123.455 193.462 cv
123.57 193.309 123.72 193.188 123.903 193.1 cv
124.086 193.012 124.303 192.968 124.554 192.968 cv
124.992 192.972 125.382 193.164 125.727 193.546 cv
125.727 190.41 li
126.568 190.41 li
126.568 199.712 li
125.727 199.712 li
125.727 199.242 li
125.39 199.623 125.012 199.816 124.593 199.819 cv
124.739 193.63 mo
124.383 193.63 124.143 193.779 124.018 194.077 cv
123.893 194.374 123.831 194.859 123.831 195.533 cv
123.831 197.098 li
123.831 197.824 123.894 198.347 124.021 198.669 cv
124.148 198.991 124.395 199.152 124.761 199.152 cv
125.087 199.152 125.409 199.005 125.727 198.714 cv
125.727 194.102 li
125.39 193.787 125.061 193.63 124.739 193.63 cv
f
129.502 199.819 mo
129.162 199.819 128.876 199.765 128.644 199.657 cv
128.412 199.548 128.23 199.383 128.097 199.163 cv
127.964 198.942 127.869 198.683 127.814 198.385 cv
127.758 198.088 127.73 197.73 127.73 197.311 cv
127.73 195.471 li
127.73 194.625 127.861 193.997 128.122 193.585 cv
128.384 193.174 128.844 192.968 129.502 192.968 cv
130.164 192.968 130.625 193.173 130.886 193.582 cv
131.146 193.993 131.276 194.621 131.276 195.471 cv
131.276 197.311 li
131.276 197.73 131.247 198.088 131.192 198.385 cv
131.135 198.683 131.041 198.942 130.909 199.163 cv
130.776 199.383 130.593 199.548 130.361 199.657 cv
130.129 199.765 129.843 199.819 129.502 199.819 cv
129.502 193.597 mo
129.361 193.597 129.237 193.616 129.132 193.653 cv
129.028 193.691 128.942 193.751 128.874 193.835 cv
128.807 193.919 128.752 194.009 128.711 194.105 cv
128.67 194.2 128.639 194.325 128.619 194.478 cv
128.598 194.631 128.585 194.776 128.58 194.913 cv
128.575 195.049 128.572 195.22 128.572 195.426 cv
128.572 197.356 li
128.572 197.562 128.575 197.733 128.58 197.87 cv
128.585 198.006 128.598 198.151 128.619 198.304 cv
128.639 198.457 128.67 198.582 128.711 198.677 cv
128.752 198.773 128.807 198.863 128.874 198.947 cv
128.942 199.031 129.028 199.091 129.132 199.129 cv
129.237 199.166 129.361 199.185 129.502 199.185 cv
129.671 199.185 129.813 199.155 129.929 199.092 cv
130.045 199.031 130.136 198.954 130.202 198.86 cv
130.267 198.766 130.316 198.633 130.35 198.461 cv
130.383 198.289 130.405 198.124 130.414 197.967 cv
130.424 197.811 130.428 197.607 130.428 197.356 cv
130.428 195.426 li
130.428 195.175 130.424 194.971 130.414 194.815 cv
130.405 194.658 130.383 194.493 130.35 194.321 cv
130.316 194.149 130.267 194.016 130.202 193.922 cv
130.136 193.829 130.045 193.751 129.929 193.69 cv
129.813 193.627 129.671 193.597 129.502 193.597 cv
f
133.396 199.712 mo
132.549 199.712 li
132.549 190.41 li
133.396 190.41 li
133.396 199.712 li
f
136.404 199.819 mo
136.063 199.819 135.777 199.765 135.545 199.657 cv
135.313 199.548 135.131 199.383 134.998 199.163 cv
134.866 198.942 134.771 198.683 134.715 198.385 cv
134.659 198.088 134.63 197.73 134.63 197.311 cv
134.63 195.471 li
134.63 194.625 134.761 193.997 135.024 193.585 cv
135.285 193.174 135.745 192.968 136.404 192.968 cv
137.066 192.968 137.527 193.173 137.786 193.582 cv
138.046 193.993 138.176 194.621 138.176 195.471 cv
138.176 197.311 li
138.176 197.73 138.149 198.088 138.092 198.385 cv
138.036 198.683 137.942 198.942 137.809 199.163 cv
137.676 199.383 137.493 199.548 137.262 199.657 cv
137.03 199.765 136.743 199.819 136.404 199.819 cv
136.404 193.597 mo
136.261 193.597 136.138 193.616 136.034 193.653 cv
135.928 193.691 135.842 193.751 135.775 193.835 cv
135.707 193.919 135.654 194.009 135.613 194.105 cv
135.572 194.2 135.54 194.325 135.52 194.478 cv
135.499 194.631 135.486 194.776 135.481 194.913 cv
135.475 195.049 135.472 195.22 135.472 195.426 cv
135.472 197.356 li
135.472 197.562 135.475 197.733 135.481 197.87 cv
135.486 198.006 135.499 198.151 135.52 198.304 cv
135.54 198.457 135.572 198.582 135.613 198.677 cv
135.654 198.773 135.707 198.863 135.775 198.947 cv
135.842 199.031 135.928 199.091 136.034 199.129 cv
136.138 199.166 136.261 199.185 136.404 199.185 cv
136.572 199.185 136.714 199.155 136.83 199.092 cv
136.946 199.031 137.036 198.954 137.102 198.86 cv
137.167 198.766 137.217 198.633 137.25 198.461 cv
137.284 198.289 137.306 198.124 137.315 197.967 cv
137.325 197.811 137.329 197.607 137.329 197.356 cv
137.329 195.426 li
137.329 195.175 137.325 194.971 137.315 194.815 cv
137.306 194.658 137.284 194.493 137.25 194.321 cv
137.217 194.149 137.167 194.016 137.102 193.922 cv
137.036 193.829 136.946 193.751 136.83 193.69 cv
136.714 193.627 136.572 193.597 136.404 193.597 cv
f
140.241 199.712 mo
139.4 199.712 li
139.4 193.07 li
140.241 193.07 li
140.241 193.984 li
140.443 193.647 140.68 193.399 140.95 193.238 cv
141.222 193.077 141.495 192.997 141.773 192.997 cv
141.918 193.002 li
141.918 193.912 li
141.799 193.863 141.664 193.838 141.515 193.838 cv
140.976 193.838 140.551 194.096 140.241 194.613 cv
140.241 199.712 li
f
146.62 199.819 mo
146.093 199.819 145.671 199.649 145.355 199.309 cv
145.038 198.968 144.859 198.508 144.814 197.928 cv
145.521 197.715 li
145.566 198.22 145.681 198.591 145.869 198.829 cv
146.055 199.067 146.317 199.185 146.654 199.185 cv
146.946 199.185 147.176 199.099 147.344 198.927 cv
147.505 198.762 147.585 198.541 147.585 198.265 cv
147.585 198.226 li
147.574 197.785 147.305 197.343 146.778 196.902 cv
145.874 196.133 li
145.556 195.868 145.325 195.608 145.178 195.353 cv
145.036 195.106 144.965 194.818 144.965 194.489 cv
144.965 194.002 145.111 193.626 145.403 193.361 cv
145.687 193.099 146.071 192.968 146.553 192.968 cv
147.043 192.968 147.419 193.125 147.683 193.44 cv
147.948 193.754 148.094 194.178 148.123 194.713 cv
147.529 194.91 li
147.503 194.464 147.412 194.134 147.257 193.919 cv
147.102 193.704 146.878 193.597 146.586 193.597 cv
146.325 193.597 146.116 193.669 145.958 193.816 cv
145.805 193.957 145.728 194.149 145.728 194.388 cv
145.728 194.605 145.767 194.791 145.846 194.947 cv
145.924 195.102 146.069 195.269 146.278 195.449 cv
147.215 196.29 li
147.383 196.436 147.521 196.564 147.627 196.674 cv
147.734 196.785 147.847 196.921 147.967 197.084 cv
148.086 197.247 148.175 197.422 148.234 197.612 cv
148.291 197.8 148.322 198.003 148.326 198.22 cv
148.326 198.729 148.172 199.122 147.866 199.401 cv
147.559 199.68 147.144 199.819 146.62 199.819 cv
f
150.205 199.712 mo
149.364 199.712 li
149.364 193.07 li
150.205 193.07 li
150.205 199.712 li
150.211 192.155 mo
149.364 192.155 li
149.364 191.01 li
150.211 191.01 li
150.211 192.155 li
f
153.191 199.796 mo
152.738 199.796 152.425 199.672 152.253 199.423 cv
152.081 199.175 151.993 198.811 151.99 198.332 cv
151.99 193.63 li
151.188 193.63 li
151.188 193.07 li
151.99 193.07 li
151.99 191.016 li
152.831 191.016 li
152.831 193.07 li
153.937 193.07 li
153.937 193.63 li
152.831 193.63 li
152.831 198.253 li
152.831 198.59 152.87 198.822 152.95 198.947 cv
153.028 199.072 153.187 199.134 153.426 199.134 cv
153.579 199.134 153.737 199.12 153.898 199.09 cv
153.898 199.724 li
153.647 199.772 153.411 199.796 153.191 199.796 cv
f
158.325 199.819 mo
157.935 199.819 157.616 199.676 157.365 199.39 cv
157.114 199.104 156.989 198.75 156.989 198.327 cv
156.989 198.106 157.007 197.909 157.045 197.735 cv
157.082 197.561 157.153 197.397 157.255 197.244 cv
157.358 197.09 157.47 196.955 157.592 196.837 cv
157.713 196.719 157.886 196.594 158.111 196.461 cv
158.335 196.328 158.56 196.205 158.785 196.093 cv
159.008 195.982 159.302 195.845 159.665 195.684 cv
159.665 195.207 li
159.665 194.597 159.607 194.177 159.492 193.948 cv
159.375 193.717 159.159 193.603 158.84 193.603 cv
158.227 193.603 157.92 193.982 157.92 194.742 cv
157.92 194.983 li
157.09 194.955 li
157.09 194.846 157.091 194.779 157.095 194.752 cv
157.121 194.128 157.285 193.674 157.583 193.392 cv
157.883 193.11 158.317 192.968 158.885 192.968 cv
159.472 192.968 159.889 193.142 160.136 193.491 cv
160.383 193.838 160.506 194.396 160.506 195.162 cv
160.506 198.394 li
160.506 198.929 160.527 199.369 160.569 199.712 cv
159.823 199.712 li
159.699 198.792 li
159.598 199.084 159.427 199.329 159.185 199.525 cv
158.944 199.721 158.657 199.819 158.325 199.819 cv
159.665 196.24 mo
159.559 196.295 li
159.375 196.393 159.235 196.468 159.138 196.52 cv
159.04 196.573 158.923 196.638 158.788 196.716 cv
158.651 196.795 158.548 196.861 158.481 196.913 cv
158.248 197.104 li
158.058 197.314 li
157.937 197.541 li
157.896 197.627 157.868 197.718 157.853 197.813 cv
157.838 197.909 157.83 198.014 157.83 198.13 cv
157.83 198.456 157.904 198.698 158.049 198.857 cv
158.195 199.016 158.378 199.095 158.599 199.095 cv
158.824 199.095 159.03 199.018 159.219 198.863 cv
159.408 198.707 159.557 198.523 159.665 198.31 cv
159.665 196.24 li
f
167.902 199.712 mo
167.105 199.712 li
167.105 194.495 li
167.105 194.132 167.049 193.879 166.937 193.737 cv
166.825 193.595 166.663 193.524 166.454 193.524 cv
166.032 193.532 165.615 193.761 165.202 194.214 cv
165.21 194.327 165.214 194.412 165.214 194.472 cv
165.214 199.712 li
164.429 199.712 li
164.429 194.495 li
164.429 194.132 164.371 193.879 164.254 193.737 cv
164.139 193.595 163.976 193.524 163.767 193.524 cv
163.344 193.532 162.93 193.761 162.527 194.214 cv
162.527 199.712 li
161.736 199.712 li
161.736 193.07 li
162.527 193.07 li
162.527 193.743 li
162.972 193.215 163.494 192.952 164.092 192.952 cv
164.646 192.952 164.994 193.244 165.135 193.827 cv
165.599 193.244 166.146 192.952 166.774 192.952 cv
167.103 192.952 167.373 193.071 167.584 193.308 cv
167.796 193.545 167.902 193.933 167.902 194.472 cv
167.902 199.712 li
f
170.808 199.819 mo
170.172 199.819 169.714 199.623 169.433 199.23 cv
169.153 198.837 169.012 198.165 169.012 197.216 cv
169.012 195.538 li
169.012 194.891 169.078 194.377 169.211 193.998 cv
169.344 193.619 169.538 193.352 169.795 193.199 cv
170.051 193.045 170.391 192.968 170.814 192.968 cv
171.094 192.968 171.333 193.005 171.532 193.078 cv
171.73 193.151 171.894 193.254 172.026 193.389 cv
172.157 193.524 172.26 193.706 172.336 193.936 cv
172.413 194.166 172.467 194.42 172.496 194.7 cv
172.527 194.978 172.541 195.314 172.541 195.707 cv
172.536 196.307 li
169.854 196.307 li
169.854 197.3 li
169.854 197.989 169.92 198.474 170.053 198.759 cv
170.186 199.043 170.436 199.185 170.802 199.185 cv
171.094 199.185 171.319 199.092 171.476 198.908 cv
171.632 198.722 171.711 198.386 171.711 197.9 cv
171.711 197.44 li
172.536 197.44 li
172.536 197.811 li
172.536 198.453 172.402 198.95 172.132 199.297 cv
171.863 199.645 171.421 199.819 170.808 199.819 cv
170.808 193.597 mo
170.452 193.597 170.204 193.72 170.065 193.967 cv
169.924 194.214 169.854 194.683 169.854 195.375 cv
169.854 195.825 li
171.711 195.825 li
171.711 195.275 li
171.711 195.042 171.705 194.85 171.695 194.697 cv
171.683 194.543 171.66 194.391 171.624 194.24 cv
171.588 194.087 171.539 193.969 171.476 193.883 cv
171.412 193.797 171.324 193.728 171.212 193.675 cv
171.1 193.623 170.965 193.597 170.808 193.597 cv
f
175.251 199.796 mo
174.799 199.796 174.487 199.672 174.315 199.423 cv
174.142 199.175 174.054 198.811 174.051 198.332 cv
174.051 193.63 li
173.248 193.63 li
173.248 193.07 li
174.051 193.07 li
174.051 191.016 li
174.892 191.016 li
174.892 193.07 li
175.997 193.07 li
175.997 193.63 li
174.892 193.63 li
174.892 198.253 li
174.892 198.59 174.932 198.822 175.01 198.947 cv
175.089 199.072 175.247 199.134 175.487 199.134 cv
175.64 199.134 175.797 199.12 175.958 199.09 cv
175.958 199.724 li
175.707 199.772 175.472 199.796 175.251 199.796 cv
f
176.991 201.053 mo
176.817 200.683 li
177.015 200.571 177.157 200.44 177.241 200.29 cv
177.325 200.141 177.367 199.949 177.367 199.712 cv
176.862 199.712 li
176.862 198.461 li
177.804 198.461 li
177.804 199.623 li
177.804 199.997 177.743 200.291 177.619 200.506 cv
177.496 200.721 177.287 200.904 176.991 201.053 cv
f
182.966 199.819 mo
182.663 199.819 182.404 199.774 182.187 199.685 cv
181.969 199.595 181.797 199.478 181.67 199.333 cv
181.543 199.19 181.443 199 181.37 198.764 cv
181.297 198.529 181.248 198.29 181.224 198.049 cv
181.2 197.808 181.188 197.523 181.188 197.194 cv
181.188 195.645 li
181.188 195.162 181.214 194.761 181.266 194.441 cv
181.319 194.122 181.412 193.847 181.544 193.62 cv
181.677 193.391 181.858 193.226 182.088 193.123 cv
182.319 193.02 182.609 192.968 182.96 192.968 cv
183.238 192.968 183.477 193.002 183.679 193.07 cv
183.881 193.137 184.044 193.229 184.17 193.347 cv
184.295 193.465 184.394 193.616 184.467 193.799 cv
184.54 193.982 184.59 194.176 184.619 194.379 cv
184.647 194.583 184.66 194.822 184.66 195.095 cv
184.66 195.41 li
183.881 195.41 li
183.881 195.095 li
183.881 194.527 183.814 194.134 183.679 193.919 cv
183.544 193.704 183.309 193.597 182.972 193.597 cv
182.59 193.597 182.338 193.733 182.214 194.003 cv
182.091 194.275 182.03 194.775 182.03 195.504 cv
182.03 197.368 li
182.03 198.048 182.096 198.521 182.229 198.787 cv
182.362 199.052 182.611 199.185 182.978 199.185 cv
183.134 199.185 183.267 199.163 183.376 199.118 cv
183.485 199.073 183.572 199.011 183.637 198.933 cv
183.703 198.854 183.753 198.746 183.791 198.607 cv
183.829 198.469 183.853 198.322 183.864 198.166 cv
183.875 198.011 183.881 197.816 183.881 197.58 cv
183.881 197.216 li
184.66 197.216 li
184.66 197.541 li
184.66 197.833 184.649 198.085 184.624 198.298 cv
184.6 198.512 184.551 198.718 184.479 198.918 cv
184.406 199.119 184.308 199.282 184.187 199.407 cv
184.065 199.532 183.902 199.632 183.696 199.707 cv
183.49 199.782 183.246 199.819 182.966 199.819 cv
f
187.427 199.819 mo
187.086 199.819 186.8 199.765 186.569 199.657 cv
186.336 199.548 186.155 199.383 186.022 199.163 cv
185.889 198.942 185.794 198.683 185.739 198.385 cv
185.682 198.088 185.654 197.73 185.654 197.311 cv
185.654 195.471 li
185.654 194.625 185.785 193.997 186.047 193.585 cv
186.309 193.174 186.769 192.968 187.427 192.968 cv
188.089 192.968 188.55 193.173 188.81 193.582 cv
189.07 193.993 189.2 194.621 189.2 195.471 cv
189.2 197.311 li
189.2 197.73 189.172 198.088 189.116 198.385 cv
189.06 198.683 188.965 198.942 188.832 199.163 cv
188.7 199.383 188.517 199.548 188.286 199.657 cv
188.053 199.765 187.767 199.819 187.427 199.819 cv
187.427 193.597 mo
187.285 193.597 187.161 193.616 187.057 193.653 cv
186.951 193.691 186.866 193.751 186.798 193.835 cv
186.731 193.919 186.677 194.009 186.636 194.105 cv
186.595 194.2 186.564 194.325 186.543 194.478 cv
186.523 194.631 186.509 194.776 186.504 194.913 cv
186.498 195.049 186.496 195.22 186.496 195.426 cv
186.496 197.356 li
186.496 197.562 186.498 197.733 186.504 197.87 cv
186.509 198.006 186.523 198.151 186.543 198.304 cv
186.564 198.457 186.595 198.582 186.636 198.677 cv
186.677 198.773 186.731 198.863 186.798 198.947 cv
186.866 199.031 186.951 199.091 187.057 199.129 cv
187.161 199.166 187.285 199.185 187.427 199.185 cv
187.595 199.185 187.738 199.155 187.854 199.092 cv
187.969 199.031 188.06 198.954 188.125 198.86 cv
188.191 198.766 188.241 198.633 188.274 198.461 cv
188.308 198.289 188.329 198.124 188.338 197.967 cv
188.348 197.811 188.353 197.607 188.353 197.356 cv
188.353 195.426 li
188.353 195.175 188.348 194.971 188.338 194.815 cv
188.329 194.658 188.308 194.493 188.274 194.321 cv
188.241 194.149 188.191 194.016 188.125 193.922 cv
188.06 193.829 187.969 193.751 187.854 193.69 cv
187.738 193.627 187.595 193.597 187.427 193.597 cv
f
193.818 199.712 mo
192.976 199.712 li
192.976 194.562 li
192.976 194.225 192.924 193.986 192.822 193.844 cv
192.718 193.702 192.559 193.63 192.342 193.63 cv
191.979 193.63 191.597 193.834 191.198 194.242 cv
191.198 199.712 li
190.356 199.712 li
190.356 193.07 li
191.198 193.07 li
191.198 193.759 li
191.687 193.232 192.22 192.968 192.796 192.968 cv
193.125 192.968 193.378 193.091 193.554 193.336 cv
193.73 193.582 193.818 193.93 193.818 194.382 cv
193.818 199.712 li
f
196.578 199.819 mo
196.05 199.819 195.628 199.649 195.313 199.309 cv
194.996 198.968 194.816 198.508 194.771 197.928 cv
195.478 197.715 li
195.523 198.22 195.639 198.591 195.826 198.829 cv
196.013 199.067 196.275 199.185 196.612 199.185 cv
196.903 199.185 197.133 199.099 197.301 198.927 cv
197.462 198.762 197.542 198.541 197.542 198.265 cv
197.542 198.226 li
197.532 197.785 197.262 197.343 196.735 196.902 cv
195.831 196.133 li
195.513 195.868 195.282 195.608 195.136 195.353 cv
194.994 195.106 194.922 194.818 194.922 194.489 cv
194.922 194.002 195.069 193.626 195.36 193.361 cv
195.645 193.099 196.028 192.968 196.51 192.968 cv
197 192.968 197.377 193.125 197.641 193.44 cv
197.905 193.754 198.051 194.178 198.081 194.713 cv
197.487 194.91 li
197.46 194.464 197.369 194.134 197.214 193.919 cv
197.059 193.704 196.836 193.597 196.544 193.597 cv
196.283 193.597 196.073 193.669 195.915 193.816 cv
195.762 193.957 195.686 194.149 195.686 194.388 cv
195.686 194.605 195.725 194.791 195.803 194.947 cv
195.882 195.102 196.026 195.269 196.236 195.449 cv
197.172 196.29 li
197.341 196.436 197.478 196.564 197.585 196.674 cv
197.692 196.785 197.804 196.921 197.924 197.084 cv
198.044 197.247 198.133 197.422 198.191 197.612 cv
198.248 197.8 198.28 198.003 198.284 198.22 cv
198.284 198.729 198.13 199.122 197.824 199.401 cv
197.517 199.68 197.101 199.819 196.578 199.819 cv
f
200.898 199.819 mo
200.262 199.819 199.804 199.623 199.524 199.23 cv
199.242 198.837 199.103 198.165 199.103 197.216 cv
199.103 195.538 li
199.103 194.891 199.169 194.377 199.302 193.998 cv
199.435 193.619 199.629 193.352 199.885 193.199 cv
200.142 193.045 200.481 192.968 200.904 192.968 cv
201.184 192.968 201.423 193.005 201.622 193.078 cv
201.82 193.151 201.985 193.254 202.116 193.389 cv
202.246 193.524 202.35 193.706 202.427 193.936 cv
202.503 194.166 202.557 194.42 202.587 194.7 cv
202.617 194.978 202.632 195.314 202.632 195.707 cv
202.626 196.307 li
199.945 196.307 li
199.945 197.3 li
199.945 197.989 200.011 198.474 200.144 198.759 cv
200.277 199.043 200.526 199.185 200.893 199.185 cv
201.184 199.185 201.409 199.092 201.566 198.908 cv
201.723 198.722 201.801 198.386 201.801 197.9 cv
201.801 197.44 li
202.626 197.44 li
202.626 197.811 li
202.626 198.453 202.492 198.95 202.222 199.297 cv
201.952 199.645 201.511 199.819 200.898 199.819 cv
200.898 193.597 mo
200.542 193.597 200.295 193.72 200.155 193.967 cv
200.014 194.214 199.945 194.683 199.945 195.375 cv
199.945 195.825 li
201.801 195.825 li
201.801 195.275 li
201.801 195.042 201.796 194.85 201.785 194.697 cv
201.774 194.543 201.75 194.391 201.714 194.24 cv
201.679 194.087 201.629 193.969 201.566 193.883 cv
201.502 193.797 201.414 193.728 201.302 193.675 cv
201.19 193.623 201.055 193.597 200.898 193.597 cv
f
205.42 199.819 mo
205.117 199.819 204.858 199.774 204.641 199.685 cv
204.423 199.595 204.251 199.478 204.124 199.333 cv
203.997 199.19 203.897 199 203.825 198.764 cv
203.751 198.529 203.703 198.29 203.678 198.049 cv
203.654 197.808 203.642 197.523 203.642 197.194 cv
203.642 195.645 li
203.642 195.162 203.668 194.761 203.72 194.441 cv
203.773 194.122 203.866 193.847 203.998 193.62 cv
204.131 193.391 204.312 193.226 204.542 193.123 cv
204.773 193.02 205.063 192.968 205.414 192.968 cv
205.692 192.968 205.931 193.002 206.133 193.07 cv
206.335 193.137 206.498 193.229 206.624 193.347 cv
206.749 193.465 206.848 193.616 206.921 193.799 cv
206.994 193.982 207.044 194.176 207.073 194.379 cv
207.101 194.583 207.115 194.822 207.115 195.095 cv
207.115 195.41 li
206.335 195.41 li
206.335 195.095 li
206.335 194.527 206.268 194.134 206.133 193.919 cv
205.998 193.704 205.763 193.597 205.426 193.597 cv
205.044 193.597 204.792 193.733 204.668 194.003 cv
204.545 194.275 204.484 194.775 204.484 195.504 cv
204.484 197.368 li
204.484 198.048 204.55 198.521 204.683 198.787 cv
204.816 199.052 205.065 199.185 205.432 199.185 cv
205.588 199.185 205.721 199.163 205.83 199.118 cv
205.939 199.073 206.026 199.011 206.091 198.933 cv
206.157 198.854 206.207 198.746 206.245 198.607 cv
206.283 198.469 206.307 198.322 206.318 198.166 cv
206.33 198.011 206.335 197.816 206.335 197.58 cv
206.335 197.216 li
207.115 197.216 li
207.115 197.541 li
207.115 197.833 207.103 198.085 207.078 198.298 cv
207.054 198.512 207.005 198.718 206.933 198.918 cv
206.86 199.119 206.762 199.282 206.641 199.407 cv
206.519 199.532 206.356 199.632 206.15 199.707 cv
205.944 199.782 205.701 199.819 205.42 199.819 cv
f
209.808 199.796 mo
209.356 199.796 209.043 199.672 208.871 199.423 cv
208.699 199.175 208.611 198.811 208.608 198.332 cv
208.608 193.63 li
207.805 193.63 li
207.805 193.07 li
208.608 193.07 li
208.608 191.016 li
209.449 191.016 li
209.449 193.07 li
210.554 193.07 li
210.554 193.63 li
209.449 193.63 li
209.449 198.253 li
209.449 198.59 209.489 198.822 209.567 198.947 cv
209.646 199.072 209.804 199.134 210.043 199.134 cv
210.197 199.134 210.354 199.12 210.515 199.09 cv
210.515 199.724 li
210.264 199.772 210.029 199.796 209.808 199.796 cv
f
213.118 199.819 mo
212.483 199.819 212.025 199.623 211.743 199.23 cv
211.463 198.837 211.323 198.165 211.323 197.216 cv
211.323 195.538 li
211.323 194.891 211.389 194.377 211.522 193.998 cv
211.655 193.619 211.849 193.352 212.106 193.199 cv
212.362 193.045 212.702 192.968 213.124 192.968 cv
213.405 192.968 213.644 193.005 213.842 193.078 cv
214.04 193.151 214.204 193.254 214.336 193.389 cv
214.467 193.524 214.571 193.706 214.647 193.936 cv
214.724 194.166 214.778 194.42 214.807 194.7 cv
214.837 194.978 214.852 195.314 214.852 195.707 cv
214.846 196.307 li
212.164 196.307 li
212.164 197.3 li
212.164 197.989 212.231 198.474 212.364 198.759 cv
212.496 199.043 212.746 199.185 213.113 199.185 cv
213.405 199.185 213.629 199.092 213.786 198.908 cv
213.943 198.722 214.022 198.386 214.022 197.9 cv
214.022 197.44 li
214.846 197.44 li
214.846 197.811 li
214.846 198.453 214.712 198.95 214.443 199.297 cv
214.173 199.645 213.732 199.819 213.118 199.819 cv
213.118 193.597 mo
212.763 193.597 212.515 193.72 212.375 193.967 cv
212.235 194.214 212.164 194.683 212.164 195.375 cv
212.164 195.825 li
214.022 195.825 li
214.022 195.275 li
214.022 195.042 214.016 194.85 214.005 194.697 cv
213.994 194.543 213.97 194.391 213.935 194.24 cv
213.899 194.087 213.85 193.969 213.786 193.883 cv
213.722 193.797 213.634 193.728 213.523 193.675 cv
213.41 193.623 213.276 193.597 213.118 193.597 cv
f
217.562 199.796 mo
217.11 199.796 216.797 199.672 216.625 199.423 cv
216.452 199.175 216.365 198.811 216.362 198.332 cv
216.362 193.63 li
215.559 193.63 li
215.559 193.07 li
216.362 193.07 li
216.362 191.016 li
217.203 191.016 li
217.203 193.07 li
218.308 193.07 li
218.308 193.63 li
217.203 193.63 li
217.203 198.253 li
217.203 198.59 217.243 198.822 217.321 198.947 cv
217.4 199.072 217.558 199.134 217.797 199.134 cv
217.951 199.134 218.108 199.12 218.269 199.09 cv
218.269 199.724 li
218.018 199.772 217.783 199.796 217.562 199.796 cv
f
220.176 199.814 mo
219.843 199.814 219.589 199.69 219.413 199.443 cv
219.238 199.197 219.15 198.847 219.15 198.394 cv
219.15 193.07 li
219.997 193.07 li
219.997 198.22 li
219.997 198.557 220.047 198.796 220.149 198.938 cv
220.249 199.081 220.409 199.152 220.625 199.152 cv
221.003 199.152 221.396 198.935 221.804 198.5 cv
221.804 193.07 li
222.645 193.07 li
222.645 199.712 li
221.804 199.712 li
221.804 198.978 li
221.31 199.535 220.768 199.814 220.176 199.814 cv
f
224.839 199.712 mo
223.997 199.712 li
223.997 193.07 li
224.839 193.07 li
224.839 193.984 li
225.041 193.647 225.278 193.399 225.549 193.238 cv
225.82 193.077 226.094 192.997 226.37 192.997 cv
226.517 193.002 li
226.517 193.912 li
226.397 193.863 226.262 193.838 226.113 193.838 cv
225.575 193.838 225.15 194.096 224.839 194.613 cv
224.839 199.712 li
f
230.848 199.819 mo
230.459 199.819 230.139 199.676 229.889 199.39 cv
229.638 199.104 229.513 198.75 229.513 198.327 cv
229.513 198.106 229.532 197.909 229.569 197.735 cv
229.606 197.561 229.676 197.397 229.78 197.244 cv
229.882 197.09 229.995 196.955 230.116 196.837 cv
230.238 196.719 230.411 196.594 230.635 196.461 cv
230.86 196.328 231.083 196.205 231.308 196.093 cv
231.533 195.982 231.826 195.845 232.189 195.684 cv
232.189 195.207 li
232.189 194.597 232.131 194.177 232.015 193.948 cv
231.899 193.717 231.682 193.603 231.365 193.603 cv
230.75 193.603 230.444 193.982 230.444 194.742 cv
230.444 194.983 li
229.614 194.955 li
229.614 194.846 229.616 194.779 229.62 194.752 cv
229.646 194.128 229.808 193.674 230.108 193.392 cv
230.407 193.11 230.84 192.968 231.41 192.968 cv
231.996 192.968 232.413 193.142 232.66 193.491 cv
232.908 193.838 233.031 194.396 233.031 195.162 cv
233.031 198.394 li
233.031 198.929 233.051 199.369 233.092 199.712 cv
232.346 199.712 li
232.223 198.792 li
232.121 199.084 231.951 199.329 231.709 199.525 cv
231.468 199.721 231.181 199.819 230.848 199.819 cv
232.189 196.24 mo
232.082 196.295 li
231.899 196.393 231.759 196.468 231.661 196.52 cv
231.564 196.573 231.448 196.638 231.311 196.716 cv
231.174 196.795 231.073 196.861 231.005 196.913 cv
230.772 197.104 li
230.581 197.314 li
230.461 197.541 li
230.419 197.627 230.392 197.718 230.376 197.813 cv
230.362 197.909 230.354 198.014 230.354 198.13 cv
230.354 198.456 230.427 198.698 230.574 198.857 cv
230.719 199.016 230.903 199.095 231.123 199.095 cv
231.347 199.095 231.554 199.018 231.742 198.863 cv
231.932 198.707 232.08 198.523 232.189 198.31 cv
232.189 196.24 li
f
235.741 199.819 mo
235.168 199.819 234.758 199.604 234.509 199.174 cv
234.26 198.744 234.136 198.03 234.136 197.031 cv
234.136 195.802 li
234.136 195.435 234.149 195.114 234.175 194.836 cv
234.202 194.56 234.25 194.3 234.321 194.057 cv
234.392 193.814 234.486 193.616 234.602 193.462 cv
234.717 193.309 234.868 193.188 235.05 193.1 cv
235.234 193.012 235.451 192.968 235.701 192.968 cv
236.139 192.972 236.53 193.164 236.874 193.546 cv
236.874 190.41 li
237.715 190.41 li
237.715 199.712 li
236.874 199.712 li
236.874 199.242 li
236.537 199.623 236.16 199.816 235.741 199.819 cv
235.886 193.63 mo
235.531 193.63 235.29 193.779 235.165 194.077 cv
235.04 194.374 234.978 194.859 234.978 195.533 cv
234.978 197.098 li
234.978 197.824 235.041 198.347 235.168 198.669 cv
235.295 198.991 235.542 199.152 235.909 199.152 cv
236.235 199.152 236.556 199.005 236.874 198.714 cv
236.874 194.102 li
236.537 193.787 236.208 193.63 235.886 193.63 cv
f
239.938 199.712 mo
239.096 199.712 li
239.096 193.07 li
239.938 193.07 li
239.938 199.712 li
239.943 192.155 mo
239.096 192.155 li
239.096 191.01 li
239.943 191.01 li
239.943 192.155 li
f
242.193 201.901 mo
241.351 201.901 li
241.351 193.07 li
242.193 193.07 li
242.193 193.624 li
242.548 193.187 242.973 192.968 243.466 192.968 cv
243.713 192.968 243.929 193.019 244.115 193.12 cv
244.3 193.221 244.446 193.352 244.552 193.513 cv
244.659 193.673 244.745 193.874 244.811 194.113 cv
244.875 194.353 244.919 194.589 244.94 194.823 cv
244.96 195.057 244.97 195.322 244.97 195.617 cv
244.97 197.019 li
244.97 197.371 244.955 197.685 244.925 197.962 cv
244.896 198.239 244.843 198.496 244.768 198.734 cv
244.694 198.971 244.595 199.167 244.474 199.323 cv
244.352 199.478 244.2 199.599 244.017 199.687 cv
243.833 199.775 243.619 199.819 243.377 199.819 cv
242.947 199.819 242.552 199.608 242.193 199.185 cv
242.193 201.901 li
243.225 193.63 mo
242.885 193.63 242.54 193.801 242.193 194.141 cv
242.193 198.669 li
242.499 198.991 242.849 199.152 243.243 199.152 cv
243.392 199.152 243.519 199.121 243.623 199.059 cv
243.729 198.998 243.814 198.913 243.879 198.806 cv
243.945 198.7 243.995 198.555 244.034 198.371 cv
244.071 198.188 244.096 197.993 244.109 197.786 cv
244.122 197.578 244.128 197.327 244.128 197.031 cv
244.128 195.617 li
244.128 194.906 244.069 194.397 243.95 194.09 cv
243.829 193.784 243.588 193.63 243.225 193.63 cv
f
247.08 199.712 mo
246.239 199.712 li
246.239 193.07 li
247.08 193.07 li
247.08 199.712 li
247.085 192.155 mo
246.239 192.155 li
246.239 191.01 li
247.085 191.01 li
247.085 192.155 li
f
250.009 199.819 mo
249.482 199.819 249.06 199.649 248.743 199.309 cv
248.427 198.968 248.247 198.508 248.202 197.928 cv
248.909 197.715 li
248.954 198.22 249.07 198.591 249.257 198.829 cv
249.444 199.067 249.705 199.185 250.042 199.185 cv
250.334 199.185 250.565 199.099 250.733 198.927 cv
250.894 198.762 250.974 198.541 250.974 198.265 cv
250.974 198.226 li
250.962 197.785 250.694 197.343 250.166 196.902 cv
249.263 196.133 li
248.945 195.868 248.713 195.608 248.567 195.353 cv
248.425 195.106 248.354 194.818 248.354 194.489 cv
248.354 194.002 248.499 193.626 248.791 193.361 cv
249.075 193.099 249.459 192.968 249.942 192.968 cv
250.432 192.968 250.808 193.125 251.072 193.44 cv
251.336 193.754 251.483 194.178 251.512 194.713 cv
250.917 194.91 li
250.892 194.464 250.801 194.134 250.646 193.919 cv
250.491 193.704 250.267 193.597 249.975 193.597 cv
249.713 193.597 249.504 193.669 249.347 193.816 cv
249.194 193.957 249.117 194.149 249.117 194.388 cv
249.117 194.605 249.156 194.791 249.235 194.947 cv
249.313 195.102 249.457 195.269 249.666 195.449 cv
250.604 196.29 li
250.772 196.436 250.91 196.564 251.016 196.674 cv
251.122 196.785 251.236 196.921 251.356 197.084 cv
251.475 197.247 251.564 197.422 251.622 197.612 cv
251.68 197.8 251.71 198.003 251.714 198.22 cv
251.714 198.729 251.561 199.122 251.254 199.401 cv
250.948 199.68 250.533 199.819 250.009 199.819 cv
f
254.313 199.819 mo
254.009 199.819 253.749 199.774 253.533 199.685 cv
253.316 199.595 253.144 199.478 253.016 199.333 cv
252.889 199.19 252.789 199 252.716 198.764 cv
252.643 198.529 252.595 198.29 252.571 198.049 cv
252.546 197.808 252.534 197.523 252.534 197.194 cv
252.534 195.645 li
252.534 195.162 252.56 194.761 252.613 194.441 cv
252.664 194.122 252.757 193.847 252.89 193.62 cv
253.023 193.391 253.204 193.226 253.434 193.123 cv
253.664 193.02 253.955 192.968 254.307 192.968 cv
254.583 192.968 254.823 193.002 255.025 193.07 cv
255.227 193.137 255.391 193.229 255.516 193.347 cv
255.641 193.465 255.741 193.616 255.814 193.799 cv
255.886 193.982 255.937 194.176 255.965 194.379 cv
255.993 194.583 256.007 194.822 256.007 195.095 cv
256.007 195.41 li
255.227 195.41 li
255.227 195.095 li
255.227 194.527 255.16 194.134 255.025 193.919 cv
254.89 193.704 254.655 193.597 254.318 193.597 cv
253.937 193.597 253.684 193.733 253.561 194.003 cv
253.437 194.275 253.375 194.775 253.375 195.504 cv
253.375 197.368 li
253.375 198.048 253.442 198.521 253.575 198.787 cv
253.707 199.052 253.957 199.185 254.324 199.185 cv
254.481 199.185 254.614 199.163 254.722 199.118 cv
254.83 199.073 254.917 199.011 254.983 198.933 cv
255.048 198.854 255.1 198.746 255.137 198.607 cv
255.174 198.469 255.199 198.322 255.21 198.166 cv
255.221 198.011 255.227 197.816 255.227 197.58 cv
255.227 197.216 li
256.007 197.216 li
256.007 197.541 li
256.007 197.833 255.994 198.085 255.97 198.298 cv
255.946 198.512 255.898 198.718 255.825 198.918 cv
255.751 199.119 255.655 199.282 255.533 199.407 cv
255.412 199.532 255.247 199.632 255.042 199.707 cv
254.836 199.782 254.593 199.819 254.313 199.819 cv
f
258.061 199.712 mo
257.219 199.712 li
257.219 193.07 li
258.061 193.07 li
258.061 199.712 li
258.066 192.155 mo
257.219 192.155 li
257.219 191.01 li
258.066 191.01 li
258.066 192.155 li
f
262.931 199.712 mo
262.089 199.712 li
262.089 194.562 li
262.089 194.225 262.038 193.986 261.935 193.844 cv
261.831 193.702 261.672 193.63 261.455 193.63 cv
261.092 193.63 260.71 193.834 260.311 194.242 cv
260.311 199.712 li
259.469 199.712 li
259.469 193.07 li
260.311 193.07 li
260.311 193.759 li
260.8 193.232 261.333 192.968 261.91 192.968 cv
262.239 192.968 262.492 193.091 262.667 193.336 cv
262.843 193.582 262.931 193.93 262.931 194.382 cv
262.931 199.712 li
f
265.993 201.895 mo
265.642 201.895 265.332 201.876 265.066 201.839 cv
264.798 201.801 264.561 201.74 264.356 201.654 cv
264.15 201.568 263.993 201.451 263.884 201.303 cv
263.776 201.156 263.722 200.979 263.722 200.773 cv
263.722 200.452 263.828 200.157 264.041 199.889 cv
264.254 199.622 264.515 199.408 264.822 199.247 cv
264.619 199.191 264.446 199.11 264.299 199.002 cv
264.154 198.896 264.08 198.782 264.08 198.658 cv
264.08 198.306 264.344 197.859 264.871 197.317 cv
264.318 196.913 264.041 196.236 264.041 195.286 cv
264.041 194.964 264.078 194.665 264.154 194.391 cv
264.229 194.116 264.339 193.87 264.488 193.656 cv
264.635 193.441 264.828 193.273 265.068 193.151 cv
265.308 193.03 265.582 192.968 265.893 192.968 cv
266.563 192.968 267.039 193.244 267.324 193.793 cv
267.395 193.669 267.514 193.537 267.683 193.392 cv
267.851 193.248 268.031 193.135 268.221 193.052 cv
268.396 192.98 li
268.62 193.569 li
268.437 193.614 268.232 193.694 268.005 193.81 cv
267.779 193.926 267.62 194.039 267.526 194.147 cv
267.581 194.282 267.631 194.468 267.674 194.708 cv
267.717 194.948 267.739 195.147 267.739 195.308 cv
267.739 196.023 267.592 196.588 267.298 197.005 cv
267.005 197.422 266.54 197.631 265.905 197.631 cv
265.803 197.631 265.68 197.619 265.534 197.594 cv
265.388 197.57 265.287 197.547 265.231 197.525 cv
265.22 197.543 265.178 197.607 265.105 197.715 cv
265.032 197.824 264.978 197.907 264.942 197.965 cv
264.832 198.178 li
264.777 198.388 li
264.777 198.497 264.961 198.581 265.332 198.641 cv
265.411 198.663 265.597 198.696 265.893 198.739 cv
266.189 198.783 266.357 198.809 266.398 198.821 cv
266.944 198.917 267.358 199.088 267.638 199.331 cv
267.918 199.575 268.059 199.915 268.059 200.352 cv
268.059 200.879 267.873 201.269 267.503 201.519 cv
267.133 201.77 266.63 201.895 265.993 201.895 cv
265.287 199.359 mo
264.726 199.707 264.446 200.086 264.446 200.498 cv
264.446 200.752 264.565 200.937 264.804 201.051 cv
265.044 201.164 265.437 201.222 265.983 201.222 cv
266.416 201.222 266.76 201.152 267.012 201.011 cv
267.265 200.871 267.391 200.659 267.391 200.374 cv
267.391 200.131 267.305 199.943 267.133 199.808 cv
266.961 199.673 266.63 199.561 266.14 199.471 cv
265.287 199.359 li
265.91 193.569 mo
265.734 193.569 265.578 193.605 265.442 193.678 cv
265.305 193.751 265.197 193.844 265.116 193.956 cv
265.036 194.068 264.97 194.202 264.919 194.36 cv
264.87 194.517 264.835 194.669 264.819 194.817 cv
264.802 194.965 264.793 195.122 264.793 195.286 cv
264.793 196.446 265.163 197.025 265.905 197.025 cv
266.091 197.025 266.254 196.99 266.392 196.918 cv
266.531 196.847 266.637 196.757 266.712 196.649 cv
266.787 196.541 266.847 196.405 266.892 196.243 cv
266.937 196.079 266.965 195.926 266.979 195.783 cv
266.992 195.638 266.998 195.473 266.998 195.286 cv
266.998 194.141 266.635 193.569 265.91 193.569 cv
f
72.3188 213.608 mo
71.683 213.608 71.225 213.412 70.9438 213.019 cv
70.6634 212.626 70.5228 211.954 70.5228 211.005 cv
70.5228 209.328 li
70.5228 208.68 70.5892 208.166 70.722 207.788 cv
70.8548 207.408 71.0493 207.141 71.306 206.988 cv
71.5618 206.834 71.9017 206.757 72.3246 206.757 cv
72.6048 206.757 72.8441 206.794 73.0423 206.867 cv
73.2406 206.94 73.4047 207.043 73.5365 207.178 cv
73.6674 207.313 73.7708 207.496 73.847 207.725 cv
73.9242 207.955 73.9779 208.209 74.0072 208.489 cv
74.0374 208.767 74.0521 209.103 74.0521 209.496 cv
74.0463 210.096 li
71.3646 210.096 li
71.3646 211.089 li
71.3646 211.778 71.4311 212.263 71.5639 212.548 cv
71.6966 212.832 71.9467 212.974 72.3128 212.974 cv
72.6048 212.974 72.8294 212.881 72.9867 212.697 cv
73.1429 212.511 73.222 212.175 73.222 211.689 cv
73.222 211.229 li
74.0463 211.229 li
74.0463 211.6 li
74.0463 212.243 73.9125 212.739 73.643 213.086 cv
73.3733 213.434 72.932 213.608 72.3188 213.608 cv
72.3188 207.386 mo
71.9632 207.386 71.7152 207.509 71.5756 207.756 cv
71.435 208.003 71.3646 208.472 71.3646 209.164 cv
71.3646 209.614 li
73.222 209.614 li
73.222 209.064 li
73.222 208.832 73.2162 208.639 73.2054 208.486 cv
73.1937 208.332 73.1703 208.18 73.1351 208.029 cv
73.0989 207.876 73.0502 207.758 72.9867 207.672 cv
72.9222 207.586 72.8344 207.517 72.7231 207.464 cv
72.6107 207.413 72.4759 207.386 72.3188 207.386 cv
f
76.1508 213.501 mo
75.3031 213.501 li
75.3031 204.199 li
76.1508 204.199 li
76.1508 213.501 li
f
78.4457 213.501 mo
77.6039 213.501 li
77.6039 206.859 li
78.4457 206.859 li
78.4457 213.501 li
78.4506 205.944 mo
77.6039 205.944 li
77.6039 204.799 li
78.4506 204.799 li
78.4506 205.944 li
f
81.4301 213.585 mo
80.9779 213.585 80.6654 213.461 80.4935 213.212 cv
80.3206 212.964 80.2328 212.6 80.2298 212.122 cv
80.2298 207.419 li
79.4271 207.419 li
79.4271 206.859 li
80.2298 206.859 li
80.2298 204.805 li
81.0706 204.805 li
81.0706 206.859 li
82.1761 206.859 li
82.1761 207.419 li
81.0706 207.419 li
81.0706 212.042 li
81.0706 212.379 81.1107 212.611 81.1889 212.736 cv
81.268 212.861 81.4261 212.923 81.6654 212.923 cv
81.8187 212.923 81.976 212.909 82.1371 212.879 cv
82.1371 213.513 li
81.8862 213.561 81.6508 213.585 81.4301 213.585 cv
f
83.1693 214.842 mo
82.9955 214.472 li
83.1937 214.36 83.3353 214.229 83.4194 214.079 cv
83.5032 213.93 83.5453 213.737 83.5453 213.501 cv
83.0405 213.501 li
83.0405 212.25 li
83.9828 212.25 li
83.9828 213.412 li
83.9828 213.786 83.9213 214.08 83.7983 214.295 cv
83.6742 214.51 83.4652 214.693 83.1693 214.842 cv
f
89.0101 213.608 mo
88.4828 213.608 88.0608 213.438 87.7455 213.098 cv
87.4291 212.757 87.2485 212.297 87.2035 211.717 cv
87.9105 211.504 li
87.9555 212.009 88.0716 212.38 88.2582 212.618 cv
88.4457 212.856 88.7073 212.974 89.0443 212.974 cv
89.3353 212.974 89.5657 212.888 89.7338 212.716 cv
89.8949 212.551 89.975 212.33 89.975 212.054 cv
89.975 212.015 li
89.9642 211.574 89.6947 211.132 89.1674 210.691 cv
88.264 209.922 li
87.9456 209.657 87.7143 209.397 87.5687 209.142 cv
87.4261 208.895 87.3548 208.607 87.3548 208.278 cv
87.3548 207.791 87.5014 207.415 87.7924 207.15 cv
88.0775 206.888 88.4604 206.757 88.9427 206.757 cv
89.4329 206.757 89.81 206.914 90.0736 207.229 cv
90.3373 207.543 90.4837 207.967 90.5141 208.502 cv
89.9192 208.699 li
89.893 208.253 89.8021 207.923 89.6469 207.708 cv
89.4916 207.494 89.269 207.386 88.977 207.386 cv
88.7152 207.386 88.5052 207.458 88.348 207.605 cv
88.1946 207.746 88.1185 207.938 88.1185 208.177 cv
88.1185 208.394 88.1576 208.58 88.2357 208.736 cv
88.3148 208.891 88.4583 209.058 88.6683 209.238 cv
89.6049 210.08 li
89.7738 210.225 89.9105 210.353 90.0179 210.463 cv
90.1244 210.574 90.2368 210.71 90.3568 210.873 cv
90.4769 211.036 90.5657 211.211 90.6234 211.401 cv
90.681 211.589 90.7123 211.792 90.7162 212.009 cv
90.7162 212.518 90.5628 212.912 90.2562 213.19 cv
89.9496 213.469 89.5335 213.608 89.0101 213.608 cv
f
93.3304 213.608 mo
92.6946 213.608 92.2366 213.412 91.9564 213.019 cv
91.6752 212.626 91.5356 211.954 91.5356 211.005 cv
91.5356 209.328 li
91.5356 208.68 91.6019 208.166 91.7347 207.788 cv
91.8676 207.408 92.0619 207.141 92.3178 206.988 cv
92.5746 206.834 92.9135 206.757 93.3364 206.757 cv
93.6166 206.757 93.8559 206.794 94.055 206.867 cv
94.2523 206.94 94.4173 207.043 94.5482 207.178 cv
94.6791 207.313 94.7826 207.496 94.8597 207.725 cv
94.9359 207.955 94.9895 208.209 95.0199 208.489 cv
95.0492 208.767 95.0649 209.103 95.0649 209.496 cv
95.0589 210.096 li
92.3773 210.096 li
92.3773 211.089 li
92.3773 211.778 92.4437 212.263 92.5765 212.548 cv
92.7093 212.832 92.9583 212.974 93.3256 212.974 cv
93.6166 212.974 93.8412 212.881 93.9984 212.697 cv
94.1557 212.511 94.2338 212.175 94.2338 211.689 cv
94.2338 211.229 li
95.0589 211.229 li
95.0589 211.6 li
95.0589 212.243 94.9242 212.739 94.6546 213.086 cv
94.3851 213.434 93.9437 213.608 93.3304 213.608 cv
93.3304 207.386 mo
92.975 207.386 92.7279 207.509 92.5872 207.756 cv
92.4466 208.003 92.3773 208.472 92.3773 209.164 cv
92.3773 209.614 li
94.2338 209.614 li
94.2338 209.064 li
94.2338 208.832 94.2288 208.639 94.2172 208.486 cv
94.2065 208.332 94.183 208.18 94.1468 208.029 cv
94.1117 207.876 94.062 207.758 93.9984 207.672 cv
93.935 207.586 93.847 207.517 93.7347 207.464 cv
93.6224 207.413 93.4877 207.386 93.3304 207.386 cv
f
97.679 213.608 mo
97.1068 213.608 96.6966 213.393 96.4476 212.963 cv
96.1985 212.533 96.0746 211.819 96.0746 210.82 cv
96.0746 209.591 li
96.0746 209.224 96.0872 208.903 96.1136 208.625 cv
96.1401 208.349 96.1888 208.089 96.2592 207.846 cv
96.3305 207.603 96.4242 207.405 96.5404 207.251 cv
96.6557 207.098 96.806 206.977 96.9887 206.889 cv
97.1723 206.801 97.3891 206.757 97.64 206.757 cv
98.0775 206.761 98.4682 206.954 98.8129 207.335 cv
98.8129 204.199 li
99.6537 204.199 li
99.6537 213.501 li
98.8129 213.501 li
98.8129 213.031 li
98.4759 213.412 98.098 213.605 97.679 213.608 cv
97.8246 207.419 mo
97.4691 207.419 97.2289 207.568 97.1039 207.866 cv
96.9788 208.164 96.9164 208.648 96.9164 209.322 cv
96.9164 210.887 li
96.9164 211.613 96.9799 212.136 97.1068 212.458 cv
97.2338 212.78 97.4808 212.941 97.8471 212.941 cv
98.1732 212.941 98.4945 212.794 98.8129 212.503 cv
98.8129 207.891 li
98.4759 207.577 98.1469 207.419 97.8246 207.419 cv
f
104.766 213.608 mo
104.193 213.608 103.783 213.393 103.534 212.963 cv
103.286 212.533 103.16 211.819 103.16 210.82 cv
103.16 209.591 li
103.16 209.224 103.174 208.903 103.201 208.625 cv
103.226 208.349 103.275 208.089 103.346 207.846 cv
103.417 207.603 103.51 207.405 103.626 207.251 cv
103.743 207.098 103.892 206.977 104.076 206.889 cv
104.258 206.801 104.476 206.757 104.726 206.757 cv
105.163 206.761 105.555 206.954 105.899 207.335 cv
105.899 204.199 li
106.741 204.199 li
106.741 213.501 li
105.899 213.501 li
105.899 213.031 li
105.562 213.412 105.184 213.605 104.766 213.608 cv
104.911 207.419 mo
104.556 207.419 104.316 207.568 104.191 207.866 cv
104.065 208.164 104.002 208.648 104.002 209.322 cv
104.002 210.887 li
104.002 211.613 104.066 212.136 104.193 212.458 cv
104.321 212.78 104.567 212.941 104.934 212.941 cv
105.259 212.941 105.58 212.794 105.899 212.503 cv
105.899 207.891 li
105.562 207.577 105.233 207.419 104.911 207.419 cv
f
109.675 213.608 mo
109.334 213.608 109.048 213.554 108.817 213.446 cv
108.584 213.337 108.403 213.172 108.27 212.952 cv
108.137 212.731 108.042 212.472 107.987 212.174 cv
107.93 211.877 107.902 211.519 107.902 211.1 cv
107.902 209.26 li
107.902 208.414 108.033 207.787 108.295 207.374 cv
108.557 206.963 109.017 206.757 109.675 206.757 cv
110.337 206.757 110.798 206.962 111.058 207.371 cv
111.318 207.782 111.448 208.411 111.448 209.26 cv
111.448 211.1 li
111.448 211.519 111.42 211.877 111.364 212.174 cv
111.308 212.472 111.213 212.731 111.08 212.952 cv
110.948 213.172 110.765 213.337 110.534 213.446 cv
110.301 213.554 110.015 213.608 109.675 213.608 cv
109.675 207.386 mo
109.533 207.386 109.41 207.405 109.305 207.442 cv
109.2 207.48 109.114 207.54 109.046 207.624 cv
108.979 207.708 108.925 207.798 108.884 207.894 cv
108.843 207.989 108.812 208.114 108.791 208.267 cv
108.771 208.42 108.757 208.565 108.752 208.702 cv
108.746 208.838 108.743 209.009 108.743 209.215 cv
108.743 211.145 li
108.743 211.351 108.746 211.522 108.752 211.659 cv
108.757 211.795 108.771 211.94 108.791 212.093 cv
108.812 212.246 108.843 212.372 108.884 212.466 cv
108.925 212.562 108.979 212.652 109.046 212.736 cv
109.114 212.82 109.2 212.88 109.305 212.918 cv
109.41 212.956 109.533 212.974 109.675 212.974 cv
109.843 212.974 109.986 212.944 110.102 212.881 cv
110.217 212.82 110.308 212.743 110.373 212.649 cv
110.439 212.555 110.489 212.422 110.522 212.25 cv
110.556 212.079 110.578 211.914 110.586 211.756 cv
110.596 211.6 110.601 211.396 110.601 211.145 cv
110.601 209.215 li
110.601 208.964 110.596 208.76 110.586 208.604 cv
110.578 208.447 110.556 208.282 110.522 208.11 cv
110.489 207.938 110.439 207.805 110.373 207.711 cv
110.308 207.618 110.217 207.54 110.102 207.479 cv
109.986 207.416 109.843 207.386 109.675 207.386 cv
f
116.62 213.608 mo
115.985 213.608 115.527 213.412 115.246 213.019 cv
114.965 212.626 114.826 211.954 114.826 211.005 cv
114.826 209.328 li
114.826 208.68 114.892 208.166 115.025 207.788 cv
115.158 207.408 115.352 207.141 115.608 206.988 cv
115.865 206.834 116.203 206.757 116.626 206.757 cv
116.907 206.757 117.146 206.794 117.345 206.867 cv
117.542 206.94 117.707 207.043 117.838 207.178 cv
117.969 207.313 118.073 207.496 118.15 207.725 cv
118.226 207.955 118.28 208.209 118.31 208.489 cv
118.339 208.767 118.355 209.103 118.355 209.496 cv
118.349 210.096 li
115.667 210.096 li
115.667 211.089 li
115.667 211.778 115.734 212.263 115.867 212.548 cv
115.999 212.832 116.248 212.974 116.616 212.974 cv
116.907 212.974 117.131 212.881 117.288 212.697 cv
117.446 212.511 117.524 212.175 117.524 211.689 cv
117.524 211.229 li
118.349 211.229 li
118.349 211.6 li
118.349 212.243 118.214 212.739 117.945 213.086 cv
117.675 213.434 117.234 213.608 116.62 213.608 cv
116.62 207.386 mo
116.265 207.386 116.018 207.509 115.877 207.756 cv
115.737 208.003 115.667 208.472 115.667 209.164 cv
115.667 209.614 li
117.524 209.614 li
117.524 209.064 li
117.524 208.832 117.519 208.639 117.507 208.486 cv
117.496 208.332 117.473 208.18 117.437 208.029 cv
117.402 207.876 117.352 207.758 117.288 207.672 cv
117.225 207.586 117.137 207.517 117.025 207.464 cv
116.913 207.413 116.778 207.386 116.62 207.386 cv
f
120.425 213.501 mo
119.583 213.501 li
119.583 206.859 li
120.425 206.859 li
120.425 213.501 li
120.43 205.944 mo
119.583 205.944 li
119.583 204.799 li
120.43 204.799 li
120.43 205.944 li
f
122.809 213.603 mo
122.476 213.603 122.222 213.479 122.046 213.232 cv
121.871 212.986 121.783 212.636 121.783 212.183 cv
121.783 206.859 li
122.63 206.859 li
122.63 212.009 li
122.63 212.346 122.68 212.585 122.782 212.727 cv
122.882 212.87 123.041 212.941 123.258 212.941 cv
123.636 212.941 124.029 212.724 124.437 212.289 cv
124.437 206.859 li
125.278 206.859 li
125.278 213.501 li
124.437 213.501 li
124.437 212.767 li
123.943 213.324 123.401 213.603 122.809 213.603 cv
f
128.083 213.608 mo
127.556 213.608 127.134 213.438 126.819 213.098 cv
126.502 212.757 126.322 212.297 126.277 211.717 cv
126.984 211.504 li
127.029 212.009 127.145 212.38 127.331 212.618 cv
127.519 212.856 127.781 212.974 128.118 212.974 cv
128.409 212.974 128.639 212.888 128.807 212.716 cv
128.968 212.551 129.048 212.33 129.048 212.054 cv
129.048 212.015 li
129.038 211.574 128.768 211.132 128.241 210.691 cv
127.337 209.922 li
127.019 209.657 126.787 209.397 126.642 209.142 cv
126.499 208.895 126.428 208.607 126.428 208.278 cv
126.428 207.791 126.575 207.415 126.866 207.15 cv
127.151 206.888 127.534 206.757 128.016 206.757 cv
128.506 206.757 128.883 206.914 129.147 207.229 cv
129.41 207.543 129.557 207.967 129.587 208.502 cv
128.993 208.699 li
128.966 208.253 128.875 207.923 128.72 207.708 cv
128.565 207.494 128.342 207.386 128.05 207.386 cv
127.788 207.386 127.578 207.458 127.421 207.605 cv
127.268 207.746 127.192 207.938 127.192 208.177 cv
127.192 208.394 127.231 208.58 127.309 208.736 cv
127.388 208.891 127.532 209.058 127.742 209.238 cv
128.678 210.08 li
128.847 210.225 128.984 210.353 129.091 210.463 cv
129.198 210.574 129.31 210.71 129.43 210.873 cv
129.55 211.036 129.639 211.211 129.697 211.401 cv
129.754 211.589 129.785 211.792 129.789 212.009 cv
129.789 212.518 129.636 212.912 129.329 213.19 cv
129.023 213.469 128.607 213.608 128.083 213.608 cv
f
136.898 213.501 mo
136.102 213.501 li
136.102 208.284 li
136.102 207.921 136.045 207.668 135.933 207.526 cv
135.821 207.384 135.66 207.313 135.451 207.313 cv
135.028 207.321 134.611 207.55 134.2 208.003 cv
134.207 208.116 134.21 208.202 134.21 208.261 cv
134.21 213.501 li
133.425 213.501 li
133.425 208.284 li
133.425 207.921 133.368 207.668 133.251 207.526 cv
133.135 207.384 132.973 207.313 132.763 207.313 cv
132.34 207.321 131.927 207.55 131.523 208.003 cv
131.523 213.501 li
130.732 213.501 li
130.732 206.859 li
131.523 206.859 li
131.523 207.532 li
131.968 207.004 132.49 206.741 133.088 206.741 cv
133.642 206.741 133.99 207.033 134.132 207.616 cv
134.596 207.033 135.142 206.741 135.771 206.741 cv
136.1 206.741 136.37 206.86 136.581 207.097 cv
136.792 207.334 136.898 207.722 136.898 208.261 cv
136.898 213.501 li
f
139.782 213.608 mo
139.442 213.608 139.156 213.554 138.923 213.446 cv
138.692 213.337 138.509 213.172 138.376 212.952 cv
138.244 212.731 138.149 212.472 138.093 212.174 cv
138.038 211.877 138.009 211.519 138.009 211.1 cv
138.009 209.26 li
138.009 208.414 138.14 207.787 138.402 207.374 cv
138.663 206.963 139.123 206.757 139.782 206.757 cv
140.444 206.757 140.905 206.962 141.165 207.371 cv
141.425 207.782 141.555 208.411 141.555 209.26 cv
141.555 211.1 li
141.555 211.519 141.527 211.877 141.471 212.174 cv
141.414 212.472 141.321 212.731 141.188 212.952 cv
141.055 213.172 140.872 213.337 140.64 213.446 cv
140.409 213.554 140.122 213.608 139.782 213.608 cv
139.782 207.386 mo
139.64 207.386 139.516 207.405 139.411 207.442 cv
139.307 207.48 139.221 207.54 139.154 207.624 cv
139.086 207.708 139.032 207.798 138.991 207.894 cv
138.95 207.989 138.918 208.114 138.898 208.267 cv
138.877 208.42 138.865 208.565 138.859 208.702 cv
138.854 208.838 138.851 209.009 138.851 209.215 cv
138.851 211.145 li
138.851 211.351 138.854 211.522 138.859 211.659 cv
138.865 211.795 138.877 211.94 138.898 212.093 cv
138.918 212.246 138.95 212.372 138.991 212.466 cv
139.032 212.562 139.086 212.652 139.154 212.736 cv
139.221 212.82 139.307 212.88 139.411 212.918 cv
139.516 212.956 139.64 212.974 139.782 212.974 cv
139.951 212.974 140.092 212.944 140.208 212.881 cv
140.325 212.82 140.415 212.743 140.481 212.649 cv
140.546 212.555 140.595 212.422 140.629 212.25 cv
140.662 212.079 140.684 211.914 140.694 211.756 cv
140.703 211.6 140.707 211.396 140.707 211.145 cv
140.707 209.215 li
140.707 208.964 140.703 208.76 140.694 208.604 cv
140.684 208.447 140.662 208.282 140.629 208.11 cv
140.595 207.938 140.546 207.805 140.481 207.711 cv
140.415 207.618 140.325 207.54 140.208 207.479 cv
140.092 207.416 139.951 207.386 139.782 207.386 cv
f
144.192 213.608 mo
143.62 213.608 143.209 213.393 142.96 212.963 cv
142.711 212.533 142.587 211.819 142.587 210.82 cv
142.587 209.591 li
142.587 209.224 142.6 208.903 142.626 208.625 cv
142.653 208.349 142.701 208.089 142.772 207.846 cv
142.843 207.603 142.937 207.405 143.053 207.251 cv
143.168 207.098 143.319 206.977 143.501 206.889 cv
143.685 206.801 143.902 206.757 144.153 206.757 cv
144.59 206.761 144.981 206.954 145.326 207.335 cv
145.326 204.199 li
146.166 204.199 li
146.166 213.501 li
145.326 213.501 li
145.326 213.031 li
144.989 213.412 144.611 213.605 144.192 213.608 cv
144.337 207.419 mo
143.982 207.419 143.742 207.568 143.617 207.866 cv
143.492 208.164 143.429 208.648 143.429 209.322 cv
143.429 210.887 li
143.429 211.613 143.493 212.136 143.62 212.458 cv
143.746 212.78 143.993 212.941 144.36 212.941 cv
144.686 212.941 145.007 212.794 145.326 212.503 cv
145.326 207.891 li
144.989 207.577 144.66 207.419 144.337 207.419 cv
f
151.373 213.585 mo
150.921 213.585 150.609 213.461 150.437 213.212 cv
150.264 212.964 150.176 212.6 150.173 212.122 cv
150.173 207.419 li
149.37 207.419 li
149.37 206.859 li
150.173 206.859 li
150.173 204.805 li
151.014 204.805 li
151.014 206.859 li
152.119 206.859 li
152.119 207.419 li
151.014 207.419 li
151.014 212.042 li
151.014 212.379 151.054 212.611 151.132 212.736 cv
151.211 212.861 151.369 212.923 151.609 212.923 cv
151.762 212.923 151.919 212.909 152.08 212.879 cv
152.08 213.513 li
151.829 213.561 151.594 213.585 151.373 213.585 cv
f
154.684 213.608 mo
154.048 213.608 153.59 213.412 153.309 213.019 cv
153.029 212.626 152.888 211.954 152.888 211.005 cv
152.888 209.328 li
152.888 208.68 152.954 208.166 153.087 207.788 cv
153.22 207.408 153.414 207.141 153.671 206.988 cv
153.927 206.834 154.267 206.757 154.69 206.757 cv
154.97 206.757 155.209 206.794 155.408 206.867 cv
155.606 206.94 155.77 207.043 155.902 207.178 cv
156.033 207.313 156.136 207.496 156.212 207.725 cv
156.289 207.955 156.343 208.209 156.372 208.489 cv
156.403 208.767 156.417 209.103 156.417 209.496 cv
156.411 210.096 li
153.73 210.096 li
153.73 211.089 li
153.73 211.778 153.796 212.263 153.929 212.548 cv
154.062 212.832 154.312 212.974 154.678 212.974 cv
154.97 212.974 155.195 212.881 155.352 212.697 cv
155.508 212.511 155.587 212.175 155.587 211.689 cv
155.587 211.229 li
156.411 211.229 li
156.411 211.6 li
156.411 212.243 156.278 212.739 156.008 213.086 cv
155.739 213.434 155.297 213.608 154.684 213.608 cv
154.684 207.386 mo
154.328 207.386 154.08 207.509 153.941 207.756 cv
153.8 208.003 153.73 208.472 153.73 209.164 cv
153.73 209.614 li
155.587 209.614 li
155.587 209.064 li
155.587 208.832 155.581 208.639 155.571 208.486 cv
155.559 208.332 155.536 208.18 155.5 208.029 cv
155.464 207.876 155.415 207.758 155.352 207.672 cv
155.288 207.586 155.2 207.517 155.088 207.464 cv
154.976 207.413 154.841 207.386 154.684 207.386 cv
f
163.717 213.501 mo
162.92 213.501 li
162.92 208.284 li
162.92 207.921 162.865 207.668 162.752 207.526 cv
162.64 207.384 162.479 207.313 162.27 207.313 cv
161.847 207.321 161.43 207.55 161.018 208.003 cv
161.026 208.116 161.03 208.202 161.03 208.261 cv
161.03 213.501 li
160.245 213.501 li
160.245 208.284 li
160.245 207.921 160.186 207.668 160.07 207.526 cv
159.954 207.384 159.791 207.313 159.582 207.313 cv
159.16 207.321 158.745 207.55 158.342 208.003 cv
158.342 213.501 li
157.551 213.501 li
157.551 206.859 li
158.342 206.859 li
158.342 207.532 li
158.788 207.004 159.309 206.741 159.908 206.741 cv
160.461 206.741 160.809 207.033 160.951 207.616 cv
161.414 207.033 161.961 206.741 162.589 206.741 cv
162.918 206.741 163.189 206.86 163.4 207.097 cv
163.612 207.334 163.717 207.722 163.717 208.261 cv
163.717 213.501 li
f
165.798 215.69 mo
164.956 215.69 li
164.956 206.859 li
165.798 206.859 li
165.798 207.414 li
166.154 206.976 166.579 206.757 167.072 206.757 cv
167.319 206.757 167.535 206.808 167.72 206.909 cv
167.906 207.01 168.051 207.141 168.158 207.302 cv
168.264 207.462 168.35 207.663 168.416 207.902 cv
168.481 208.142 168.525 208.378 168.545 208.612 cv
168.566 208.846 168.576 209.111 168.576 209.406 cv
168.576 210.808 li
168.576 211.161 168.561 211.474 168.531 211.751 cv
168.501 212.028 168.449 212.285 168.373 212.523 cv
168.299 212.76 168.201 212.957 168.079 213.112 cv
167.957 213.267 167.805 213.388 167.622 213.476 cv
167.439 213.564 167.225 213.608 166.983 213.608 cv
166.552 213.608 166.158 213.397 165.798 212.974 cv
165.798 215.69 li
166.83 207.419 mo
166.491 207.419 166.146 207.59 165.798 207.93 cv
165.798 212.458 li
166.105 212.78 166.454 212.941 166.848 212.941 cv
166.997 212.941 167.124 212.91 167.229 212.848 cv
167.334 212.787 167.419 212.703 167.485 212.595 cv
167.55 212.489 167.601 212.344 167.639 212.161 cv
167.676 211.977 167.702 211.782 167.714 211.575 cv
167.728 211.367 167.734 211.116 167.734 210.82 cv
167.734 209.406 li
167.734 208.695 167.674 208.186 167.555 207.879 cv
167.435 207.573 167.194 207.419 166.83 207.419 cv
f
171.398 213.608 mo
171.058 213.608 170.772 213.554 170.539 213.446 cv
170.308 213.337 170.125 213.172 169.993 212.952 cv
169.86 212.731 169.765 212.472 169.709 212.174 cv
169.654 211.877 169.625 211.519 169.625 211.1 cv
169.625 209.26 li
169.625 208.414 169.756 207.787 170.018 207.374 cv
170.28 206.963 170.74 206.757 171.398 206.757 cv
172.06 206.757 172.521 206.962 172.782 207.371 cv
173.041 207.782 173.171 208.411 173.171 209.26 cv
173.171 211.1 li
173.171 211.519 173.143 211.877 173.087 212.174 cv
173.031 212.472 172.937 212.731 172.804 212.952 cv
172.671 213.172 172.489 213.337 172.256 213.446 cv
172.025 213.554 171.739 213.608 171.398 213.608 cv
171.398 207.386 mo
171.256 207.386 171.132 207.405 171.028 207.442 cv
170.923 207.48 170.837 207.54 170.77 207.624 cv
170.702 207.708 170.648 207.798 170.607 207.894 cv
170.566 207.989 170.535 208.114 170.514 208.267 cv
170.494 208.42 170.481 208.565 170.475 208.702 cv
170.47 208.838 170.467 209.009 170.467 209.215 cv
170.467 211.145 li
170.467 211.351 170.47 211.522 170.475 211.659 cv
170.481 211.795 170.494 211.94 170.514 212.093 cv
170.535 212.246 170.566 212.372 170.607 212.466 cv
170.648 212.562 170.702 212.652 170.77 212.736 cv
170.837 212.82 170.923 212.88 171.028 212.918 cv
171.132 212.956 171.256 212.974 171.398 212.974 cv
171.567 212.974 171.708 212.944 171.825 212.881 cv
171.941 212.82 172.032 212.743 172.097 212.649 cv
172.162 212.555 172.211 212.422 172.245 212.25 cv
172.279 212.079 172.3 211.914 172.31 211.756 cv
172.32 211.6 172.324 211.396 172.324 211.145 cv
172.324 209.215 li
172.324 208.964 172.32 208.76 172.31 208.604 cv
172.3 208.447 172.279 208.282 172.245 208.11 cv
172.211 207.938 172.162 207.805 172.097 207.711 cv
172.032 207.618 171.941 207.54 171.825 207.479 cv
171.708 207.416 171.567 207.386 171.398 207.386 cv
f
175.236 213.501 mo
174.394 213.501 li
174.394 206.859 li
175.236 206.859 li
175.236 207.773 li
175.438 207.436 175.674 207.188 175.946 207.027 cv
176.216 206.866 176.491 206.786 176.767 206.786 cv
176.913 206.791 li
176.913 207.701 li
176.793 207.652 176.659 207.627 176.509 207.627 cv
175.971 207.627 175.546 207.885 175.236 208.402 cv
175.236 213.501 li
f
181.032 213.501 mo
180.19 213.501 li
180.19 206.859 li
181.032 206.859 li
181.032 213.501 li
181.036 205.944 mo
180.19 205.944 li
180.19 204.799 li
181.036 204.799 li
181.036 205.944 li
f
185.902 213.501 mo
185.06 213.501 li
185.06 208.351 li
185.06 208.014 185.008 207.775 184.906 207.633 cv
184.802 207.491 184.643 207.419 184.426 207.419 cv
184.063 207.419 183.681 207.623 183.282 208.031 cv
183.282 213.501 li
182.44 213.501 li
182.44 206.859 li
183.282 206.859 li
183.282 207.548 li
183.771 207.021 184.304 206.757 184.88 206.757 cv
185.209 206.757 185.462 206.88 185.638 207.125 cv
185.814 207.371 185.902 207.719 185.902 208.171 cv
185.902 213.501 li
f
188.796 213.608 mo
188.494 213.608 188.234 213.563 188.017 213.474 cv
187.799 213.384 187.627 213.267 187.5 213.123 cv
187.373 212.979 187.273 212.789 187.201 212.553 cv
187.127 212.318 187.078 212.08 187.054 211.838 cv
187.03 211.597 187.018 211.312 187.018 210.983 cv
187.018 209.434 li
187.018 208.952 187.044 208.55 187.096 208.23 cv
187.149 207.911 187.242 207.636 187.374 207.409 cv
187.507 207.18 187.688 207.015 187.918 206.912 cv
188.149 206.809 188.439 206.757 188.79 206.757 cv
189.068 206.757 189.307 206.791 189.509 206.859 cv
189.711 206.926 189.874 207.018 190 207.136 cv
190.125 207.254 190.224 207.405 190.297 207.588 cv
190.37 207.771 190.42 207.965 190.449 208.168 cv
190.477 208.372 190.491 208.611 190.491 208.884 cv
190.491 209.199 li
189.711 209.199 li
189.711 208.884 li
189.711 208.316 189.644 207.923 189.509 207.708 cv
189.374 207.494 189.139 207.386 188.802 207.386 cv
188.42 207.386 188.168 207.522 188.044 207.792 cv
187.921 208.064 187.86 208.564 187.86 209.293 cv
187.86 211.157 li
187.86 211.837 187.926 212.31 188.059 212.576 cv
188.192 212.841 188.441 212.974 188.808 212.974 cv
188.964 212.974 189.097 212.952 189.206 212.907 cv
189.315 212.862 189.402 212.8 189.467 212.722 cv
189.533 212.643 189.583 212.535 189.621 212.396 cv
189.659 212.258 189.683 212.111 189.694 211.955 cv
189.705 211.8 189.711 211.605 189.711 211.37 cv
189.711 211.005 li
190.491 211.005 li
190.491 211.33 li
190.491 211.622 190.479 211.874 190.455 212.087 cv
190.43 212.301 190.381 212.507 190.309 212.708 cv
190.236 212.908 190.138 213.071 190.017 213.196 cv
189.895 213.321 189.732 213.421 189.526 213.497 cv
189.32 213.571 189.076 213.608 188.796 213.608 cv
f
192.544 213.501 mo
191.703 213.501 li
191.703 206.859 li
192.544 206.859 li
192.544 213.501 li
192.55 205.944 mo
191.703 205.944 li
191.703 204.799 li
192.55 204.799 li
192.55 205.944 li
f
195.434 213.608 mo
194.862 213.608 194.452 213.393 194.202 212.963 cv
193.953 212.533 193.829 211.819 193.829 210.82 cv
193.829 209.591 li
193.829 209.224 193.842 208.903 193.869 208.625 cv
193.895 208.349 193.944 208.089 194.014 207.846 cv
194.085 207.603 194.179 207.405 194.295 207.251 cv
194.41 207.098 194.561 206.977 194.743 206.889 cv
194.927 206.801 195.144 206.757 195.395 206.757 cv
195.832 206.761 196.223 206.954 196.568 207.335 cv
196.568 204.199 li
197.409 204.199 li
197.409 213.501 li
196.568 213.501 li
196.568 213.031 li
196.231 213.412 195.853 213.605 195.434 213.608 cv
195.579 207.419 mo
195.224 207.419 194.984 207.568 194.859 207.866 cv
194.734 208.164 194.671 208.648 194.671 209.322 cv
194.671 210.887 li
194.671 211.613 194.735 212.136 194.862 212.458 cv
194.989 212.78 195.236 212.941 195.602 212.941 cv
195.928 212.941 196.249 212.794 196.568 212.503 cv
196.568 207.891 li
196.231 207.577 195.902 207.419 195.579 207.419 cv
f
199.631 213.501 mo
198.789 213.501 li
198.789 206.859 li
199.631 206.859 li
199.631 213.501 li
199.636 205.944 mo
198.789 205.944 li
198.789 204.799 li
199.636 204.799 li
199.636 205.944 li
f
202.521 213.608 mo
201.948 213.608 201.537 213.393 201.288 212.963 cv
201.04 212.533 200.915 211.819 200.915 210.82 cv
200.915 209.591 li
200.915 209.224 200.929 208.903 200.955 208.625 cv
200.981 208.349 201.03 208.089 201.101 207.846 cv
201.172 207.603 201.265 207.405 201.381 207.251 cv
201.497 207.098 201.647 206.977 201.83 206.889 cv
202.013 206.801 202.231 206.757 202.481 206.757 cv
202.918 206.761 203.31 206.954 203.654 207.335 cv
203.654 204.199 li
204.495 204.199 li
204.495 213.501 li
203.654 213.501 li
203.654 213.031 li
203.317 213.412 202.939 213.605 202.521 213.608 cv
202.666 207.419 mo
202.311 207.419 202.071 207.568 201.946 207.866 cv
201.82 208.164 201.757 208.648 201.757 209.322 cv
201.757 210.887 li
201.757 211.613 201.821 212.136 201.948 212.458 cv
202.076 212.78 202.322 212.941 202.689 212.941 cv
203.014 212.941 203.335 212.794 203.654 212.503 cv
203.654 207.891 li
203.317 207.577 202.988 207.419 202.666 207.419 cv
f
206.756 213.603 mo
206.423 213.603 206.169 213.479 205.994 213.232 cv
205.818 212.986 205.73 212.636 205.73 212.183 cv
205.73 206.859 li
206.578 206.859 li
206.578 212.009 li
206.578 212.346 206.627 212.585 206.729 212.727 cv
206.829 212.87 206.989 212.941 207.205 212.941 cv
207.583 212.941 207.976 212.724 208.384 212.289 cv
208.384 206.859 li
209.225 206.859 li
209.225 213.501 li
208.384 213.501 li
208.384 212.767 li
207.89 213.324 207.348 213.603 206.756 213.603 cv
f
213.972 213.501 mo
213.13 213.501 li
213.13 208.351 li
213.13 208.014 213.079 207.775 212.976 207.633 cv
212.873 207.491 212.713 207.419 212.496 207.419 cv
212.134 207.419 211.752 207.623 211.352 208.031 cv
211.352 213.501 li
210.51 213.501 li
210.51 206.859 li
211.352 206.859 li
211.352 207.548 li
211.842 207.021 212.375 206.757 212.951 206.757 cv
213.28 206.757 213.533 206.88 213.708 207.125 cv
213.884 207.371 213.972 207.719 213.972 208.171 cv
213.972 213.501 li
f
216.788 213.585 mo
216.336 213.585 216.024 213.461 215.852 213.212 cv
215.679 212.964 215.591 212.6 215.588 212.122 cv
215.588 207.419 li
214.785 207.419 li
214.785 206.859 li
215.588 206.859 li
215.588 204.805 li
216.429 204.805 li
216.429 206.859 li
217.535 206.859 li
217.535 207.419 li
216.429 207.419 li
216.429 212.042 li
216.429 212.379 216.469 212.611 216.547 212.736 cv
216.626 212.861 216.784 212.923 217.024 212.923 cv
217.177 212.923 217.334 212.909 217.495 212.879 cv
217.495 213.513 li
217.245 213.561 217.009 213.585 216.788 213.585 cv
f
71.6225 227.391 mo
71.2894 227.391 71.0355 227.268 70.8597 227.021 cv
70.684 226.774 70.5961 226.424 70.5961 225.972 cv
70.5961 220.647 li
71.4437 220.647 li
71.4437 225.798 li
71.4437 226.134 71.4935 226.374 71.5951 226.516 cv
71.6956 226.659 71.8548 226.729 72.0716 226.729 cv
72.4495 226.729 72.8422 226.512 73.2504 226.078 cv
73.2504 220.647 li
74.0912 220.647 li
74.0912 227.291 li
73.2504 227.291 li
73.2504 226.555 li
72.7561 227.113 72.2143 227.391 71.6225 227.391 cv
f
76.9534 227.374 mo
76.5004 227.374 76.1879 227.25 76.016 227.001 cv
75.8441 226.752 75.7562 226.389 75.7523 225.911 cv
75.7523 221.208 li
74.9505 221.208 li
74.9505 220.647 li
75.7523 220.647 li
75.7523 218.594 li
76.5941 218.594 li
76.5941 220.647 li
77.6996 220.647 li
77.6996 221.208 li
76.5941 221.208 li
76.5941 225.831 li
76.5941 226.168 76.6332 226.399 76.7122 226.525 cv
76.7905 226.65 76.9495 226.712 77.1888 226.712 cv
77.3422 226.712 77.4994 226.698 77.6605 226.667 cv
77.6605 227.301 li
77.4095 227.35 77.1742 227.374 76.9534 227.374 cv
f
81.9017 227.291 mo
81.0541 227.291 li
81.0541 217.988 li
81.9017 217.988 li
81.9017 227.291 li
f
84.4095 227.397 mo
84.0209 227.397 83.7006 227.254 83.4506 226.968 cv
83.1996 226.682 83.0746 226.327 83.0746 225.905 cv
83.0746 225.684 83.0931 225.487 83.1303 225.313 cv
83.1673 225.139 83.2377 224.975 83.3411 224.822 cv
83.4437 224.668 83.5561 224.533 83.6771 224.415 cv
83.7991 224.297 83.9721 224.172 84.1966 224.039 cv
84.4213 223.907 84.6449 223.784 84.8695 223.671 cv
85.0942 223.559 85.388 223.423 85.7504 223.262 cv
85.7504 222.785 li
85.7504 222.175 85.6928 221.755 85.5765 221.526 cv
85.4603 221.295 85.2435 221.18 84.9261 221.18 cv
84.3118 221.18 84.0052 221.56 84.0052 222.32 cv
84.0052 222.561 li
83.1751 222.533 li
83.1751 222.424 83.1772 222.357 83.1811 222.33 cv
83.2073 221.705 83.3694 221.252 83.6693 220.97 cv
83.9682 220.688 84.4017 220.546 84.9711 220.546 cv
85.558 220.546 85.9749 220.72 86.222 221.068 cv
86.4692 221.416 86.5921 221.973 86.5921 222.74 cv
86.5921 225.972 li
86.5921 226.507 86.6127 226.947 86.6536 227.291 cv
85.9076 227.291 li
85.7845 226.371 li
85.6829 226.663 85.5121 226.906 85.2709 227.103 cv
85.0296 227.299 84.7426 227.397 84.4095 227.397 cv
85.7504 223.818 mo
85.6439 223.873 li
85.4603 223.971 85.3207 224.045 85.223 224.098 cv
85.1254 224.151 85.0091 224.216 84.8724 224.294 cv
84.7357 224.372 84.6341 224.438 84.5668 224.491 cv
84.3333 224.681 li
84.1429 224.892 li
84.0228 225.12 li
83.9808 225.205 83.9535 225.296 83.9379 225.391 cv
83.9232 225.487 83.9154 225.592 83.9154 225.708 cv
83.9154 226.034 83.9887 226.276 84.1351 226.435 cv
84.2806 226.594 84.4642 226.673 84.6849 226.673 cv
84.9086 226.673 85.1157 226.596 85.304 226.441 cv
85.4935 226.286 85.642 226.101 85.7504 225.888 cv
85.7504 223.818 li
f
89.8578 227.397 mo
89.4203 227.397 89.0257 227.186 88.6743 226.763 cv
88.6743 227.291 li
87.8324 227.291 li
87.8324 217.988 li
88.6743 217.988 li
88.6743 221.197 li
89.0257 220.763 89.4476 220.546 89.9417 220.546 cv
90.1889 220.546 90.4047 220.597 90.5903 220.698 cv
90.7747 220.799 90.9213 220.93 91.0277 221.09 cv
91.1342 221.251 91.2201 221.452 91.2855 221.691 cv
91.351 221.93 91.3939 222.167 91.4144 222.401 cv
91.435 222.634 91.4457 222.899 91.4457 223.195 cv
91.4457 224.597 li
91.4457 224.949 91.4301 225.263 91.4008 225.54 cv
91.3704 225.817 91.3177 226.074 91.2436 226.311 cv
91.1683 226.549 91.0716 226.746 90.9515 226.901 cv
90.8323 227.056 90.6801 227.177 90.4974 227.265 cv
90.3138 227.353 90.1009 227.397 89.8578 227.397 cv
89.7063 221.208 mo
89.3656 221.208 89.0218 221.378 88.6743 221.719 cv
88.6743 226.247 li
88.9809 226.569 89.3285 226.729 89.7172 226.729 cv
90.0726 226.729 90.309 226.564 90.4272 226.233 cv
90.5453 225.902 90.6039 225.361 90.6039 224.609 cv
90.6039 223.195 li
90.6039 222.484 90.5453 221.975 90.4272 221.668 cv
90.309 221.362 90.0687 221.208 89.7063 221.208 cv
f
94.2503 227.397 mo
93.9106 227.397 93.6244 227.343 93.3919 227.235 cv
93.1605 227.125 92.9779 226.961 92.8451 226.741 cv
92.7123 226.52 92.6176 226.261 92.5619 225.963 cv
92.5063 225.666 92.4778 225.308 92.4778 224.889 cv
92.4778 223.048 li
92.4778 222.204 92.6087 221.575 92.8705 221.163 cv
93.1322 220.752 93.5922 220.546 94.2503 220.546 cv
94.9125 220.546 95.3734 220.751 95.6342 221.161 cv
95.8939 221.571 96.0238 222.2 96.0238 223.048 cv
96.0238 224.889 li
96.0238 225.308 95.9955 225.666 95.9398 225.963 cv
95.8832 226.261 95.7894 226.52 95.6567 226.741 cv
95.5237 226.961 95.3412 227.125 95.1087 227.235 cv
94.8774 227.343 94.5912 227.397 94.2503 227.397 cv
94.2503 221.175 mo
94.1088 221.175 93.9847 221.194 93.8803 221.231 cv
93.7758 221.268 93.6899 221.329 93.6224 221.413 cv
93.555 221.498 93.5003 221.587 93.4594 221.682 cv
93.4184 221.778 93.3871 221.903 93.3665 222.056 cv
93.3461 222.209 93.3333 222.354 93.3275 222.491 cv
93.3226 222.627 93.3197 222.798 93.3197 223.004 cv
93.3197 224.934 li
93.3197 225.14 93.3226 225.311 93.3275 225.448 cv
93.3333 225.584 93.3461 225.729 93.3665 225.882 cv
93.3871 226.036 93.4184 226.16 93.4594 226.255 cv
93.5003 226.351 93.555 226.441 93.6224 226.525 cv
93.6899 226.609 93.7758 226.669 93.8803 226.706 cv
93.9847 226.745 94.1088 226.763 94.2503 226.763 cv
94.4194 226.763 94.5609 226.732 94.6771 226.67 cv
94.7934 226.609 94.8842 226.531 94.9496 226.438 cv
95.0149 226.344 95.0639 226.211 95.098 226.039 cv
95.1312 225.868 95.1527 225.703 95.1625 225.545 cv
95.1723 225.388 95.1762 225.185 95.1762 224.934 cv
95.1762 223.004 li
95.1762 222.753 95.1723 222.549 95.1625 222.392 cv
95.1527 222.235 95.1312 222.071 95.098 221.899 cv
95.0639 221.727 95.0149 221.594 94.9496 221.5 cv
94.8842 221.407 94.7934 221.329 94.6771 221.267 cv
94.5609 221.206 94.4194 221.175 94.2503 221.175 cv
f
98.0883 227.291 mo
97.2464 227.291 li
97.2464 220.647 li
98.0883 220.647 li
98.0883 221.562 li
98.2904 221.225 98.5267 220.977 98.7982 220.816 cv
99.0687 220.655 99.3431 220.575 99.6196 220.575 cv
99.766 220.581 li
99.766 221.489 li
99.6458 221.441 99.5112 221.416 99.3617 221.416 cv
98.8236 221.416 98.3988 221.674 98.0883 222.19 cv
98.0883 227.291 li
f
102.274 227.397 mo
101.638 227.397 101.18 227.201 100.899 226.808 cv
100.619 226.415 100.478 225.744 100.478 224.793 cv
100.478 223.116 li
100.478 222.469 100.544 221.956 100.677 221.576 cv
100.81 221.197 101.004 220.93 101.261 220.777 cv
101.517 220.623 101.857 220.546 102.28 220.546 cv
102.56 220.546 102.799 220.582 102.997 220.656 cv
103.196 220.729 103.36 220.832 103.492 220.967 cv
103.622 221.102 103.726 221.285 103.802 221.514 cv
103.879 221.744 103.933 221.998 103.962 222.277 cv
103.993 222.556 104.007 222.892 104.007 223.285 cv
104.001 223.885 li
101.32 223.885 li
101.32 224.877 li
101.32 225.566 101.386 226.052 101.519 226.336 cv
101.652 226.62 101.902 226.763 102.268 226.763 cv
102.56 226.763 102.784 226.67 102.942 226.486 cv
103.098 226.3 103.177 225.964 103.177 225.478 cv
103.177 225.018 li
104.001 225.018 li
104.001 225.388 li
104.001 226.032 103.868 226.528 103.598 226.875 cv
103.329 227.223 102.887 227.397 102.274 227.397 cv
102.274 221.175 mo
101.918 221.175 101.67 221.298 101.531 221.545 cv
101.39 221.792 101.32 222.261 101.32 222.953 cv
101.32 223.402 li
103.177 223.402 li
103.177 222.852 li
103.177 222.621 103.171 222.428 103.16 222.275 cv
103.149 222.122 103.125 221.968 103.09 221.817 cv
103.054 221.665 103.005 221.547 102.942 221.461 cv
102.877 221.374 102.789 221.306 102.678 221.253 cv
102.566 221.201 102.431 221.175 102.274 221.175 cv
f
374.125 270.743 mo
360.148 262.773 li
360.148 262.773 li
360.148 262.773 li
374.125 270.743 li
374.125 270.743 li
358.013 259.672 mo
358.013 259.605 358.015 259.537 358.02 259.469 cv
358.015 259.537 358.013 259.605 358.013 259.672 cv
.477638 .319829 .131411 0 cmyk
f
385.991 277.509 mo
374.125 270.743 li
374.125 270.743 li
385.991 277.509 li
385.991 277.509 385.991 277.509 385.991 277.509 cv
.650538 .406073 .133913 .00140383 cmyk
f
385.991 277.509 mo
374.125 270.743 li
360.148 262.773 li
360.148 262.773 li
358.712 261.944 358.014 260.835 358.013 259.672 cv
358.013 259.605 358.015 259.537 358.02 259.469 cv
358.02 259.464 358.02 259.459 358.021 259.455 cv
358.021 91.2308 li
369.755 97.4008 381.519 104.594 393.211 112.793 cv
404.43 120.661 li
373.222 102.642 li
372.75 102.369 372.3 102.24 371.893 102.24 cv
370.704 102.24 369.873 103.337 369.873 105.173 cv
369.873 116.923 li
369.873 119.389 371.372 122.253 373.222 123.321 cv
425.901 153.735 li
425.901 175.512 li
373.222 145.098 li
372.749 144.825 372.3 144.696 371.892 144.696 cv
370.704 144.696 369.873 145.793 369.873 147.628 cv
369.873 159.379 li
369.873 161.845 371.372 164.708 373.222 165.776 cv
425.901 196.19 li
425.901 217.968 li
373.222 187.553 li
372.75 187.281 372.3 187.151 371.893 187.151 cv
370.704 187.151 369.873 188.248 369.873 190.084 cv
369.873 201.835 li
369.873 204.3 371.372 207.165 373.222 208.232 cv
424.385 237.771 li
423.23 243.213 421.207 249.59 417.664 255.668 cv
373.222 230.009 li
372.75 229.737 372.3 229.607 371.893 229.607 cv
370.704 229.607 369.873 230.704 369.873 232.54 cv
369.873 244.29 li
369.873 246.756 371.372 249.621 373.222 250.688 cv
405.518 269.334 li
400.399 273.088 393.996 276.019 385.991 277.509 cv
.570672 .350164 .106935 0 cmyk
f
425.901 153.735 mo
373.222 123.321 li
371.372 122.253 369.873 119.389 369.873 116.923 cv
369.873 105.173 li
369.873 103.337 370.704 102.24 371.893 102.24 cv
372.3 102.24 372.75 102.369 373.222 102.642 cv
404.43 120.661 li
425.901 135.716 li
425.901 153.735 li
419.128 137.151 mo
418.868 137.151 418.687 137.39 418.687 137.791 cv
418.687 141.01 li
418.687 141.548 419.014 142.172 419.417 142.405 cv
422.431 144.145 li
422.534 144.204 422.632 144.232 422.721 144.232 cv
422.98 144.232 423.161 143.993 423.161 143.593 cv
423.161 140.373 li
423.161 139.836 422.834 139.212 422.431 138.979 cv
419.417 137.239 li
419.314 137.179 419.216 137.151 419.128 137.151 cv
.842374 .602045 .0982681 .0030518 cmyk
f
422.721 144.232 mo
422.632 144.232 422.534 144.204 422.431 144.145 cv
419.417 142.405 li
419.014 142.172 418.687 141.548 418.687 141.01 cv
418.687 137.791 li
418.687 137.39 418.868 137.151 419.128 137.151 cv
419.216 137.151 419.314 137.179 419.417 137.239 cv
422.431 138.979 li
422.834 139.212 423.161 139.836 423.161 140.373 cv
423.161 143.593 li
423.161 143.993 422.98 144.232 422.721 144.232 cv
1 .866484 .240818 .0951247 cmyk
f
425.901 196.19 mo
373.222 165.776 li
371.372 164.708 369.873 161.845 369.873 159.379 cv
369.873 147.628 li
369.873 145.793 370.704 144.696 371.892 144.696 cv
372.3 144.696 372.749 144.825 373.222 145.098 cv
425.901 175.512 li
425.901 196.19 li
419.128 179.607 mo
418.868 179.607 418.687 179.847 418.687 180.247 cv
418.687 183.466 li
418.687 184.003 419.014 184.627 419.417 184.861 cv
422.431 186.601 li
422.534 186.66 422.632 186.688 422.721 186.688 cv
422.98 186.688 423.161 186.449 423.161 186.049 cv
423.161 182.83 li
423.161 182.292 422.834 181.667 422.431 181.435 cv
419.417 179.695 li
419.314 179.635 419.216 179.607 419.128 179.607 cv
.842374 .602045 .0982681 .0030518 cmyk
f
422.721 186.688 mo
422.632 186.688 422.534 186.66 422.431 186.601 cv
419.417 184.861 li
419.014 184.627 418.687 184.003 418.687 183.466 cv
418.687 180.247 li
418.687 179.847 418.868 179.607 419.128 179.607 cv
419.216 179.607 419.314 179.635 419.417 179.695 cv
422.431 181.435 li
422.834 181.667 423.161 182.292 423.161 182.83 cv
423.161 186.049 li
423.161 186.449 422.98 186.688 422.721 186.688 cv
.570672 .350164 .106935 0 cmyk
f
424.385 237.771 mo
373.222 208.232 li
371.372 207.165 369.873 204.3 369.873 201.835 cv
369.873 190.084 li
369.873 188.248 370.704 187.151 371.893 187.151 cv
372.3 187.151 372.75 187.281 373.222 187.553 cv
425.901 217.968 li
425.901 223.787 li
425.901 223.787 426.084 229.765 424.385 237.771 cv
419.127 222.063 mo
418.868 222.063 418.687 222.302 418.687 222.703 cv
418.687 225.922 li
418.687 226.459 419.014 227.083 419.417 227.316 cv
422.431 229.056 li
422.534 229.116 422.632 229.144 422.721 229.144 cv
422.98 229.144 423.161 228.905 423.161 228.504 cv
423.161 225.286 li
423.161 224.747 422.834 224.123 422.431 223.891 cv
419.417 222.151 li
419.314 222.091 419.216 222.063 419.127 222.063 cv
.842374 .602045 .0982681 .0030518 cmyk
f
422.721 229.144 mo
422.632 229.144 422.534 229.116 422.431 229.056 cv
419.417 227.316 li
419.014 227.083 418.687 226.459 418.687 225.922 cv
418.687 222.703 li
418.687 222.302 418.868 222.063 419.127 222.063 cv
419.216 222.063 419.314 222.091 419.417 222.151 cv
422.431 223.891 li
422.834 224.123 423.161 224.747 423.161 225.286 cv
423.161 228.504 li
423.161 228.905 422.98 229.144 422.721 229.144 cv
1 .866484 .240818 .0951247 cmyk
f
405.518 269.334 mo
373.222 250.688 li
371.372 249.621 369.873 246.756 369.873 244.29 cv
369.873 232.54 li
369.873 230.704 370.704 229.607 371.893 229.607 cv
372.3 229.607 372.75 229.737 373.222 230.009 cv
417.664 255.668 li
414.757 260.655 410.828 265.439 405.518 269.334 cv
.842374 .602045 .0982681 .0030518 cmyk
f
405.797 231.793 mo
405.797 143.722 li
373.108 120.799 li
356.608 109.229 339.964 99.6196 323.464 92.1371 cv
290.775 77.3139 li
277.577 85.0424 li
292.182 95.6332 li
292.182 164.576 li
292.182 164.576 290.389 220.777 349.694 285.631 cv
357.322 286.098 363.933 285.534 369.673 284.207 cv
368.69 287.4 li
380.302 280.559 li
381.304 280.021 382.266 279.454 383.191 278.861 cv
383.356 278.764 li
383.346 278.762 li
406.77 263.614 405.797 231.793 405.797 231.793 cv
cp
.70544 .83624 0 0 cmyk
f
348.22 104.898 mo
339.956 100.129 331.693 95.8686 323.464 92.1371 cv
290.775 77.3139 li
277.577 85.0424 li
292.182 95.6332 li
292.182 137.251 li
348.22 104.898 li
cp
.474891 .687251 0 0 cmyk
f
336.833 98.6616 mo
309.286 114.566 li
331.977 127.666 li
359.533 111.757 li
351.97 106.969 344.396 102.597 336.833 98.6616 cv
cp
.672023 .819516 0 0 cmyk
f
392.599 239.522 mo
392.599 151.451 li
359.91 128.528 li
343.41 116.956 326.766 107.348 310.266 99.8657 cv
277.577 85.0424 li
277.577 173.114 li
277.577 173.114 275.784 229.315 335.088 294.169 cv
394.392 297.794 392.599 239.522 392.599 239.522 cv
cp
.587366 .778347 0 0 cmyk
f
369.815 274.229 mo
362.68 281.152 352.536 284.607 339.617 284.471 cv
286.881 225.065 287.417 173.904 287.428 173.427 cv
287.433 100.334 li
306.196 108.843 li
322.113 116.061 338.281 125.399 354.25 136.597 cv
382.743 156.578 li
382.743 239.523 li
382.747 239.826 li
382.754 240.039 383.031 261.407 369.815 274.229 cv
cp
.70544 .83624 0 0 cmyk
f
340.137 197.385 mo
340.137 199.033 341.294 201.036 342.72 201.86 cv
344.147 202.683 345.304 202.016 345.304 200.369 cv
345.304 198.721 344.147 196.718 342.72 195.894 cv
341.294 195.071 340.137 195.738 340.137 197.385 cv
cp
0 .912535 0 0 cmyk
f
331.827 192.587 mo
331.827 194.234 332.983 196.238 334.41 197.061 cv
335.836 197.885 336.993 197.217 336.993 195.57 cv
336.993 193.922 335.836 191.919 334.41 191.095 cv
332.983 190.272 331.827 190.94 331.827 192.587 cv
cp
f
323.515 187.789 mo
323.515 189.436 324.671 191.439 326.098 192.262 cv
327.525 193.086 328.681 192.418 328.681 190.771 cv
328.681 189.123 327.525 187.121 326.098 186.297 cv
324.671 185.473 323.515 186.141 323.515 187.789 cv
cp
f
247.308 287.961 mo
227.118 276.214 li
225.413 275.231 225.627 273.512 227.594 272.376 cv
246.839 261.164 li
248.807 260.028 251.783 259.904 253.487 260.888 cv
273.677 272.635 li
275.381 273.62 275.167 275.337 273.201 276.473 cv
253.955 287.686 li
251.988 288.822 249.012 288.946 247.308 287.961 cv
cp
.280034 .073518 .0233463 0 cmyk
f
281.025 250.622 mo
281.025 250.622 li
281.025 245.549 li
254.086 245.534 li
254.272 245.528 li
252.135 244.294 248.403 244.449 245.935 245.873 cv
246.733 245.54 li
219.77 245.525 li
219.77 250.94 li
219.709 251.775 220.175 252.581 221.202 253.173 cv
246.523 267.906 li
248.66 269.14 252.392 268.985 254.86 267.56 cv
278.995 253.498 li
280.417 252.676 281.105 251.613 281.025 250.622 cv
cp
1 .866484 .240818 .0951247 cmyk
f
250.404 244.702 mo
248.84 244.739 247.217 245.133 245.935 245.873 cv
246.733 245.54 li
219.77 245.525 li
219.77 250.94 li
219.709 251.775 220.175 252.581 221.202 253.173 cv
246.523 267.906 li
247.549 268.498 248.946 268.768 250.392 268.733 cv
250.404 244.702 li
cp
.827268 .57586 .071809 .00112917 cmyk
f
222.822 245.527 mo
219.77 245.525 li
219.77 250.94 li
219.709 251.775 220.175 252.581 221.202 253.173 cv
222.822 254.109 li
222.822 245.527 li
cp
.280034 .073518 .0233463 0 cmyk
f
247.059 268.168 mo
248.903 268.958 251.569 268.914 253.724 268.092 cv
253.724 261.005 li
247.059 261.005 li
247.059 268.168 li
cp
.940612 .760952 .191134 .0482185 cmyk
f
246.523 262.537 mo
221.202 247.803 li
219.065 246.57 219.332 244.414 221.8 242.99 cv
245.935 228.928 li
248.403 227.503 252.135 227.349 254.272 228.582 cv
279.593 243.315 li
281.73 244.549 281.462 246.705 278.995 248.128 cv
254.86 262.191 li
252.392 263.615 248.66 263.77 246.523 262.537 cv
cp
.147219 .0154116 0 0 cmyk
f
246.13 241.882 mo
244.81 242.636 242.674 242.626 241.361 241.859 cv
240.047 241.092 240.053 239.859 241.374 239.105 cv
242.695 238.351 244.83 238.362 246.144 239.128 cv
247.457 239.896 247.452 241.128 246.13 241.882 cv
cp
.827268 .57586 .071809 .00112917 cmyk
f
253.782 246.35 mo
252.461 247.104 250.326 247.094 249.012 246.327 cv
247.699 245.56 247.704 244.327 249.026 243.573 cv
250.346 242.819 252.482 242.83 253.795 243.596 cv
255.109 244.364 255.103 245.596 253.782 246.35 cv
cp
f
261.434 250.818 mo
260.113 251.572 257.977 251.562 256.663 250.794 cv
255.35 250.028 255.357 248.794 256.677 248.04 cv
257.998 247.287 260.134 247.297 261.447 248.064 cv
262.76 248.831 262.754 250.064 261.434 250.818 cv
cp
f
523.624 185.352 mo
523.624 185.352 523.095 196.271 522.264 203.61 cv
521.433 210.948 503.759 197.973 503.759 197.973 cv
503.759 189.618 li
523.624 185.352 li
cp
.743191 .853178 0 0 cmyk
f
514.211 321.211 mo
513.946 321.874 509.367 327.45 504.786 328.843 cv
502.796 329.45 501.457 329.529 500.58 329.424 cv
499.7 329.32 499.156 328.412 499.453 327.577 cv
500.241 325.359 502.499 320.738 508.238 317.893 cv
516.002 314.043 514.211 321.211 514.211 321.211 cv
cp
1 .866484 .240818 .0951247 cmyk
f
515.738 323.353 mo
515.738 323.353 514.012 327.401 513.481 330.786 cv
513.157 332.85 514.29 335.533 515.223 337.31 cv
515.802 338.414 517.27 338.662 518.193 337.824 cv
519.689 336.466 521.594 334.107 521.91 330.719 cv
522.44 325.012 521.91 324.016 521.91 324.016 cv
515.738 323.353 li
cp
f
526.769 254.369 mo
526.769 254.369 527.366 261.568 526.769 269.533 cv
526.171 277.497 524.033 314.741 523.635 323.7 cv
523.635 323.7 523.834 326.413 518.582 325.815 cv
513.331 325.218 513.754 322.206 513.754 322.206 cv
513.754 322.206 506.379 322.107 506.148 317.76 cv
505.915 313.414 498.594 265.851 498.594 248.75 cv
526.769 254.369 li
cp
.0114137 .138521 .731472 0 cmyk
f
501.132 217.206 mo
496.879 243.218 li
493.009 243.151 li
493.366 219.314 li
501.132 217.206 li
cp
0 .286015 .250584 0 cmyk
f
502.914 194.172 mo
502.914 194.172 497.175 194.023 495.177 202.319 cv
493.179 210.614 491.616 221 493.354 221.864 cv
498.571 224.454 501.871 221.422 501.871 221.422 cv
502.914 194.172 li
cp
.634821 .805264 0 0 cmyk
f
501.197 194.524 mo
502.176 194.116 503.275 194.061 504.295 194.354 cv
509.185 195.758 527.572 201.154 530.601 203.745 cv
534.102 206.737 525.351 223.552 525.477 229.065 cv
525.603 234.579 526.225 241.078 526.711 247.072 cv
527.199 253.065 527.858 256.351 522.956 258.899 cv
518.054 261.447 509.684 261.565 503.418 256.79 cv
497.154 252.017 498.29 248.75 498.551 245.285 cv
498.812 241.819 500.945 226.83 500.76 222.575 cv
500.76 222.575 498.553 220.948 496.917 218.159 cv
495.282 215.37 498.17 210.244 499.37 206.911 cv
500.569 203.578 498.693 199.766 499.064 197.047 cv
499.255 195.647 500.15 194.961 501.197 194.524 cv
cp
.587366 .778347 0 0 cmyk
f
507.075 200.257 mo
506.687 203.286 509.465 206.136 513.28 206.625 cv
517.095 207.114 520.502 205.055 520.89 202.027 cv
521.278 198.998 518.499 196.147 514.685 195.658 cv
510.87 195.169 507.462 197.228 507.075 200.257 cv
cp
0 0 0 0 cmyk
f
509.045 200.509 mo
508.768 202.674 510.753 204.711 513.481 205.061 cv
516.207 205.411 518.642 203.939 518.919 201.774 cv
519.197 199.61 517.211 197.572 514.485 197.222 cv
511.758 196.873 509.323 198.345 509.045 200.509 cv
cp
0 .286015 .250584 0 cmyk
f
511.755 193.403 mo
511.755 193.403 515.074 190.673 515.726 192.055 cv
516.378 193.438 516.915 199.371 516.915 199.371 cv
510.325 201.142 li
511.325 195.13 li
511.325 195.13 510.005 194.012 511.755 193.403 cv
cp
f
501.454 186.901 mo
501.775 192.327 506.433 196.465 511.859 196.145 cv
517.285 195.825 521.423 191.166 521.102 185.741 cv
520.782 180.315 516.123 176.176 510.698 176.497 cv
505.272 176.817 501.133 181.475 501.454 186.901 cv
cp
f
516.186 193.775 mo
516.245 194.084 516.3 194.417 516.354 194.756 cv
515.692 198.18 510.568 199.679 510.568 199.679 cv
511.325 195.13 li
511.325 195.13 510.703 194.604 510.879 194.077 cv
512.904 193.437 515.456 192.871 516.186 193.775 cv
cp
.0520027 .456916 .352453 0 cmyk
f
501.454 186.901 mo
501.775 192.327 506.433 196.465 511.859 196.145 cv
517.285 195.825 521.423 191.166 521.102 185.741 cv
520.782 180.315 516.123 176.176 510.698 176.497 cv
505.272 176.817 501.133 181.475 501.454 186.901 cv
cp
0 .286015 .250584 0 cmyk
f
535.526 227.978 mo
534.424 254.314 li
530.574 254.71 li
528.068 231.003 li
535.526 227.978 li
cp
f
522.873 225.777 mo
524.148 220.154 526.664 207.729 526.664 207.729 cv
527.74 220.086 li
526.498 223.751 525.432 227.116 525.477 229.065 cv
525.551 232.301 525.797 235.878 526.085 239.492 cv
526.084 239.503 li
526.084 239.503 521.599 231.401 522.873 225.777 cv
cp
.634821 .805264 0 0 cmyk
f
529.866 203.205 mo
529.866 203.205 532.945 204.38 534.687 213.837 cv
536.429 223.293 537.733 232.766 534.626 233.987 cv
531.52 235.207 528.924 236.125 528.011 233.596 cv
527.098 231.067 526.532 218.879 526.417 214.497 cv
526.302 210.114 526.135 204.071 529.866 203.205 cv
cp
.474891 .687251 0 0 cmyk
f
513.754 322.206 mo
513.754 322.206 512.84 322.194 511.647 321.989 cv
510.203 264.093 li
513.754 322.206 li
cp
.134188 .51693 .984039 .0105287 cmyk
f
519.328 290.934 mo
521.375 288.259 li
542.919 275.787 li
543.61 275.386 544.169 274.315 544.167 273.394 cv
544.149 255.755 li
545.388 254.138 li
544.224 253.464 li
544.223 253.466 li
543.999 253.323 543.703 253.326 543.378 253.515 cv
518.962 267.651 li
518.272 268.05 517.713 269.122 517.714 270.043 cv
517.735 289.251 li
517.736 289.77 517.913 290.13 518.192 290.276 cv
519.328 290.934 li
cp
.587366 .778347 0 0 cmyk
f
534.225 280.82 mo
535.756 279.934 li
544.158 265.34 li
544.149 255.755 li
545.388 254.138 li
544.224 253.464 li
544.223 253.466 li
543.999 253.323 543.703 253.326 543.378 253.515 cv
518.962 267.651 li
518.598 267.862 518.271 268.261 518.042 268.726 cv
534.225 280.82 li
cp
.238346 .384222 0 0 cmyk
f
544.838 254.856 mo
545.388 254.138 li
544.224 253.464 li
544.223 253.466 li
543.999 253.323 543.703 253.326 543.378 253.515 cv
542.948 253.764 li
544.838 254.856 li
cp
f
518.741 267.807 mo
518.199 268.25 517.779 269.089 517.721 269.863 cv
520.107 271.241 li
521.25 269.255 li
518.741 267.807 li
cp
.587366 .778347 0 0 cmyk
f
520.125 268.324 mo
544.54 254.188 li
545.231 253.789 545.792 254.211 545.793 255.132 cv
545.814 274.341 li
545.815 275.263 545.256 276.334 544.565 276.734 cv
520.15 290.87 li
519.459 291.27 518.899 290.847 518.898 289.925 cv
518.877 270.716 li
518.875 269.795 519.435 268.724 520.125 268.324 cv
cp
.70544 .83624 0 0 cmyk
f
534.394 254.093 mo
534.394 254.093 535.411 260.241 535.258 262.209 cv
535.105 264.178 534.051 267.425 533.251 267.357 cv
532.452 267.289 533.225 259.44 531.821 260.221 cv
530.415 261.003 530.268 262.344 529.632 261.871 cv
528.995 261.397 530.742 254.688 530.276 251.779 cv
529.81 248.87 534.394 254.093 534.394 254.093 cv
cp
0 .286015 .250584 0 cmyk
f
493.009 243.151 mo
493.009 243.151 491.992 249.298 492.145 251.267 cv
492.298 253.236 493.352 256.484 494.152 256.414 cv
494.952 256.346 494.178 248.497 495.582 249.279 cv
496.988 250.061 497.135 251.402 497.771 250.928 cv
498.408 250.455 496.661 243.747 497.127 240.837 cv
497.593 237.928 493.009 243.151 493.009 243.151 cv
cp
f
507.498 187.18 mo
502.562 188.933 501.601 187.864 501.553 187.806 cv
501.508 187.508 501.472 187.207 501.453 186.901 cv
501.39 185.811 501.513 184.755 501.783 183.756 cv
514.59 182.028 li
514.59 182.028 512.568 185.379 507.498 187.18 cv
cp
.0520027 .456916 .352453 0 cmyk
f
501.099 177.096 mo
502.263 176.099 506.461 171.168 513.983 172.331 cv
518.683 173.059 522.645 176.265 523.524 183.581 cv
524.117 188.509 522.307 193.364 518.975 196.953 cv
518.794 196.869 518.608 196.791 518.441 196.682 cv
516.557 195.442 516.354 194.76 516.354 194.754 cv
515.938 191.021 li
515.952 190.492 516.347 190.02 516.876 189.987 cv
517.286 189.961 517.782 189.765 518.254 189.147 cv
519.335 187.734 518.836 185.532 516.675 185.449 cv
515.546 185.405 515.11 184.794 514.95 184.221 cv
514.81 183.722 514.285 183.445 513.797 183.622 cv
511.339 184.511 505.283 186.428 501.384 185.324 cv
496.398 183.912 499.936 178.093 501.099 177.096 cv
cp
.743191 .853178 0 0 cmyk
f
506.707 191.625 mo
503.698 190.798 li
503.698 190.798 505.134 193.059 507.233 193.635 cv
509.331 194.211 509.658 192.436 509.658 192.436 cv
506.707 191.625 li
cp
0 0 0 0 cmyk
f
529.275 261.68 mo
531.84 260.211 li
530.876 261.785 li
529.579 262.263 li
529.275 261.68 li
cp
.238346 .384222 0 0 cmyk
f
285.97 305.02 mo
283.254 306.587 278.852 306.587 276.136 305.02 cv
273.42 303.452 273.42 300.91 276.136 299.342 cv
278.852 297.774 283.254 297.774 285.97 299.342 cv
288.686 300.91 288.686 303.452 285.97 305.02 cv
cp
305.745 293.772 mo
295.186 287.675 278.065 287.675 267.505 293.772 cv
256.946 299.869 256.946 309.753 267.506 315.85 cv
278.066 321.947 295.187 321.947 305.746 315.85 cv
316.306 309.753 316.306 299.87 305.745 293.772 cv
cp
.280034 .073518 .0233463 0 cmyk
f
311.452 310.953 mo
310.04 312.356 308.299 313.678 306.218 314.88 cv
304.136 316.081 301.845 317.087 299.414 317.902 cv
304.583 320.886 li
312.373 321.287 li
316.227 323.511 li
314.655 324.419 li
317.572 326.104 li
320.717 324.288 li
325.815 327.23 li
320.694 330.187 li
324.457 332.36 li
328.108 334.467 li
332.657 331.841 li
339.398 335.733 li
336.825 337.219 li
341.155 339.719 li
343.729 338.234 li
345.761 339.407 li
343.714 343.478 li
350.265 347.26 li
374.338 347.26 li
311.452 310.953 li
cp
f
285.878 297.9 mo
283.162 299.468 278.759 299.468 276.043 297.9 cv
273.328 296.332 273.328 293.79 276.043 292.222 cv
278.759 290.655 283.162 290.655 285.878 292.222 cv
288.593 293.79 288.593 296.332 285.878 297.9 cv
cp
313.665 302.664 mo
313.665 295.354 li
311.511 296.57 li
310.194 294.779 308.276 293.099 305.745 291.638 cv
295.186 285.54 278.065 285.54 267.505 291.637 cv
264.577 293.329 262.464 295.311 261.16 297.423 cv
259.586 295.354 li
259.586 302.664 li
259.581 306.664 262.221 310.664 267.506 313.715 cv
278.066 319.812 295.187 319.812 305.746 313.715 cv
311.032 310.664 313.67 306.664 313.665 302.664 cv
cp
.0860304 .38764 1 0 cmyk
f
284.362 308.428 mo
272.694 302.676 li
262.325 295.827 li
261.883 296.349 261.495 296.881 261.16 297.423 cv
259.586 295.354 li
259.586 302.664 li
259.581 306.664 262.221 310.664 267.506 313.715 cv
272.209 316.431 278.215 317.934 284.362 318.23 cv
284.362 308.428 li
cp
.0114137 .138521 .731472 0 cmyk
f
285.97 295.563 mo
283.254 297.13 278.852 297.13 276.136 295.563 cv
273.42 293.995 273.42 291.453 276.136 289.885 cv
278.852 288.317 283.254 288.317 285.97 289.885 cv
288.686 291.453 288.686 293.995 285.97 295.563 cv
cp
305.745 284.315 mo
295.186 278.218 278.065 278.218 267.505 284.315 cv
256.946 290.412 256.946 300.296 267.506 306.393 cv
278.066 312.49 295.187 312.49 305.746 306.393 cv
316.306 300.296 316.306 290.413 305.745 284.315 cv
cp
f
285.878 297.9 mo
283.162 299.468 278.759 299.468 276.043 297.9 cv
273.328 296.332 273.328 293.79 276.043 292.222 cv
278.759 290.655 283.162 290.655 285.878 292.222 cv
288.593 293.79 288.594 296.332 285.878 297.9 cv
cp
291.276 288.175 mo
276.6 288.175 li
275.258 288.484 273.953 288.858 272.694 289.295 cv
272.694 301.732 li
291.276 301.732 li
291.276 288.175 li
cp
.0860304 .38764 1 0 cmyk
f
285.97 295.563 mo
283.254 297.13 278.852 297.13 276.136 295.563 cv
273.42 293.995 273.42 291.453 276.136 289.885 cv
278.852 288.317 283.254 288.317 285.97 289.885 cv
288.686 291.453 288.686 293.995 285.97 295.563 cv
cp
303.479 285.624 mo
294.17 280.25 279.08 280.25 269.773 285.624 cv
260.465 290.997 260.465 299.71 269.773 305.084 cv
279.081 310.457 294.171 310.458 303.479 305.084 cv
312.786 299.71 312.786 290.998 303.479 285.624 cv
cp
.0440986 .307774 .962249 0 cmyk
f
269.773 287.642 mo
279.08 282.269 294.17 282.269 303.479 287.643 cv
307.688 290.073 309.987 293.186 310.389 296.364 cv
310.876 292.514 308.578 288.568 303.479 285.624 cv
294.17 280.25 279.08 280.25 269.773 285.624 cv
264.674 288.568 262.375 292.513 262.863 296.363 cv
263.265 293.185 265.564 290.073 269.773 287.642 cv
cp
.0860304 .38764 1 0 cmyk
f
311.452 308.763 mo
310.04 310.166 308.299 311.49 306.218 312.692 cv
304.136 313.893 301.845 314.898 299.414 315.713 cv
304.583 318.698 li
312.373 319.098 li
316.227 321.323 li
314.655 322.231 li
317.572 323.914 li
320.717 322.099 li
325.815 325.041 li
320.694 327.998 li
324.457 330.171 li
328.108 332.279 li
332.657 329.653 li
339.398 333.544 li
336.825 335.031 li
341.155 337.531 li
343.729 336.044 li
345.761 337.218 li
343.714 341.289 li
350.265 345.072 li
374.338 345.072 li
311.452 308.763 li
cp
.0440986 .307774 .962249 0 cmyk
f
311.452 303.48 mo
310.04 304.883 308.299 306.206 306.218 307.408 cv
304.136 308.61 301.845 309.615 299.414 310.429 cv
304.583 313.414 li
312.373 313.814 li
316.227 316.039 li
314.655 316.948 li
317.572 318.631 li
320.717 316.815 li
325.815 319.758 li
320.694 322.715 li
324.457 324.888 li
328.108 326.996 li
332.657 324.369 li
339.398 328.261 li
336.825 329.747 li
341.155 332.247 li
343.729 330.761 li
345.761 331.935 li
343.714 336.006 li
350.265 339.789 li
374.338 339.789 li
311.452 303.48 li
cp
.0114137 .138521 .731472 0 cmyk
f
374.338 345.072 mo
374.338 339.789 li
350.265 339.789 li
350.265 345.072 li
374.338 345.072 li
cp
.0860304 .38764 1 0 cmyk
f
341.155 337.531 mo
341.155 332.247 li
343.729 330.761 li
343.729 336.044 li
341.155 337.531 li
cp
f
336.825 329.747 mo
336.825 335.031 li
341.155 337.531 li
341.155 332.247 li
336.825 329.747 li
cp
.0627451 .337133 1 0 cmyk
f
332.657 324.369 mo
332.657 329.653 li
328.108 332.279 li
328.108 326.996 li
332.657 324.369 li
cp
.0860304 .38764 1 0 cmyk
f
320.694 322.715 mo
320.694 327.998 li
328.108 332.279 li
328.108 326.996 li
320.694 322.715 li
cp
.0627451 .337133 1 0 cmyk
f
343.729 336.044 mo
343.714 341.289 li
350.265 345.072 li
350.265 339.789 li
343.729 336.044 li
cp
f
317.572 318.631 mo
317.572 323.914 li
314.655 322.231 li
314.655 316.948 li
317.572 318.631 li
cp
f
304.583 313.414 mo
304.583 318.698 li
312.373 319.098 li
312.373 313.814 li
304.583 313.414 li
cp
.0860304 .38764 1 0 cmyk
f
357.911 336.044 mo
311.869 309.439 li
314.427 307.961 li
362.999 336.028 li
357.911 336.044 li
cp
f
314.427 309.242 mo
360.797 336.036 li
362.999 336.028 li
314.427 307.961 li
311.869 309.439 li
312.976 310.079 li
314.427 309.242 li
cp
.0440986 .307774 .962249 0 cmyk
f
304.583 318.698 mo
304.583 313.414 li
299.414 310.429 li
299.414 315.713 li
304.583 318.698 li
cp
.0860304 .38764 1 0 cmyk
f
320.717 316.815 mo
320.717 322.099 li
317.572 323.914 li
317.572 318.631 li
320.717 316.815 li
cp
f
303.479 285.624 mo
298.248 282.605 291.192 281.282 284.362 281.656 cv
284.362 283.674 li
291.192 283.3 298.248 284.623 303.479 287.643 cv
307.688 290.073 309.987 293.186 310.389 296.364 cv
310.876 292.514 308.578 288.568 303.479 285.624 cv
cp
.0114137 .138521 .731472 0 cmyk
f
545.143 164.096 mo
524.144 151.878 li
522.371 150.855 522.593 149.068 524.64 147.886 cv
544.656 136.224 li
546.702 135.043 549.797 134.914 551.57 135.938 cv
572.569 148.156 li
574.341 149.179 574.12 150.966 572.073 152.148 cv
552.057 163.81 li
550.011 164.992 546.915 165.12 545.143 164.096 cv
cp
.280034 .073518 .0233463 0 cmyk
f
578.984 126.213 mo
578.984 126.213 li
578.984 121.141 li
552.045 121.126 li
552.231 121.12 li
550.094 119.886 546.362 120.041 543.894 121.465 cv
544.692 121.132 li
517.729 121.118 li
517.729 126.532 li
517.668 127.367 518.134 128.173 519.161 128.766 cv
544.482 143.498 li
546.619 144.732 550.351 144.578 552.819 143.153 cv
576.953 129.091 li
578.377 128.269 579.064 127.205 578.984 126.213 cv
cp
.70544 .83624 0 0 cmyk
f
548.363 120.293 mo
546.799 120.331 545.176 120.725 543.894 121.465 cv
544.692 121.132 li
517.729 121.118 li
517.729 126.532 li
517.668 127.367 518.134 128.173 519.161 128.766 cv
544.482 143.498 li
545.508 144.091 546.905 144.36 548.351 144.325 cv
548.363 120.293 li
cp
.587366 .778347 0 0 cmyk
f
520.781 121.12 mo
517.729 121.118 li
517.729 126.532 li
517.668 127.367 518.134 128.173 519.161 128.766 cv
520.781 129.701 li
520.781 121.12 li
cp
.474891 .687251 0 0 cmyk
f
545.018 143.761 mo
546.862 144.55 549.528 144.506 551.683 143.685 cv
551.683 136.597 li
545.018 136.597 li
545.018 143.761 li
cp
.672023 .819516 0 0 cmyk
f
544.482 138.128 mo
519.161 123.396 li
517.024 122.163 517.291 120.007 519.759 118.582 cv
543.894 104.521 li
546.362 103.096 550.094 102.942 552.231 104.175 cv
577.552 118.908 li
579.689 120.141 579.421 122.296 576.953 123.721 cv
552.819 137.783 li
550.351 139.207 546.619 139.362 544.482 138.128 cv
cp
.634821 .805264 0 0 cmyk
f
542.547 117.378 mo
541.226 118.133 539.09 118.122 537.777 117.356 cv
536.463 116.588 536.47 115.356 537.79 114.602 cv
539.112 113.847 541.247 113.858 542.561 114.624 cv
543.873 115.392 543.868 116.624 542.547 117.378 cv
cp
.474891 .687251 0 0 cmyk
f
550.199 121.846 mo
548.878 122.601 546.743 122.59 545.429 121.824 cv
544.116 121.056 544.121 119.824 545.442 119.07 cv
546.763 118.315 548.899 118.326 550.212 119.092 cv
551.526 119.86 551.52 121.092 550.199 121.846 cv
cp
f
557.85 126.314 mo
556.53 127.069 554.394 127.058 553.08 126.29 cv
551.767 125.524 551.773 124.291 553.094 123.538 cv
554.414 122.783 556.55 122.793 557.864 123.56 cv
559.177 124.328 559.171 125.56 557.85 126.314 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.0.0
%%For: (\720\763\761\753\740\755 \716\753\745\743\756\742\750\767 \725\756\753\777\745\742) ()
%%Title: (Data_processing_04.eps)
%%CreationDate: 12/17/2018 3:20 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!)V/qsaLY>aPIX>Yl-6a^geB:e?urRinB6@qYsD8mAoP*hNtX^\tk7=cuA.i/sohVq0:>17>]ID'mBA6GCjL=/trbI,dFA
%RUKCRZKY7SUS\LX/?7V'CLQ1%ocS#DG0IM*_0bK._p_=>-#U%W)kL;NPe1!o]sHU2PbWE6d&8g*m1lbm/$*NuiAhka[1?-:f(`Im
%f>@))SE"PA-UG-U"c_)5f[64Zc5Oq@G4OBGS-9#QGL=--0A!e#BHPN\.[sLY]ZlJ`'DCH?l?!#HR+4HX$G.Cg<G5Di4\%)b&d,j-
%e2'4FIF4_t^3I4tfi22RoGMt&VRH)a=p.#@pp<7aC@G"<h`?5dnec$02]WCs@FP]i@AhhX!uq:B]GBJ!<fG>@DQUegd?7i*[I[M<
%+dTLK-FU;7=cTAcP6";GikGm\DNM&5"90b)qS2!5U7%IhkLn`GiZ*VqE-0@1i@kik(k!'*b9@%OZ),ua?A5N)p2pK?:HXN;R^K@5
%0q#=@4(n,%5l7((V[dC(Vh0:%;9ZQllesi\8+A.^[WAUfg.Y+ZG&gV-N7#sdo_47:.LI\'9?<X\l5Wk)$aSmX5QP.,bm3'.e9Y?&
%FoXbDg-![6h*r]jEM4#C#IP,^9VjZE.s`1hXn/Inb1*A4Og-F*)pe)dHaOOdMHXjWTQd]nN9WomG77<gb7U:!)ELpE2K_M73Rc@a
%e5Xc&V&1$b]SS*[EWR3ia-*c*AGn]ja'Pfm?ELC^]-&s@0ne\*[&TBZE@B4>reKHrF-X3^hZ@U:6DkLI,p!7N.I8B+l$@7A:s<p$
%dChTCLK,TDEA\R3,>e1Ai$jDO&=X,D!LNe\jaVE?<pT8$2"@d0i*XgJ^P.8U2,4!*9g!0ZGgnSGd3)hpo@"Za]/^B#EZFH.37uJq
%Jj9h2H.^1/Y`B%hf]eu_h)l4[iA^[mh$O>P<[cn*K`W;E'X1@Ei6`Zd*-QW>@##l_-ZPe>a;cBf-U3Kdb2Xh+0RdCg`!cTS2oJ?u
%bE!fEp_WfM;YZU;0$1q*7_J4Dr^*FM0+PsX`J6pYn1V["^L/kWKsPfgEX8lgU5"0&:Cpp'j:VQd;ju0uP7%?\;`XOk!=h;KNmH%%
%Q`Q?Upcn,"39"9bMDLE*cAr:Oi>:j83(cqeddWG48,S:[&4%oRpf@HV:&#O:+cc>a1R!_)-SC/SkEN9fJ<uEE=iWhh[)['SG`js)
%H]A(.SqG$qk$q&mnLjASp-AhXN$<l?FH/@GN&]g(m)ETWETD6#-f\S#K*]?Y;Tbg_EUrW[\>2c;Q9lhXNWIHpL'r]7'$4?QI1@?s
%4eJ,UNr^mO,OsgP@lHD4+.a"YO7Ri&GcmuMZ8qA6JbTcWqo;,cd=-NSS1_3.d5+@q6k?f'9-$PKOe&(7PLTM`gQL+o2\7<-:3LqM
%&db]D=jG4rk,0,PcMle#0U7Cf7gM>DI.DcQ`IB8-r#_GHgUo!2jSpXi^QVImcZT&%f8XEe`BW8CLQYI40;%FBP>D/g:+mB.;tA'1
%PtLsuo#^prnNUIFOb`^uo9]KC^\B298?@DSkM873YA8R'l1d+a3l$V8&Vi,k,(GN^Q)B"[TP,&1Zs\aL`X]gt+)n1:.mj_6J=f$$
%$OgF&L&k'l$6DRO@OU?k@!42OL'$9,=U^1"0aN/gE$#9037MX"LOBs/0N8(.@[[IqnI_nh1+rhQ`q+14^ZQ&YEe\neY6;NUn@h-h
%@it5@F=(/c4b.V_,?KSLQ;$-.$3!hq0nMe3,jDTGXsAece8d.qa"Tb+JaSW8p2+.X@^D<=UEO8O`>+'F[*rR(_-mZ]hC_PL-=`j8
%h3`:=.PlWe6Nd^(D'+B;*!2hp&B!bN_ZR'4FG0bnC_Dg2Sq.?Fj/;,0Ha\cPiX=oP?FUE'JB`!/Y*Bb:K;(J@&Ro0c3*QZUIGaZk
%PQ8D41$8K=2ZeYc_n_(@1>M\$:/.Q8d_H_pK7:h*d*A<TplK!27I%_DAaoIC.PZ2dW\NO=9+V7$l<<sUn/7l#Y,ISi)07AT2)CMR
%1H!-FipE3hT,T2+kA%-?J]B1Bc@UQ+)3q?YgH`qDaB4^hs27?^.&!.4nXDgud$@KPKYFKJcekZs;H+2O.B\Md#\2u5>Qu'Ud5aU?
%"qe`5EEZfGQR8'<2&S\QF?:d0!@gdE1)rE1T<,A7d?4R]5gs#[F2epuR>=j@aFu=aGH9f28-WYRp<jkr`$S28Zu--]co+^:6%G73
%(b-t76Fl$5.krgd/g#oO&.m$M:]QUh!Z.Q'-;#XPOg6m%1^+22H9O@Z8:V8=%ameT=`csc=<*u8_9Wo2o7?1:P*e#-<FYEa6?kPC
%aq'b6LQQk<@un):jFK;[+Pm)*,7=b)Pka8X&1q'2VMcnXnVskr3ATV^,u,A=Vm-+KR7Mc_%kF'2S-#L;/r]7jhuJ7Ra<O?El3+$*
%"CZ3oOaoo8kK'';8f#'aG0Vq/AXo:oaX7@t^b[#i7abq#G7eCA((N8M)Nhl\:_<"p.2eYdaB63QOEdp&99Kpb_`jJO7e!6$8A5IY
%,+A]l-7Vi\/q*@8$L*A%Ar*_7Q,IZZdpZ/5E/T?,-`0C*SDK/YRUZALfdeK93sK#fB3G@AS+?e@%3^jEj7&_*&gY;24[Oa=LpemF
%(bJWpP?=<Mc*k+h@2-L;`9G)]^tIOcfT@SB5ROLMZ(TA#N`-ad#'3Zk)q-/m6cI*SK\15MioUKb`H7oCE;.>F@Q$^>)c2A#M3R2c
%cU$i:Y6%`>:@gn>JtF#+>*?Y:hfocXL`Qk7^()acft]at>YJrI?4]s:6(bu&Dl!;-Yse10N>P`"[.6J-(96@nCj$;aZuOmATLhnn
%V40s4&QYP$GApA2DZZR4C[P'H:#KpudNnhi2#P;L50'3Q@9;H/ZSBNL%Xq&L.:eDNZuaH\q0!es$*p-=iFj3\,o0>r.i/,Wo95dt
%#\"Am`Yl_4:B9&/^O]IhD$jL&E>8E1NY/o"/nZMNOdTI=q/;b-R!<TXgi$8L^QlNh,"<B!.qfN(le3ga3?o2q.q9!QRHUGO*pQ=G
%,%H^cr&7\NIOZNEDtNru#EOuW^WP"j5Wq+9.L?"hV[bQE%/1o;.[?2RdpjFG5i]flQYq[s,)C*HGY@5GCl?8cPqr>`W,n%?+SSV.
%/YimJ"Vaa--L:l5\m,JS&J=!"_XE!_04AP!fqfQ'jVn!QMMEK)dqjglqAb13XU^Dk#hWC"!s!flQndo9@bAR^)5RZ:L5#b__8BV"
%1##@t&Q*d-I3up20ZNpST&9a_HL)@)H>O<u1s!-sl].u^>Nc+Wo]#<NNQ]#6gEcTPoHCIe'+T\dk]6E3@:8Mt8We#KE;,H;'+0W*
%AYQHho>^2A:u-a*YUa>Y<:u8WA?Q1*1"ct6Br^qU+t@&kA5413=HNAV_e0=ob72Zak*b7'@dI4WbWJV:d+#\'Qr,MF+ZH/E2CV9K
%X_@fC*jS_iNi<g%(O?6g_O&T.'ljF7%.b97;3;2?K8FH(A*b%9-Jdg$-sXE"jRjHb6mYY+8X_Q'#eVN0k["KBP>bD8!0eTe#q7mI
%4G3>?Vhg`1n$7inn?u:<SqO\l9rR1js$BVH:FMg#6I52g6)Ls61ie$9'@Z.G3`Oa":P=FPP?IBP.#EsJ/P.u@STuj(9rG(k\>"c%
%29lThVX+dc`3cPjMQNGI=?@Y68A<l2n$Cp\dl*uB?"Af><mV`^S3fWp`iM<mprP66?8akcAgkVqA-NF.QoAXC\-e2#E%!^DPU,ol
%n:f5`]VBFbF\mc^'c;siGe:gYZP/HiX9tHQBW??JYU$ZDp+cn32l5HidW%J35J0b713_kN]p+`%?ohf39BV8$U*!0)Vs-b8TG@ZT
%Gli[XO&^HN&*G?"#"T20J/]ei4ip6($96$t!n(^X]n2D=`T/^5/;\\/l7l!^ENc2ZDIL(XTng+*a08^sNgj)^gIM]Vn9i*L$;^>[
%CctA%7D[1/d=,I%5!"]<+X0R@L!'%T7e!9g4Ocb1."[:q8JWG3U'rQ^nNn$'AloO-1u@7IXiVg_5.cONj-b2oe#le`I'_`;=Cet'
%iF4=649c>>lA'W@Ph<q8.<:W+QGms!gMddViM8!BM)'uAYd@?uYeYoLH*FsWCi:(-ksE+I@LdV\ddh>bgb3Z"V61NEJ!['%]LEi1
%dS:E^L_R@LoqC#u!E^C%_hJ#r(Dj;"b#:Wl'>?#I@R_O%KZ^66UsR+Rbj#GgON%J6JQK]RrX"OWM9pjApl$`5KF<mH18'>dgH8B*
%s'S&apmlUpk7k/^$q<@U*/`DP%oQpZ2ps\*AJoBF/RC;m<@2Ps3>16uNPm4H9HG[J=6.rBi:g3l&SRCR%XoH.'DpTa,;*u#5WsL$
%c/^A7@Ps[uK*1,7?3A%p3cQ>j/ZS:n3qMZ<;Wa^-JkNq';:daS"3_)15r+sJE"M&m3^^hUM%^<?9,1;smVK-q/1,\J/JZ7]Ujb8D
%$?P*"c+*+mRa#neiST>4:96.HJ-D:Q=NLf="Of?m(pLYh?#pIdR*p1h"Lg3CF2]A\Sr\i3GRhi^f!lj-.RoJ;j4-#V'O39k?4]sk
%iW]utJI?eJkLq=D,3B9_U'Ue[7p&;E3-pi.B=!s0#\nEb_b(W[Ubg.@<h3H<8Rq$46R%*+4SO"jJAc'_!FZ$$]ML*!plu8dOE%Hs
%P"N-$'AT$4cDN5*>STSVioE^J'D5mL<([K,/=*4'db.uo]g[lS4V:Dc()KfbK%*t&&B*^.e?-63(3O@0D&,t5E!AjG)6I%$?mJT2
%J?+$n!^r^NL<kGPDl"-mS<Qq$9iZnq9,U'X**G?[FfFgV`tAQ</S3j0)3<*u1UC3n:(:XnR7lKh@XP0'MRf1?h3:I)h^46M_"X4`
%!*2(fKpL"q)#(ZN@(m(U/UR#D3ea1[<MD+'h&t^_Ks(:S1&MO&+Q\Shgi15*aoP_p9GZuK)<&#d$SCZGJ/;XE,!4UkHB)c@+R;Qj
%;A(dk3@-2(>O\29AJi*1OeBTbRn5[M(N=/"8Uu)"VM<lR3LcZjj0KOJ"C.o$m"W=/$rk.&EFD9^9([Z<.KNJ?@Y&0S#]r1Ms4\8B
%0G!4heqbplAe^_tOR#f\J9M<>@T5m0;i2]UF;7^Y#.t`p?WkKLQf9D<S\@n6b`FBS`G:P`Fh5q>UdcIP+Cus42N?Vih?/t*6.jL]
%&.GCeP');;1&1*+70g&/EXlc==VY3'Hu';r(+1QNlq*T]1WXf4B>c0)(Ze2^g`bo1qc]/Mb#NqMld/Va*`b_?BT%^V,^M5FoUFqR
%CcS3I1PKrhHX.D0HD:0W3Jqr]RIJ8\$tg^[A@"'&@P_HBKjeB!M)f%rnLt]4%O;*#J`gqg)@ZgQ>sh5^8/:0U:/"@%d@Gcm`BLOW
%"C3:p+t,Q.%#Re'T#R"<IQ30HEPde\Heeh1$W"lW'-fe(e7Wqs-7%MTir-EG*5c(]3G=9N^^ihD2"1iVbgF@$$T585:/PTBYYR/r
%M/Od4$2_oKQ4RD%T)`uKEYh?dimC)l?GW3/ibP6-KpPm!5(1/'J%sO429s1gj9Ibi(j3F748e(@eo:2k!@Lk4Gbr3H^L$MAm`Bp[
%$O8UoNG`gDIb)%#f:lVdS4;4-[2s&[TZ3!UeeUK>LAol5:&_$8B@ATn:#HKJ(;(Z$Zf.*G2?98R=c(#VEhclAD*B!soAO91.:<"J
%\bQfO2>b"aghF-qs,AM^hW]7Z_<**049g;q>hEZ+]G;Kr#p.^n!K2g;7WP5W^MRYn-(lr84C8l^Jm-fi>_-tL:\gF?r*jaPKLc=B
%%,hSL#N;D'!h4$L,*kIq4rm4?9B0NIl9D%IUP\U6@C#s<?OQ1.94@,Sc[QI##3&Oe?P5U*3!Uu`1:kW&HS@5W&p<&DJiRSRS%tlc
%cT[%"gHdiaBr\CYU#g&e^!coCe1i@9O\l9HD:p!;YQH$<R54$fYH-,AXkLK]1so(ISO$X0!q$Vn/U@g\*t#_;h9ZkT0K<V0*#fD*
%>,#MC<5Nu)Ng=@bFX1qYl;Ys7kjVZc'4hfm6<L9gcWaiLU0?.=X`"#&4)-TeIt6BD&ND4]VIDJ8@5B09$n79)@e#5U-Y0'4;(B3e
%>_G#10Qj*jIBUqml47>rbf%:W&gKQuq$:g7<egeLDabs9ld*_FE&Ejc%3uok2W,R7iHD?I,c_^f6V<#@i7Mtj@6pg/&X%=ZP%IEr
%/7JZ1D&D5&_WYIOgBaZQ;ls#u6;02R=cViipid!pgJ7E`N)r>8T2k1lTZLWOg51'9Au*OW8Zsd<_-Mtq=Cu!4W>VJ%%"+F-@%T]3
%XiA]1bBNq@[!Z/=Y;]WnV$c2W$@kHcESW[C((+!Hle*^%f<O))%6-]U%-lc)mJ+-N7IIgP6Sr6a!9"G!W#;&'jXYQSqK1o([6&m6
%PeC>q_YTq8H44*`nLDDV'YdaFS_)h3^l-"ObZjFFj6OutH&');QB*[0?>R-!5$uAIfrG7Z+HIDP?8)^3I[T]2$?j6ojYt=4not)M
%"h-g)>^BM*(Fp%3Fa+cm;Da:I]PL-]n3r7Qd6j"Rq)a)>?o[FSrt0LDn?R-T?B4HjbL:la(%jg&n6/&$=hoL@T^_Mk[0'_],JXD+
%bo^q]9.9=d%g\F+/s%$L$+>k_0"cQsZ"O?-@1dZ7TP[QLZhun7=Ttj:"h%j/GT!1AfWOVr"hSFQNo<7qjuACepd!Jp'>W*E[6XjV
%lGkk>Q2m`YYC+GMrl\6#W-s'T>l6/:Gr?jq_cBQli3D`k,lZpZrlpFP]?2c]08uj$)n.?\qo[U7heVg<j1f:H0uhW)H'*Y2Zfbom
%]PRCq&\0G?0:I3tb0*^iBaKnT:fnR>+C<%^<Dm.SHmra5IhG7Ks5lB1^rp=C>T#p;J<n!diR(+K>>`=-6EhPF76G0^.'kWdZTBMd
%*5\e>%^l[\<"Z2IG37Q*d(VNSm9?=;@XsgL?HE:*i>'-jq4?c[*q^N.QK;8@l&e&WGm9(2i0N.BJ;R;%Y33AKFWIP/JgqGcE-7&7
%fHQuNLIlIPO@gKcJU#:d7J:2fX2L*/k1!loR&7g2dXc_2Cj<32WKIQ@1a6=8?pl,S0n:&MK`BC5U,hlY&[6R6fKRGoTZo#3(`KW=
%"Djlo=0fZC`2k?cb83DcEG&Y&#tOK8EraIRUjnNS5L8PSf%agr>2$hb^;Y&F%L'Lm(g[5.B`Q'W\HR4;J.lDT!Np^&HP'p'E:L`/
%quDZs]YLHL5jlETkAo`=F:Ni$fRs(Is1sN]2pNN'<rkS8JWCT9PQH(#5f*NrDLr9V+;$f![05Jb5]Ugb\.;J;@XcW+aeR(`TgqI7
%"qh#[ZhXY4>LP2)Wn]gA^_)o[Ucp8")PsEd1b,1-E@Sr9+jnKGcp+4D6H@FZR0GVen5%t#^dGZV8,8et"Ts9`Sk<XeasPE)^[R+H
%k,\'s>6SD,%*4<"#`s"$ZGX>@Drs>69!R!R/I,SnN*%_-0(<2kr>/;k5V.dtFN<,%?9?bWn'\X==>:Xi=tNJYPnMm7+<<EF\;04V
%UPC`.lbk^e$s2r\J1's4$t_ZCmY!m:PYgXqVmTW$f:]\gJ:\QQAECWDHf1#8FL?Z>&97igFV*XIq!8&7%b`!!E:i5"D#l?tpi`n4
%(2ejXimn@-Rh+"iJW:5ee?U3%"UaR-!44?[`Ua(n#EVf5cN]Ds!3O(\/sJW'$c"P?pU[\U_]cIa\?M!,)bjo\\Q.]K;-HA%%omD4
%[Y<KLJebriQXU1U>/ATc]CVAb>KW+V6K/*X/:OduS8J@W`)dt<1;TGO\J>H1h@U"4[dd*b[[4=VLNd]h;=O!4-i[kAHlJaZlnDbs
%Eu+Fb#B*qF"*Y1IL#!2-P@B,lj;1Dsg[SZ2bKG0sDJ5?$ZQ2XPaSt\E#VDY6=k'ZLpgWLun-$HZ,rX9#%*R3b49SV;Cl2?\R\;*N
%qo8d^1i0dh8=F'e1j1%Zd.tMqG8iiUf"nsf4c@'j/+Dm'm`t,f-">bieM?"?.;\r$F(eQXr6JBF%L8=Dmqc!"]:Go!=F1AqrDkH8
%m8L`tegdf#c?^&hfk.p]*5k(4?WcfPK8U2I32#'9mBQBO&8%l5VpG,Uf"0k*1PQ=Mf@>u.p$dk5"di3$T2#YbJ+Ma-WU$if_p`6k
%5;C/f>HMF$&j&ep2go*s'#-3[n8#U4(abV"$NHM6$=G_H+E7uncS%<s0TdBR)kFaEQ-Mf&Cdc%9fcZkE'1p1WU>ET;.sJk&;&5(g
%G+KCt45JKPGdLXO]3EH&Y-R*+$qO.&a.m\o[\KK1rTH`DEYaScdsk9:eJj:7.bb1^%`('hLNgGU,)</SP8(rQ%1!r57us9"(9_uP
%Ifd#4$L7.);KO`*0*U@_[%Ch):ot87NN(hAHVI,H%NF5)3SNEWc<2jDK[AfL)%*$g7&(X-_G6kk!L9JHK_;1g\8!qUC^DYF]%di2
%/6*Pu^p@KlVQJ-"]4oRWXEeD:cg9e^h=%*0n&XiN(l<NM2sJO=6]GuTfM,^^GLd*e'l'okeb2,5RjOmh:[R;Dh)r*7l."#028!ZH
%)q"tZI"p'n;Y'j+8m$GC.^A'".-*e_Ct?S.EC9(8QPX,PIJr.L1&I$8@Er=%hhmlt<3PhF#V2/i?Gr(Z*(ec(q1D:]<illkS>gbI
%)24Vj2iD0BqG&S$*+PC9QH>P%1DIk#/_tnsBm'^9.[g'3R3\]qNHuAR.[RbK?$o7K((Mda-cR4P==(Ojf^Mtoi4TKTiH#_UL,L)[
%p,.cOOW>g'B=h<IAmo(-XHi<IFW""J\k]=RO?p9LU[q.[^Z[U*<5RAHiNE[R[%_^kCh50Mn=Gh1W>/\rL3hKolrM:F[+-Ln_M%UI
%<@60QL"SZ7;I$49URtQ[>gZ6q-+3V\PCL?u]EiFAl@2tV)@=Vsd5Dq)Il]*jWVXS'fPS*u@6HgpX6I%nf.N:^IH`D[J5*Z0hdj]E
%+paHFWGet%bYJ+(HT!s>b\=Bb)<sVV=VUmVJpO&_k]o/scP-l/"B3VT31*if0W1BN_\Uj&3*7sM5u,*h]UnM]HJ]RJWh#'KW08N:
%R9:W"_%uraS`D=S6sPqbf29CVnoQg*SOZ5p8Zpul.-><do/5V))Y0M,6dBY-gO'H5"t&q!jS9_bHjtA8L<Mb.Xs+O-25<+$R<<"E
%2%DF,=Qf"io6'*h](%J42IAD7Y8^9R3nSi9GQQ$;$eC:n<3Rk&Za4O2.Q$GK4mH0\XRD+)Kl7h[>dnh[3T2-7/m0BgFSAAcodd&m
%)Lmf<Y(kQ%6AOZCUR%m$hL!,Xd\<fY0.YpX]r0ZZ9tNn.l@"S\;J(mM's`+=CoSsqR4S7f.$N?U1>*A.a`oqRHJXORqC6a#BGFLL
%HJVd&=`)Z_c>"l0X>X6jIH]DA]RDcBT?Z\7);OhrIPs@*P*9<3+KE8]N7B_\n&5.*RfTGV^X]B&VHX;E4XXL3.99Rp@OKq/S"AI^
%+=tpm&Q.:VMS4"6X""[Wgu=L>/L`mA1J/hED;Ejp#8>eqO?ocIk1;$"p7F+N">2cfV>i@q9tD*laXQhubIm="0>,L:0E7'LM^Yq$
%_MbA0YklPUn1lZ0bR6)q_TTU]nuj^Z9J/H=4o9W(VLWb:&tYMo+PjKLEj&K,R/.05Xh/)^NL,SNBpiT1L)!j/1,/)SXN5FgLM=M3
%72A)2Dce_g)ptP?/)I^]\)5oO<Re%>rNJ>ihEH.D;s[V`h)WdLjtq:B'2#U.hEbb_]5ujhBcbOficMg#icGXDcL9[J^Ot"2`:RD[
%Y9Vd6[kMjtD2n$k8%&L)/W8Kh$1DkE&cRX]4L2p8Om'%ElSmE6-:3Guita`d2B*:Xr]F<[G!-?o'0>aJ_9+lMG&M\HH`CrSgKohY
%;3MDGBE#=U)6?(LMiXl3cq.fb+\T%9R:*C@9.ihMS=R'_%Ve?]Waso:0JfSa,BnKnfA7p'VV>pXeJaDShf6AN=prN?Wu>nk1rF@A
%o4pe@AVtDTA\0FMpR@E&A_^BP1O>8tT35$d!!R9f[HMh9oaEB!A<j?4GG_ies4ON7%b__-V=AcgG1j<.^MdM/:VWm@qY]f?9UA>r
%m.KQ5>P_(!c^itAmuR:?C%DPS/\G3.bhrV9m:*%$4J1`4_PaBD>3\$$DJ($Zb\"M/9-T!mHG?!Z8i>),gUY?&K`6t?gR/:8ZOmnr
%A"l0taSZD9@8:up"o5f_5G935?L7Ysf$(<?T8nijk#[X?a$k%?/'+X?0AcQ+jQ=a-\t%gY$M*G#Nq4dBVo(O?Y99J7`p)U4^Xb?h
%@KlT%2N_TQ_FZNVH<68*)eX'..*`;eDA7trP_e)e5k$=?HhHgW?F^aKb]H'n[I^2U3pO.K]="T/jUi=cZc\fe1G$Y=L@$C&76eA6
%I$VtKHMUDE[sI)=;sfg)/L@8H2o:#6eQO;.9_FtkEbDKc'Vb<4;9`!1j6)E@/098'Y%4W*9t)E-1gR`uI>_=Lo5&"[G&\P?3;'Fi
%"3teFfVLKa7fFljiA02TB9oV%]:<MX'OoO.->rQP5&O"9Hh1=W9i?aYrZ2s#\)AYOb8DMnWP;*GbuL/YK$N6Qk^(lQCB"_"AE%gc
%1BVD=f8)Sf?A!.O#!6'^5`*BpkOodG);diDbAmp;/;DX*PIda&$7\(SXsTYr/XlKcqDNUAPdU6u;(JTRDQ&pYMi5G?bHNnR#u>?a
%]<(\G<:<CuRfRN@8mFZk?9X`J1QnN%Y0Fq%G/S3,2T<n-)m`\1ZM[*LLThHt0*sgWL%Y.BQ7"@[U!-m@JqL&+H<`*uS,0A\<Ydm/
%e4hiaSsMVFEJJCVo4taZL@`%J3o=Cl1KuDK#_MliP@jFF8Hon?9sV^DOmp1Y)8c.&Ie12B++CrYI)GCpj3.s4W$cY'>a?\!q*s7k
%gIC)"<NOqmp+tsn=fZP-`Q>H(PHuesK3U=?87c:O=L=f7/^1MQ3NQ2[Sa+NP>*a9$>VVrcSQ5!DDIWteLr)nAbK?[8G>bANnPq'n
%jQs&f)WQ+0mQW-Om9tH9h&Mf=AX,hBX59df;6=lLHe#6P=\:EJcBCSq<inl#L0LUB_ch>pOX5'M\kWU3YkE;9.tcJ?7,&#P).R%1
%F)o;!W\N"4VfV04Ks[GI\s>AG\=#*C=Kc%BdZ^.N`6A(3>.<l'NL?O+BeLaejQakR/2GFBVrK(W'bq$=E#mi#(Da"GflRLLkdk?c
%,MPrL_(kc7f^WhC-Q0'+\a9^es53sc8LiN'[pmX*mY5j:6^?T<lWaW,b]Rg+F2N,1<Jg!Gf,U>7UtKpmHc'aJpFfFL$m]M?Q"i6N
%rEj`<<%r^SDD#.mNi;?hG_!Q`BJhF][DmKHFgJX?qr=!gR9RB6,a_fM\`K;b^0.^g@.A'M2bd0"in<*2;L61n06r(O-X$-U?,I(G
%k'e.8?PnhnQL-+7gldg0M(H+_RGaW-$nD\u(K%UG7`?CG)kFaEPtXsq'E)N"=I@upC)4[@C_,a"[0nU!r[R`uE7_'?3)'3DVf'WJ
%CQnY&h`b><iL<N;T@1B8nR9f3cED%[\E<`:-$-QgOkmLb,iDU/k)Zjo+E[4q=jKXU!=:LY)c*7/Ag#6G-^`L)g!H,[nq<P?MsU+n
%8]DVENU$G@ealLts3-U#I7S>CmON:P1!V'3d;7]:@fAVf"c)mU3H(DuZg^6*g[[&DgU=1IIj4'jf/_,c&q$6Bn*Rb>dBmn(rZoc.
%KOVY;BRZGLC[ZS\d1&gVkVP&"eiDWf1%A(^^/\YmrVLuC`dFi,N<JbBkCVOPo^$02AN)\b_6e4E"q+M=_j#GL2UBpN3EQ*qGBKG&
%rXO9`p31^k6=SY%4u)4:T+&\N[P'hdE2Dj4U+u1CB3ruQb#$a("Vm"J36Wlk;k*C(Ra050)Y8j+ZuK\ad?muljqWkiXD"im(?59N
%%0#'@P:D@Jn2h+WqPWei2OXN3ZX<%.%Cb$;Dc`b['0?/R8k4V(BBC7ne`jM;Dpa9<H;:(s)/CRkN7Ag?quHsaIb%W6ikZu[6dMC*
%ckdp$ntLtWp29.'4nC$Obk&Mn^A%O#?A9S2T'oAY$M/X`qU#%^jEhcQlH]"78`tF<Qo%V5VD$c;f`r\H'>Ab/2c'52$/[l(]A3dc
%c#9PA8KN=aQIrp1^Mh*Io/#biSan%Eq)7SH^1B7L2s+7L9T*/19-%X2=Za*(fCDX#BkK3q3P%ZTG8;A!_fp44WCZZM:Hk5:Yt<-h
%giuP&U\l]!?<QOpF5ur.a`D@;2'fZHAt<PTRV,.*-ZHi"Ro8_nIe65Z2GC_lACrRiF)-?)=X(jg;0G)qr&\6lr3rd2:9A!MMW:,p
%jie,Lp9_.i'5PGq_oa0&e%ZrN/#%UD$t;(MShga0;nl4ROC=!FE"U[e;=-';7HJ@YQMsf0KqFuG)=[Ltoq+!JDc<aGS$fI?>t+G3
%DV1INQ_S?eV=f6o;I@K9P^Udhb/oZBD+(8XXCiqKc&>f?$=UFQRm1L0U<^QB=c''bp]T=,;;@RWqj-@&T<id[Y=p]0od24WTk\15
%=;GFbqZ?pUB\Q[jEKt+m*pY^5?=mSVVieq/2(")G.q6?ZGYGtHV:qpJbi2]fY*6^PK<\HSPEWan8;tSBh1&nn2_9bc<uA:!7$./3
%'H6X64cB*#bMB5eLtr:b"t?)jKiY<ZO2;;ai%'Sjnno\qrMYs`P<qmf+EFC-H)?ZioU?OE@I<OQ<sEah@-E9GN1gFD3@U3<>#FqL
%%(^O]Xjs^oMQ]`6ZO#mIX%Y#CoVNb@"ZKst^(kiJ]`j6dq)7V.ab%a<PV6Wn-V>^D9Y4aN)9TrT[hY`e]=+HXDaHA>M_ZTDo.6=f
%/$<O)pS)1(/SATI8g^7#rk0_h+s&/iVS+B\OI>Q+RI<T??[/&E\JN6[([OT4A43<OXO$X89P[$Zhhs6Ip?f<V7EHfb;fBNjdpA7i
%aNTOms2e90=klr>M3li@Y"A2)[ND$)Bnt<1'=2o'NS.aYNC#?k#]A0u%GC^Z9UjqpS_`UmhUKHTB$mAbW<(;e]mjqh@>Y`7-Ya)L
%75KDeena,cAo?i3RA%gnW:en_kVA6-DWp5;DJn[Rcn5$^L43%#=(6g&g2(RdH/5Ff_^HNBBR*afkAcinHK<@YYFFmGbE)&B]'sp)
%h-h4=<Ma[RC&(f=IA-%_p$`qpl<^Lm0TJ5nnY:fB<i_g5"V=t#)NEH,ptIB-$on1OZ'H%'!>9*cD?.'fn0&"R+N.d"Z9g+ecuo'%
%(Z?krIi`uu+7i^-_p5Ghe-9dBXuH?_ZX9XDMgi?:f*jucM$G]N?lF)g]kZ,m\<F)__4R5j-uiKdce6fk*Ve-`iT_J5d1(`d(ICfb
%IBhiL#QIZgI>GcX@R]P[0Dr3]hnDJ4h`qE`=8VVYf.)"&huW<C^&jD_LO]toCZ:ul+[?<U`ZY>Gk?Q'4>RLS?FOrc_FO)k$c+`Cr
%LKG/;,6iV%W,%g@rr@.%QM0i@*56;3+Es]:_:6Scao[ZF>"%>uB55f>e984Fe1op?Kg4K)h]4[al1!M`2geNdbO9t@!9G3H,s"KJ
%TU+[^3ul^lFQ<K\4j1c2L.R5]/I!qGa(&ImbL>>Ff>?A]N]f1`?sXR83Src`LUF)0M)]PQVhbei4A$$:NG!JE)lc7EHi]A8Carg]
%ne-RRe0:Eo(/U25r)6MEZ@T<?C]EKYaa2C+^\5j'W4r%plEWKjOs4NJg&%BrK9&bU+5IP"Od]^`n/ResmgnpEILbdA*8&Rb"HUZN
%4l<\HD0LFrDYn_*#Pq/M$R$6HGkgUiZr+`7rgt*Dos>3u6(h7pPe4H?U_n9*\-j\1A-8hHr_/%6d%J>M!tGhPOeHh9,lb'&q*VIs
%$`4_87]%C<-]8N$m?=/NX1^PP.=och?u4C26dng1S9\#'<nZMB`il:-?QeTAeB)b007ug_rcBWOc#a[PoW'jlQdOH;$A1`irKBS<
%cNu<]hcr._`p7AaRUHRgJrtc!'5.=;NP`ialt-:q:5=oUT&jk%e$thJo66rR]$_'C*(:qVL*jO.r\*p+E;ZPQs(cjsQR]Jjrgj2e
%ScML@Y#WZSa,DZ=]'eVf%oW.7#>nSBJb[l\/Hb%bPh>A7_ki`t).W1T]47$l0dV&Vh/IGbES[mEAUB:Q"%@Kqg>juq9Od)lC6(e;
%drX%V+N]ht-BB2RAA6G.L"C%6"4>+`FOo,\<AWF^KE9POdaSC8b[U-33qbPXl%gn+iCsIq=&C?H5fiU'JFWUn0_[)lDN[TRPhrK5
%QR\K.78X5"nXVGFWQ3'X9i'O0G+.6IFqD)D;60P#[S^9kLt[hl2r6>#oX.UFm7-K$EMk@:qJ6ds0Do$tnha;=h:BLFSaQiGSZ)>%
%N]-e673R5sBc(#Y;M*Q)gXLfn-ra0,>2"EUC.B:=aik2qE+71N4(8*#)kKRRI\YS58mUek6Y>\HRpi/ACHL7pL-g"=(=oMQhR9Jh
%I4<F@!3+bP[8`0j`_*S+9DIdjC4<Y@L^>Z\ZAD!_bWIInF\WlaX.kmLnct.fV[9hB&/Y_LTP0[78FRS6p[_E17Xj^6kH1[Yj8(ip
%%ZYCqp@-H<XVDWh`cb>n)@L(2/5a!$>%,,#$sRtc!PkI6dFnmma3Lk45(oY1&HAsJ!N6S\4n\RCZt@qn3GhjNrQ,c88r^p1\FhZ+
%NhZPqZr3aS#u@V0C.Ca8L1@f,%'10.6<O7*[LX)rO`J'2CRg-eK;dJ*[?EW"2W=_s%b4+G%j*ZtlG5d33j/CtTkC5%1`NP,k%B,^
%<3j1Xr>L29eIK49-=GTZN\@Ct]"O_5X,1t1M1Q\!YogC-c)?SF(>JoPSY/h1rML<?l-#/]Fg_uj$i>MKj\7[%3bph)c_r`%?sPjP
%N=G(]hW7IIG?U!LfTe*&,H'_SM[qK>c(J:A8b0LrfRS!]FFZ1W)SZA@0T>?]J\tnqHPL^3-GV3JD&1mmnDGE6m^pprLG^oVWSVBN
%,NL(E4]"!+/DfV'SJWSA_'lC/WYuF.<32iOcK+$t/1J>[X&8*hd<]J)Y#UsaRTLj2&#f@ccpWmc'/`OUdUFPFq'Wcg<s*jVfj,C`
%:=GGbfT:-AUsVGZEhcWk.K`eJ4aZ#KUlTk_!,Dhtn:c#</.V6l?i`msLY<4n+*n"A.bkYqp;u=$%GV)@jp4cC?Fom<oP?nt06?O&
%fNB*S]"S8)<-qbd,dc1'FiO#B]@r,%UeeU"V:rU\-LM0V(ndWjKXA+\a$h`U;+qWJDCC[*IJ.sj65:ZpUOXOl&0cES<(&aq\:9#%
%NXKKKW,V=aHbqNXVC[eb$\@YfPSasSB%CVE`+d*H`.KJ5%g>asfB>YJ4T,I/3M,,Ur)!kEVlJ/p4\P@QBAXZ+\^P<V.R]J^QLJ!,
%eGd_aX399IR`EG$=cTD51=R/ps!hhj[eon?"2IJ=heblV=NhVk<>Fsam6Aj#Wt51qj$Uk-UCKEOE:9ZmJ3faP1QMlHEHBf!cXc^5
%P)hk+ENqkl2O`aI\/pq'kT8se_R/lq_*-Ns.f(*:U.04Z`9dS^>tS;S\b8HoM-<c[j6c4KFjTs7@Hu5\CBb^:E"p]m(JqTY(+)Oo
%W^l5\I(SSS6X;F(N#",2GZmPL*\l;M]`[miD+iO++W)[@i36W>[:\a+Ok?lHRb^laH\4$1_d4W$:kg\dWe?<e74J9T`i_UlSU`du
%[!Eu%e_7eZrXPs4$"#6tmGEZe%co/leX,aA)Pk*/GMuh+JDY*"5Cd51:+]P(cGFJ$_]28oj6FJ@@X$3q0b5N*2Clk.>!4q]c-"[9
%q(cR1F.h#A>GC"'M2+i8?I?s(N1<BBnd>5jlH=h!"aX1P+=L06DgQYFka6*ZGKc/*W/_j[G?..T1fh8=b%iV]'V`t%["Df$_c2!h
%q@jWA6fT2_e$6_F=bM!`(TuEA&7J!Eda"^3c>k70Q*W3%GAE!RQ]@OleSgPm_<?V&`ModC%i%\p+KM;sk_-iRU3?4BY1>Q:P7IJM
%n^B47NO*@O;oc,eA$o0ie64lObRWqO-Qf7oYUg0,KF[A*WoP'M9S^K,F?"5I).#VW.nOFc)3cF0@n),hB+S6P1g9o".1Zj,o:2%2
%@rT56h:N24Ehe=gN:q=GJ`9%^l`n2F46=dCGdbf?>5?cP\:D/uYW6m6::6D1AO_`(0k*!%328Oc8k(lBera210`oUG[W-r_p]3\U
%44VXOiE.?J46;8]1^3rhJdGP?aVm8iQ=(h6(ao(uo@D!=QM"sD4g3G_)Pd(jNb]>A210#;/tIa!G4o?+,@PFh>4!As&++PkXd;OH
%;S82a>MJOB.Wq#?KrOXnYKKcET(Hi@0&jrcaInDN>^W#&b\>,FWE*\c*Cu,R0-22'm=0Sdr?T8^2OmFJd"<;IFMcBT.I[fgMpW`M
%f,GU=V*ZFgaG*$APV2^4`cZI+.f$BJVNa(;M_67>3TCGRKBSm$W`i+L2RGt`bKdn]cGKGRBR>7mjd9fO@6P?7mBACL=8T;W"><ll
%*$Ia#<b$l"6%[X%7h'VBh&sFJ2,6*H"DI&:ZfDJ@P@EO#ofl;j5AH`XrVSaYLX"ieONKq0/ua/'cgfi2:H3aMNm;Xg^9U^V5=g5V
%L3G,U_S9#e79%#YFq9Ri`\3J'YgTX"9-XdiLZ-Qm(P;K5Ln!9H*fHb16?iuoi@MCTonWF`!'NWCg#;LiY(QjJ[68t0/Vm9U<N<Fj
%DT[:Rn'oU^ougON!ts1E<F0]kZ[Sn4AHb53(GEu(e;B`(]miVNGG,6Z+JI%]-)CNK@<9o*MZ@UJ?1,%,^"du0Bkcu0q4lL0rR3@i
%iSJU(]sVj&Z#X0c]+s+L](i4#%<LnAcJ)DHkPiX#gPm#]f#s>Lc]<8$>MV%D8n?OZ0J)P(Y.'>HMs!n/#OAEtF&1B=Si5?hm;;D&
%VHI9^\_E:\[Q=6U=)W95f<"2?:jr>;>g2:NSbLC:;u$D,dUKGb69f@0MVl20XcLY$rN!q5)s!`7Z1PoDh[PIoKB)n(g7r/FVKetV
%SIQY,!VOb%]/Q?GqaZ@q]A^)rrDpY6Y?_?>elUS9X/4h)Kl4-);)s8C(qkN>-[X\/fp?3;YH?F5YFO]-3e[t<d7@-qgV[LRf_Med
%p@?Tc*sdC7(VZJjD8<W95Dkqqc+Ed_p\P'mE;=sR"7\RVFC?*Vqr1Ma<4:[8(+u\PeMVimI(5DjrUejmHK!9+TFc7<]Qgo.s'iB@
%%PR?VFfBJkF2=b4oOf=a<?HTmWIE['jD,,V+"asf5'Qsr_hUGfJ]I)W>8JV[j/fulZL6>fO04e?n#ejL=.c*d.=Kc21]:@"doa1d
%1#aA"`NAhqTH&@od:6+YXAfSR6=@+(qg<DZBp>gKr@<oGLRj.l_WKSNj3glP`[e?PS"H5J05.'LF_U5KjjOPs^&NeGqkCe).(sSk
%gdef#EfQ\LFX5Lqr8hF$=U=6'b)U@e\\D?r(9Te/mOip(iA;#cprZ'7?!nTLo\QIaIOr/<f#5&*j3fjS?[,cN`^_6qa<jIIH[Y.t
%MpbO%I!P]r%!;DpD7/s5oiK/X(h+>#05o$JTN?Rm#2r2VK!G+K!..-MCU<KlM^OJ=`Mia`E]uPAbPkB/qbltNg%LJ)(d<8-G>@&0
%nb*dU^\.=.q>K=+@J.\;O"W$H0MUF#E-/r'qU)9i/=dVNn+,%VIkN4!5<^Mq^H9bBc`S&/K>Q:T").Jh)l3e)7P^Zapu?,DhqNF^
%*>BSs[Q/IUXgne3#]uNG2bPg]Kg.Oh0,uoU?Tm]0o8g=@h1"F2LoX?=1?3fKXrQ^<1ha(C=(RX\<Yj!&\$_Pk4nu[-1-&J6[MBQC
%7\2_Jau?u:^&1J9=(SOF"rEnu([WiM'4R`"C27J"5M7fZgoN(b=2+osBA5FR?T\*T*^BG2`Z[oP`9A=f;6]i"q7(D&**eeqG&fkm
%YFl+B)U-hRQ7=;]l_%Nb%fs6<Nsk+eV)DU2^HM)N7rmD.L](;^GH&FID3U?YSpH%Aia#%."dm:og8uoWZ$G:Co/e$H#JnTp.fD7h
%cneLi'%+gU[G*>uSc.L:IVgqjg)nGbMiDY"h-,CKi)MrK8k#63S`RP/bkC+V=7;`d=c:V?24rsEG:H\i>5_aE5Iu+>!63YtM?dg\
%Si0o=i8HHij<'mt4G)%r4Nol[3u>bU4t`EiHK>.>N=0V:9CL`POqo'Mf`#o%#4(HuhkRmb<]mcBNr?Epj`\5m6iZ*.;pG8I>@(gj
%/b'3.:"#`?V6Au6(Rrr_D8TIT9`<"a-_X-Jn1BO^2Y>I9C%;"[j2CQ]*(>Ebm*KeR0KSRdi-nm6h/&^7r@[!:o1$4_aZo^3<=hY`
%s4dD(X$R<-I!Z+l@-:tTpt.b"&%b>4Eg1]9Rg(HGl`Ka#6d@Ge;;YZ]I]48D9"2_8`p(IC"/EMVp!P6A4:1Y^&'mE6fj'<)D[qbI
%mSQh$I;o/eg0R/0Kt@N^%AmP]WFt?7'P,hW%J]O0TD`:jorZD0;;Zihm>F3KpB(8lq!dH/%tDH=I=(M_$h<h.rfFN22LP!!=6o-.
%$pY<up)>aPEnb4,apE:C@*$\2UFgq@$%FFMEO<']#$p*"KKl+,A/^18-c+2mR"ccIH\9s8.`&U+H2)H.,UR&mF!';^!K]nn*'D$K
%0K@r0EhY;BPkJ)!agi[O3!7&kR=@4fnH%SO+S;dsO'_G,:=%Z`2CkD3,kqe('YRoDG!7bcrlMj&UNT3Pa/2Gef8&/%]0#RWPT*A!
%"=HJUpr]JuPJ.:Z\QJE:&h.>n$-4Fch]/FeBAg*NE,[7X&l(P`_%hNTnIgCJY`YiA$'T*"-,!)H)?#hoR[d,h)La$nn$YR?hpdc&
%R@-OYg6^G_GYs[8atUsm1t15]j@-k[8oSf?63QMhYsHkPi>kRC55[\j<FOfa@m;t<a(CE4`U]tO`CQ*KE:ktH6W3^@!S;a3%lf7Z
%Rj`"?q-A/7VGSTE8W_$<_Ll<TL;S[,APfm%Vr^$<J.)X\7lD*/&6g:h:drh/XDuCM1OA#i$M>(P$S-aNk&WROIGu?^gTJFN_>9qj
%#VqT"U3\ZBYCf&(h[.$aITQpE507*odHQN="-VaN&7-))f8oC84YKdLSe*421H`a2[e%ch#kT1Q@0$s6_dfF9XmXWAY&>IK[Ke1%
%C)$@=@r\RBjBGESL+"W^S;,](VQN]<4oDgUMB_]ilgGlHk)5MYc55VIH`!L;+*ReD?@V[WphI'_hr"EP=AKqH5<Gu+Y>>AQf9Y[7
%imuP+4-cL+2N6nmLd327H<uQ%P]fs7*X'=$j1?*9#KWEqIe`f0O$=jI"/CkR.8ST_?JJmNk-/:^B=I13GokC?-c0M9g2@/jf8B'+
%RbnPE)0-q/0j]8\L@pO98:e3%K9?7Ll_3>Nh.Sq#l,EU7Mhcr1P;nt[i?+3OE=]$ZU?(Bf[F45CS-nCJVh,4`"OVt%JiF[FDne]p
%`NqMj_e7Nu:LGMB57/BGPMH$l3kJsV)9A:hG'j/C'OpTUiDP?4RI_Oe-PU5><UkJ4nOkJ_Dp0:4J,B$>"&Pbh++9CNRbpOL\@Sqn
%=pYP$Wt.nnq]UgiMLf,nR$(qf%=3IG35VV?r-UM%L#1<K9n="EDWGTYq55L=8a6p=>@`"V,Tb+<&9p.Z$Is=M.@r,@g*_sMDna(@
%cbup!ri&k:b?r)fKWiJ+eL16=<*uV0eT?4T_q8EfX@L$E)HFb:kkaT<LO0ubHP^m9&QlkcA^<TrW-ehAHeot4Dsr!W;4]srp?DB^
%QULXN7h<r@JQV'j>-@P@Ge.#HqGQ*V^"']=CTZqE^LRGKl7Z5R@<tu$cb.,lW-<>J/GOS:r2[K\c0NBu\*[:C^Z<1dIer>VX4thf
%JKq6+rlA)f;-#Z&''WW(m]?Q8F%`R3.i7j(9F]GZRXN9,6A'VX6fd:hrPHP:].8u#St)VGb&-;pGF'@)/$OM8V>9U<In?6h9b,+U
%O;+J%DdMUB;;N^#ms]Qcei!K)W'@f]9BF>=%iImMmk$0u^7LT2"oauc0_QH((?8)W3;u9RX5@jW=dK)(pY`B=K:>H'ZJR;3L?p;<
%3&MCO@rqk62#5[BlkRR>Yu_;OB7n\N@t>[q<e19GhRHgH5S`.W@1h!G2@A3HhBB/fTrQkRI'mq`W;u5Om!ajk>]nhDIH&/2-Xu?W
%5H_d9SDRWPnZj-+7R$,6mV29_="$<NN^,PK58;FaGAU+'k?G's^A2JQNEH;@ZUu`PiFu'<?!chNf?r$IkFX=`Ca#uG5OsjBH\]Sq
%6"P=ijn31BEFF^rnT+-:<sS2BqPEb>fsJb:fCtleSg:(f)C?sbm+%/AD'Q-S^4jDH8t[L,jVq<01;=R5[i;B%DjP_W!Xr_F\63-a
%")UOV![:#D+?V6G?NeRO@<_75Haqf-=?:l-T>R:^eWnbLX4>Y_dDI'jn:irj:[ZWJ#D^.;rJ(WoahHZKEr0PP]+eoZf(m0/YgL(<
%jfhf?ABE-KkaNkEjPeD+=^,-L/ULe'c'.-iIX*5Sp<:*W\9D9bO$DuT+K.%FC+QTqoR-OYV-(;!SgIA<L5UuJ3$',n3j2\c"-5(+
%>sr&7aT3UI..D39/uWFElhZ[TJN!r=j(.""/`4f5]t?pZIBdhTDf:^'ZK_:3[S$D-e.*93D_==)pHNMC/sTd-[#<\.G7VCcL$uj(
%HY_e+lRIif^FU,"pDu:\+'2&77)&K(=$U`0"g,T9dq9K_n'9ePOjd#^EYP9#D1&%<TDA2]0:V4q<H-itk/5X!J@tR4X<'#CdBR)T
%LGl9Ee_[K^SiaKBKoOD+IXU6nR'*?DdCA,r.dPs1B>4Y^>hnu_Nn/]Y@CZC))8rpE:ON"a[BRAcr1aVJcstO`r$/u(V`2Q.r/nH1
%4!4FtX!^,`[@l;UjQ4@%`t[QCB,Q$$T:]&Vno@Zk['ZJcp[8,&dJ:B&GjmosAte07f:O,'1"LCZd\E.qlYA/BYPkrV[b"-LO6iQG
%hOt4&4aYsRs6.MC#mpInISfOKSAUu\PG#G#9DZ\B5@&1Y+2%a;=hS5.0bd\GSI)mtl@q@HVrD=p2!igZmM?ZGX2%&?*u-EpcFtjo
%?<,OlO.TY70Flg5V'caWoMU9bpp8a<aa[TGpRou,l0Ys_\%hV+Mh3XOA94GljWq4qdC^UBCY_5AI&[t.*knX_;J<O?O4i78C@lZK
%@Y!5nkg;<)p,mU;'_:)o%,bGZ^ur1!iO;U@.SItNh;\8/cQ=8g=Y,o^cJpchJ$F-M+\,^R=/37#>hn%]q]9S>X(;k0:E+"*=onTu
%oROtfjnGt)!:l*Z7%Ne]'t9d(V"AfuoLn`@W1HWdKk]+E'i//A";G+Yb*H/RK3Y/.@"._F]gfQs]s^_FJ1^Er#XV0S54oE2dn9G,
%LIUe#K#M"e7c<(:oZb[FU46"s/XB/X:7h2U"'qusD\%5Rrh`XY??^`R9lE8paD0`HhE6+V3"4>(Irar\]+:#7L#U\>1O\1<p;cT-
%cPXe)0A]kYhgTjZ'.e$>GY)WrYj']l/BXQIrl5T,I+(aMn7,Fr5(Deu9\[*gq2MN6/Dn."q`fYQU:jgegr."l=h[pqf"U#4pYU@G
%%Dbqk=7q-9Ig+fJnH4nfLum0Jro%S_/1B).]M>%gGr7&KUm<Otk9$62.slGHWo*9c@IU2XrmB-1E?&EUE::mZ]`!kYl'!a;k"Qd_
%B)VU%E72:HQ3:"jjGCW[dt"fSrW]:8C4a\0aS/+G7u*Er.dI+;U!K(Af>_T"4A)NpIXb0=UB9UIZgo1,g:TX*co?Dqs58S=6"&g5
%TRLPXACi'U7g!N7oo4Z7PT)Zk[s)Z&7tD00!53$r:HdEeCMTrkDKJ]dC;RfO2I@uCP)8_HDDP`>N4oI0.V+*V<U"P3kVi">>cF%h
%rdB:0\64++.;g^i#/U^`Y.m'P$j46[1?!LVl9*k7/#V7hap@V9V,Cl4dHnQ>?4`%gM=#09YH4q@[%7>;:<GkrHtDpQ:g;`cMg<95
%EM\Br:SgrQ>'^)>Zl=Di9!0;lIqaoY@t#=3R+ShM,fYFbq$GN+753NAqbCe9o/o"3jdmq"\Vq<Y:[#sQV*c"Gp'R5`\8Hm9YsR>o
%oVg^da4npfGD"_gPAc=<3""te)mq^<rj#E>Gc(G5&\@UGi=u^L4eQEOhYPqFo.*AWg:__3S\p,NGQFdLo-l<"]jnT#eH[$q;+u9'
%3'Rg)@/ZT35Fu[+bD#Gkpn[bf]X#.[IKK1i(h`Tk:rP>MRAZ9DPM7,O5LQ<FpKO$)JO4e8^H"ONG.$gf4m/goaSs)RkC0DiJA:]:
%Ms&ZX9+^./\l/Id?1o=Jc).l7:iN9-PC#E;HG9&lMl/WDcbFQTE8/JZ9\DU^?i"_+Ip%0k^%ARWqQX[(*3[1aU47-k`HI(\2X,3)
%]A#LVSikl^@SqRBd:hY#W^=GKpX'$*aGX+=7jh*@j"_u,o6YH8bpEC_f"e>ml!'5g=\*,r3]?Q:A`IIaUO2Xa5A9D2_]_[d0k$OI
%W]Le$C'ulU/>ApDMjr[oo6.n>%(,Nkdrb95J[?r;O%%ol`Nr&f+/5mM!:T0*lh/,ah;Xdi\U71cGAlNR*ug]1`P?olOk$-1%IS%>
%jPT_CS@mCT4-UdD.g*rH^jUXu;5r?a#;J]^dtKEt%93PfI(g,?2"./5gY70tN*D(;+@_DQ4VPg;SZJ@C>EA]:J$u;5RiKN,qmp&?
%MPmO"hDYF,)N8[I^:M#0!HEJ_^,HIFiOja:F#S?NYn4S%E;)7`[_uOTY9u5[kGV/q+-"3.,&^AcK,WlH;cL>2r=dpf"_N2'W!"F@
%i)N[I=aSjSSd(*CG8KL`p#lM,#k/&A+&qGhO[XD3eN(pg1jlW0iRl*-ir_I`QjsP_b#[A%0BZ;>C#mXAY7Id\bclM#aKGg,6He3^
%Gk\IlG-\dXD"mN3XK#c4]OeLQ`quFujiLGOkfkkjs/cZ<J%i9tf]FRVj..`dG*b;s]^t#H4e(:#+"n_NqnErhT#('E`$2fn:MT'$
%mrgsgIGM)\og.1dgEUp(Nn`sB/mlRjg;I%9pp)f5?T;T&m?u[?Xk%&Fiu9S0?]K4A(WHp<HAS+BpPZio];ItZg%@OBhlc>#HiK'K
%itC^*e-_\iW%rZu$[^$SP=KK%QOq(o/BWLr;6,#NMcVBgL4MX;fEpl/Ya$5`r4$OH'Dh8m;uK`Efq<,:lcq`s\;29&*F$(gbYDNd
%bWB"M`FnNe[9i[6M!2g4e%#nG),(*K\I&$cK;'2rHu(]*9n\L0ihC2cmdQFF&#G]p9Ma_1^A,s/AboSNS:b.f(a*WQf4.*.G4E%Q
%.0GEbo[n`bn3,=?AUB#d$t<1-C+@H3$pbkYQ+8KG.#;<RcAGM(]"BY$?;ILmW,Z^c,s-S('hPpQa%J-h1/qSUaA+H))6j<sD,h"9
%C<=2./i<^GG]nfFLJ(R%DC*B'>o@#Y+&ajN'2X^gV6>u>a,QK0=VVID.o8Klc$D,(@,eSGN,8tFBhe-HOn-lB:fX)dSh_XRP'WBJ
%Z'`tUg8F.Kb\/!6,!E;D&t0bKZDA![7dY5sg)P>*Lm/c<87)]be-[3akGfsNeMRWeS`Ar+>rDI?1DiV,YCi!DpVZT91V%=;Ph"i<
%^,kh"P'C)K%?mLhGZ-/dF!5Aj>@U[.d<E<d6gZesNUfN=E>93-J(OL5QM^)Q1[llgleP<LW#t"XgV`nEeN<[+H7ALHqi+c:^8R1H
%c3P+B>2cY0]V$R]11LU0,O`<VN24p2pTtr`Jk!FpJ/@li?kS'Vcucm'+*C$-pfh#5\h/R"E<3)h4jcaJN5\%F6lUj(+>H_i)KMI0
%CYha)1peLgF5VHciXh,Ull?)m&<QhGBO,3[A<;Ftj?=OB?>-*0*.L>_;9C!q@'a/D`J,g?=tnZr%ah'/U/5=S#T9B5KD;a/G9-0K
%)aCZ"PdFkJ\^`YK4$2E).#uBN9Tl?Y7M3Ve&>tfa=o^?hLPeG7jqJa,$G18*ZN<h#SlOeYrN=0^eHLt6S2@hU=uTcB8).3aXF1u1
%TGtVi;=)fmRi(]8?E&-CZ%lM`/9c(Sl1"M><&!l&;XPJeP"@(Lf9]('O;[MWct=u6-W<Wl3EhXXpm(6]`nZ8[Ll"sh?kcoY(d^'s
%k^O$TW1<O,goYCIB]b]Z!;%Vla&2^$6!7L8GV\cp:^+a3FEGpD3j"1fg6cQ>@J$uK0e#6M\WOf!n<[q5O`EP9jN:Hc_"FT:QWa0g
%#Tn;2Y$\4M7X.P_XT88nc*7!9j*2_mV\.fl2P.Cm]VI[JXlkgM$i!ON]Hm32nmF-5:\`u0%.SF"r(B2t+Ki^*I\tfN\oWai4C].`
%V,Ajcer7Z':7YCu!1uPQ7X2OJe5irj'2ROS?CTD>i68\#%4r1i'7?/dHedHS^C`<;)*`t?\@QQ]lj8V)$@@dV0d54;_"!8!\qpr3
%Es]6jHnq7*:rg0@1Dh.Qb#-KmZt7_:h4/,(Sot:^[[kla#T'2fY]@0^H(&5hTE:^QZr,'k?HtGK1HF:=b&FrNjX<!3Z^ETYbL/ct
%1f;TA)'1]@ZY^N5>Sfm%Cj%_+aL,/,a[&^,irE5"dcP3_G$n[)]$!jH!1]m4a\2[rCGUnP+AWr03h1XWN5^^uHHmk7m<OSYaliUX
%8DZWWF[I+afe30*1T&m/Ojel4$n=2KH3PV$XTMd5LLRSa!,[p5[6&k@*mGRU1(r4n/Y\/?QKKGfW'p_mh9te7c`h\aS[2VE-tpM<
%Mt5!Z!=ZPtKA&#Bl[$4oaamD'%<r;'F_.%:J8Vg_j`H,N%VHI7=ctA.$1L5:ONqrQ#-)0qSEgcF28`f9OMNiE(i3.V#'12"4bdjZ
%-46P&9u\a=K:WjN$h3`r&/k]%L#/]PRlu9?7K=iXSmsIB"LK=2"8iC#p!<3uT0Eo&oH\'OP_lR)k$6ATR#2>dhFTRL+$>L3T\61F
%pnT./+PSnC4l0uWIgh4o"-Sim*jCDWK=9]Z9sGS/@\R=W-pFBInR*me7)h)%lgS^l#7q5]2LP7Tj2niJ(k2d%'"[""0L[c5kAW$o
%eArn/h$>^`1EG-W@_fp6QnSsVX.9=p`gB0p5go`/e"*"EH]De2$nuc,Xt?eOLer<=(?i>1cD+WKi%+>Jo<sE*2-eP+45cuQe9dOf
%a^HI@!q@]^D5#YD?#;B1(cpb(GB*g.Mi#[_WX'FH?itBgWIQ>ZW&BHA"X\%H[M+;8KE66c4SK`)(g(PU*G(;[jH&T56-h.*Pf#CF
%Hl^sNQGCL;>XL=e^fCp;R$pu2;4[\(Q7:&m9X&"Qbs3o$$PQ6g9u6%\!3F<+!-@?V0\QTnHCjG[2U?rlUNd":Q;Gj_phK'/Fk=oA
%\m^FRC3kDu$T?6F/IjOsNToTPqucisM!fiAfGRB!*Pi!d1ke)leKd\6_$C]j5BW>'!uKWhJouJ305$*!@d=m5E#5/4M@=K%>c"M&
%@]kGtM0N8,cl.I(d*RAISnEndW<qQei.ar_UP-5BI!/D/%;Chgf_H!(8m$W91(9X4)22M-"iN8`^mUC;hSeD3"iSRf_Oq;K,30,Z
%Wb\Bi!L_t\Rgp8Kn0#rq,a,+TS7A"(:rUY/]%cF<<,2VR`!'Q\L<C0A)arkl*sU9+]RjVp@rHE)j+84_?4P;f5U`$UK#_8ni>B@R
%*SjJlhmNVrjT%Wka2HO/\`2h+NN*g*liBQr)&sS4D"B3EC4h?=VgXMA&/N4kk-Ep*i"qFkTS8,>,RSjrj;&7L'_FXSFgUKs4m3bD
%U,t2kSrpA+JuRtMl&KX:q+\s>H<Y)\d-Pct"e@f;=U7W&\:mX2&@35k@<!0Z3jJI9"I.>t`lPGOI$l99`%5l[0hcGGZk`khG1n5f
%*#liL!CBWHTrAS@i=^YI$s&.6GS4on?&P+!oZSr+C)ZeeFB]$J::U&8<ZmbURU$101mDg4k_V:R`^jYP6b,SKrj,+_,>l5]0SQ3.
%2f0=MfEAV6QCJ#aj;LZB`)Wg"4tBgC_&"%#VlC&p&0`,(:Np(gbQ%d'PUVrYJ27F=KDUEHP42Qegof\C\Hph'M!%(e0l,_8%,)['
%_G1krJeX$i+VOEl!WaGHO5\K4!/$[[0YekG`tION7I,nLL;c.VZo4&:GW(3r157R#TQ*$nA@#E>K&MrPRT8B3#"J.dZ!<j=RWa\u
%P6Ge7Q9*_"UAj\)iL5<#6G\:=$f)p2iYAr<&FiCO6Q.-81;o6NB[q6lLP3+cAropsB3?1lnZao1(:U!G.2WRb=)cdpfqYk+EDT&r
%%>$T5[UEQpD(r7C:PV>g%gZ2XNOG'4:mW)=7ST*iJRl)6SdR6n+UMat\n;Y4,?QMuV2Q`=77[K[6b)B2B#Cl5=MurS2X5;OHO9O]
%=U[kXkVDmCR%npRB,PBtlZ%'b1_+5&j3<Ts&CG<F;:Vn1)R:`A^kO^l[d`>85<\!!*+n_'@7Q0RF(.D@7;O0:)&9CcX@M&8;)94L
%$_B2mL/<(!Q,Rma>`b_#[Qu\pW=i*<+Z6OL@/2[4*X6.lKZCTY-Y,/`:^doF01W#b2[-"[_,VEf?B9-*^f/B6#;!2>Lo>fjD%tne
%\WHt3JOl7L<(tG>MoR,OmlZf?%J!_iEj`c3Jm*[a[!=_,M9lI((#Xhq%?$,jZp@m8q$*$Kd_Q5#51\[=!GhtXAr(''`]+%R7M<0J
%i'+tDJM[`XL=<\B:j.RFVfGJV2JAtb"99'\i#4N<>QK+*A?e$c(iotrFYppN:^9o+92NV#7.-(#EOc+&YFCnm,4)0SRk1%]hFl9]
%bVU+e&7J-7C5@^iiJQeC?l,Wb[YVhh#0f3\5]e53`i[nS&Qc=W3m1c%1e+"E'QYAa>$ruIg<cT\4!2toM'rG=(^(m2bqU3k@\II#
%Ms6&](=!X7o2*ab92=P.ER<uZ6mQ.qOHc,'G[1%UFq!95%E=X:6ScYa#'3q#Eu\nGS?26m_r[#3KCo;iee*(f;E?A?0XX1lrNf1E
%MtJi2HX?elY:VrhhB0f2d,2t3#"1Qt&@,#*>AX"XreSg8%+,KdQj#Y&2PfqqOFX20+cguN6;J^,WKBP9Y,VUk(8fng3Y2A9Mq-?W
%+Cq7Zipj"!d5B7UYUg$HZhTbR4baW.-?3066k!!`8(;N1D*T)[5j])n(oW)HZU&S9J&k^LjQhX5),UW-P(Ot(ITGu@(du6)U<o/_
%EjVCU@!$B^/<E3Na3(A6QHM^W?lM.fE-6\daO&hM==q\<#pTFA%i@8^eHG/FLc?\p7Ct)[Vp^Ia:KLKW!)jCZ`MOIhlsp`;MA+'R
%80_U8NjUAaBT<*SDX&j\OfZcbD'0(Te^F_$66[YFL281jXW^<N8i%4a.<?EL9I?uHB,84RS:<Z2r?iHl?d^'+8],^"cP7$rLm]E1
%jC+8Vp4+SG#VY>54H(uAd)oD,747>-@S&QpZ0k#>hDRNWGa)eKAS#\DC'JTM[F@ks7dsAM_$']Jqf3SW"1>sfpo"m<LGsiH'*]uV
%dkaCUMh-oBjQ,erLE\R=NL7a"7n.*b'e+ip*9nfr#14E/l_WeeG/rO[LeF\^fYgtS'fS1lEOjk7&^3.DaR2*tC^-O`Sm@^9*s$K-
%7'i"n"7tNp6pNZri&t?j:'?enYQV,+c@hH2Y]cHB'_Wc!@7isSa/m1R11tU2=N[*bS\aTsU5i&_?j?"8ZfBP-Ba-/59eiZr%.qEh
%9UU^=^q&/AWnr7r:9Q&=pu`\#r=@\k@YNa@LZQ46;0P_'@?0BDNB5^&0Ys,r`)bR-=uCOQV$5Hh*?MC4Xe=m\i>H@!cKYhrXV@Oj
%`$JN]<.I7<FkpAn%KWkL\6c@5#:TaDZW$Q:gb?#+Si.B).PHCPbnQp.&H\uW5U@(aCNUuteMad#e=8"XY1aj#96,FI=gaWa(J?>Y
%N%=&0-;@WZLD<\B<#Ys6&DL=#<h,<.G'g>N`((Nj<HTL!"%]MX'utd7:gF5,)srJnp0)H8=fcfpAsfD2BtKBo68V>L/+*t_1gB9_
%[6<XSP"?Wu1*DT8Ln]C1<.0`-<KGU09GPRFJ521(B5@EcXZE`02O4AK,A$1X>hD!KFIS+9O54UO+^29Ia6U/5O;ii"YZ(6;o48lm
%%i(bAT50WsqiCP.T\=2]0kId2XGQVieLJ&K-X`dmnD%@IO.p?7<j2HlE`(sbPaNqc_PfACXLH"HJ.[I9eKd9fJ7?MnbT7!SZ"V3&
%mb!2F'sp).0NFRGFM[pNdY`a&C:QJK!/TpG^c7_b(Sk12S3R1iW+FC`(P$92e8fk@!%t$LXMg8=E"CPj6mY@1;'!iBL=>/aW.@US
%K_2bSU_?;+UUgH1PJboTd;uTNl_/;\eSTD4:6,XQ\6DJg=^mc'=nbJ0"]1atQ-)_.)<`3&?5J-&2[m=M"[Fkk1K#h*GGPk:*[E?<
%qq4;_'pIs/3NpL&;r"?]'%I"j'=H:@&@m*f:D==7#&=cao?YKg1[h$]!J-'iRbAm)r`OFEo+XqAi!k3S`,]Op3rmEUqUrRM!1F3/
%J\*c$*`d030j!';6`g3ac"t"Te*@K_ERM9earN_djO#77%^7#j<-m=#W&tX/k]I-W$sMSd9L#[XRQW:?Z]dpKD8tRk9SepFTU3b?
%MD>jb3hE/WU?g'jk\e<@@+c4FYu2Wn6?_Wl2sgSn,eU:RX78C-5S#gHW(l1`>U++cd:uK_?)j`*6&%*t:X$S/445h4:-_,$p-`=h
%JK)d;VHC]3N3_^=]d'QIAuec[ITP6BZ&5!`k240Y!SUc.5p??sb`qo.;=UTKWp7O@S6#6B$TqPYkV<+'NE_R)?Ls597ok\M[m7-Q
%Ab<Dsf&cUmInk0l2Q/Nda:chL;DVa4K]NpU:sdOmm2kjp/S7=_Y6VkVOKNAup)]R\N3lN6-F%bnB`esePVqh/OAZqJW)LK5gX6;R
%o>ZYI849no,Ajh;mLjXJl*8sp9M*r);mn"%-L!GDa@j2fX%ac-2_C."WQf75d*klKYq!2[V1?Fb^3kW+7DZob!6=K3g6=0f1K\.V
%Mb7i4BhOJ'EH%U.UN@Z7C44?el_^[Af]M/Lnj.AgA/%8LT)TJ]mm+Miko-ba,is?-mjEoAHA#?c*F';_*8ZX$Bn=86DF1XF=h96l
%dS75QO2oI:1Kstnjs/Dmi5uprOA(>N!1jRc-no'oYqJh&?Ra\ji&h!X+ol1CHO%1bSB*3KU1g0698`FXZVn/3Rq9uRSOjUa#8)*S
%d"%sF"P"`"AO`4UWQ1uC_`Z`9<=b@1Cj.HZQHCD[C.-Kd6c8#+?`,g""M2t'<&8J,X"im5-3X9L#ZcMnI_&7#)5gHr<-$.(S4[s-
%R7jq6PrZ6TWQ_3-7:f5b8QOsXdIj@RVrlAVNEF-Sb;KVnD%(qoU>r+Ygan\)6Nb]U29a<.@eXo&3k,dB89'Vu`RaZZ>f1C\Na_U$
%9hD3^>0:AZV7B9sPr:Lf<h#@b3n5dEBk=/$R3"cG)rmA"q^OEhNsQ#Wp@&N^VG9qo'!e:Q1iS-leOFM_Q1cmA6Y`i'Uk`r7m>$BZ
%8Y*s'2e[c1=+OgRD1'ZlMLlHFX5oLRYY''V#,g1<0N`0m_VeD"#_UZqA/IFbY()[U))@p6nV'7.fU!3k"'oe.$1;kF\ui>kE.Uqs
%=()XB@hI&PCF49X<iS*0m)U=>d\CT.h]cl0!?o<u)>opDJhG9*QQIf<3!fipaFJ*E4bD=>=/W;MXFg%KS1q3'*S0T>0ItVVc,9I-
%RB9a-%)N>J_DVk^MBoI*`D:.DbIPqUEk$Z(RiFU7?@ZKEW>5jpdpY<pPZF!5M?PSp<Z@TtVsube;n+"Z\\l2`+_>L)Z]>qBLu;Oh
%m,A4$LLF[id>%NhW5j_qcnMV2DTVX!0s^>?m1/PD`!r/+?IL*mai8`IN"=F#h-A8@N.;2c0Sg8D@X1KQY\ZA@7u@ODJSDHM9Q=9F
%THNc?%LfIq7j61*9n<GBiKXs&c_,$ZO>DYQC+B?pi,UBHN/&o$fI$R*$Yd6s=Gj^89N*cH(ZK[1?2.m:TW;jSXNffF)BG+j=Fpmq
%9[acZ(-#gTPAb*P-=Sd2U*+]4I@eW_[S5lgg_AR+@3&&SB]38c0Pmi4Flg`<YDt^_Uf'*<p<.d91*jb`Z,m6X>pA$j&;d_6@`r=W
%MQ6r_bpH=*:!?pGRq'TiD"F/ZSamC>AiGB=j9Y>7N_%Vo2$&t]'7W<>b;BY57ANdW>7J7)K?qg9oUoqZ<"MF.EG-T"BD%udE3CJl
%(;lYG[V,d'`gSI)Zp^*dn<J.I/?2pIlk"eoX=N8ag9AgG!_(#&Yu/lE;)!!LT*kGr[Y[Wg":h_sHAo>C.>[A*@s]I0C<P(_mE2OE
%QH@>]M%pu`+Le#Fc*lV\m$]XP^P:O,j.SRQ9][6IL<-TDP@5&)Be#q.9Jl/Ge30t&:Yn]FJf4t!"QM#_5P>3_m&t:d]f$t\#1'.E
%bol'O(GE`7&A5N33i&t4^l4"==[r6t1SHN,;U)_B0l;,X#/dP]*l=7;\]h@M'3BQn,0[6(AOGG%<):T0NZ$d#^_$d5%hig=?rZ\G
%c,aF"@ZKCU\(&<a'rot);OJc!PsHr+YQ!gV;JB1R2ZW8&H3C_Pg.i`%OO\TmFfI\eC_nnlCW8D6hrN/;UIK_hH6m!+'`l+UL+Tp4
%2FB$(MrdrMO9&aiEe19.Pk59:K?gT[gB918EGX>Z)?U0],TCu.Oi'(],:F6`*TqGt&91FPRF#J4Md<+HZ8Ni#gmhhPLMc0!/m`*:
%2Q5P&N\9'1MTtL^;rM&eMEpYTGG2s[7s2)jQ1hLsIU#n_G10`:nO&i7E]](o(+%CWRWqO?45EK@0*E^<e<mc0cHI+La%SEP(kQb^
%V`(:d6S"'>;NFA0KcU6K*8PZ=74d3%jQ%Z&/fuMD?C@Fg'3E1fVMP<ti!@VmpHuhl?&:V<oT!Un/N,[ga`'\<DI`;BD2)oN/WUZi
%4O+I#%MNhfg#g;@ZJBS<!((u!8#R@?#r`CTE^$q",/2#:]BEK3-Al68/qZq)YL$\Ji,CX^]/\).[t/8%H)4)L``3I_nsKpSo^I0S
%aE]TFdaIqB(dmTgT<rfH[UhI^KmlHTTM8Em.Po&mZ2&DoRta6#!'G.bA/lIjC/!Fm^JDD\2/A/Ui/"jV5-&EtjY\g1_rK/LJIB*B
%'OPNc$mdjac)@"#!mq_fY16t*fa^4ue9]5-1=MGbhP%i^/>Ggso;FP_`iKB.)de]BH\_t.],&MZ^ufB1Z$Ymi\c(AsV]?RK\;C7q
%8b:mQ!nkV**Cu3ng)BY6Am\(Xe4geB-EJ;Ni)d7n]XODhf^*@egp;:*3<`LA3MsZ/^]]1WYfbl,pDIQb0f@U'fDpj*9;d?L#Whb-
%2&,O'#/bl^6pMLs\o\kI=N+F1(l"ZC"Uus'7$:7]KP];E^oU+85_7A.aYgYl4NEt@4*f<W=%l1<!f'mF2g4*r__+-BR5MmNK_*Q7
%]R*SWS;4Q*_(%c,2b/kgLXCdCbNGajC,^Njeq.<hXu3>FfZFkY(#SqL;h#e-J$D+ei^eTAN,b8R`IKtgG3\$`&,g@TqMOt.H!PHi
%N>j\e`"Y,r'Q8c`mP*Y6R)5@^MBP^\'^Uun&7F,;rR[AS,n5$[]_hYe<A@c+5q1=6UFmKTj-\s?p(_9cCMFa"5Z%U&T)'\2NV?1I
%3*f,gS+Xd%?e$J=M,Aa:Ir`TpK3Ur/Z!liLR9=-g_8k?cAM\,qC'uL#ISKu,W"e<Lajd7MZRV\P[G&j99n6r)+]$#Ab\*@Om@=\R
%$<'1VG),NtYZ1Gk6`Cofkt6rm50miqnC!h&1m8romN!6.'dqbd\%VarIfEoeWE)AOmD\IUi++t#j.7X[R_OI5b*-Y%HQgBi0Ra$I
%%:r4]8;eqp*km!3SE&]STAV$K+Sp]]ci`<T3#c[Pg13.>.Qg9maj'Yq.#sC)A@V1EmlbV5A$j*I-))d&l7'B(HV(r<;V?;5Qt$r"
%XYpHl5rkU$A?En5Hc.ID6e2@%*d+@8=5<]L++SK>rXlq^pHelHm%Z(Ss7_c41%BAT:"d^@C&0'F6gJ&4JCQM/Sh]li&""h21@usb
%r..^C7]+7[ftCfTS%ds,K+%DB;`cDDHC0t)\npsefOf]Bj0B>D<G<PhJ+mGqX1WDCLQ,7YHEfW9b;S3[KPJW+.u17kLqD^`5)5)T
%g_k&B(@OlQ,VC>F8ls<]9nn"h(E!O]Qt:<m,C2HE!=WiW;W?W71Rg::'S`kk@:]->9eO$sD"n=I(LgKERltU`M;2+t.[#%uJ0&Wa
%h,"T&QB%""k#$>*6Sors<?+POZlpXt&R]#6o[[=;5leMJ)e:+uH._NM4Pa-qcoKaB,Sq+7bOp2!.elTB<Ak]NoZBN=^:qJ`rWN_Y
%h0;5JmSp"TY04i3KOG>V/AkaQa$K_=RXR/=_mIDY%i7R?DhT'*cRUo$3/Al-%DB='d5+J_E2U!OG$HfhLYUaHq/ZA[/OO3nqqTqJ
%CM%F&:&Z;/=0'603&#N+S^XhN7m0?(;Eku[:Uf(9K1PBp]>$@\>ID)0N8]'n^M[(UOj#PQ5'[Z1P6P(\,;BrdY(]sYQ<B%<\n6/Y
%CUl52\[TM[ihH]5>JusK&I!H-ro9p03k+(+o/*_VPLeQk4*JAWPrubh_d*R?ZL8#l\+dF]&j<Iq&0'p!VA6=mou;FT0H]mL&INkp
%*o49/'>E6a'Fa$hQ[aHhMMT8`[KU/4Q"k#'35*pX\$%)F"<MG+[UU/@ZeOo`71pH&an./.4e`;q1K"ADA'1XZXC,t_I$)N[5B:)]
%*CrAcg."18A$VN3%F4<<\+tf-WCR#EYW;4Y6s7)ph^ZMGc>6X+Yojh:_W]=qg[!82'u4sB=A^_6UA)>O-7:kL#,X@qAaO0>"8;V:
%pkQMRgfT+\ID^0JI-jSQD0jd44()7B5/HN@H,<kA*^a&s6?kKJ,QK`\?DkG7?%MHS[#M[".4ST<7>67TO)lbSo=/Vpd.ZSg=>FI(
%BPN`2gPuFV$[)P_[%98rh4LT^5,B'R&0X+PgQ\T'dNk:8--8qb]3.o3#n:KZSaGG3?KY`$Q.f_$QJ69g='-d9kkPS<G34S%calmc
%iC^c@X/OC<X2W;r>/V)([fDe3G.3FIK%$J'Xes.%MUTsaQJL5kG0>]of)b\-o\b7-K['#jE<ot8=_p)H2Bcd/(CO"r&B$(t`@i/1
%OMh:ObVaSfoQ8gC[f9dC,F/JVf%eEPakSU%OJcp;J`[&%-*(_X!j2fHT.alqd@\[2+-4%Je:IO6@Ui.PqaH\-.Z].YU+gPC9OF=/
%3.j'DFK9SUP'[Q2IZ?ie)koR4>4WJ?X@#I/=oOdJE1c@]Z[$)B0jtKd;dENA=Tt*rR.l_2m`$M(AuO/ZMU?]&CY%kX[coVV(#mK_
%*Vb(,U2]/_]^DA]r6%6Nci/sGhS754/_pr8gLjk!q3J^Ji#AlOhNDSdj[Mc.mr@doF%)k!)s)qN@cmVpL];T`r#g%N^]dElA#)t.
%A&i,]IHfQ'8P9.!b>`fp0k=D,r"HKkJa%!k*h,SX]JY`opk6O>?d2uJR[EcCa4UkW(^s`1]][D^`Se$=S#d!"UXcR+lN_TV%@cIU
%#*8MRV6!8P_IMtK=1omLs09eACO3;j='%fO05h6]lPfY&Kd$6?atj6hiS4qaCoA/R6mk@tb])sB0"TM6lq/Va*Hm+Bpqseqqt/oO
%#U:+QBLaeBJdZ#DM@<)Jd*gR5E<uN#2(]bk+@ZKMFE;]a<]H\\h#;th4hCVPA?ATg@DGD9FA3YA3.BQ:NYRsrHFLd$-af/)[]5^X
%bj[g>0LT"8-imloN=f[d)3l:XEK5C,)IW?50j7Y^hNA)['Y4dPbTuW`RZm<F:RLF:7eWX3`&Y2t#?-'PkD-\f/LeQ&n%-9s4sZ9^
%JPgJ>oaWBd_a_0H#%Q:^)#B<PS&2Bi20OUXmV:JLd%$9C\@\:n*3/f-A#`J6Tk!DK+`$YS60IG<S]WGBZ^c2&l<VH3OU,p;C>pAu
%n@nf'>!]I2pPe4]I@`^m0/pn-6=5'q.Jj"Wn_QYLmr$".]63Sg*R7RsEa'G(qZ,gIIIlf\5Ak-smd]TL:''Q>i#]MQYMf%N1H"h1
%3'RNUC*u`gKCbGCH1/e?+Y9Ef3Ib1`iOlnfVnLSs8%c?KiBX$sV&'niNHG5&A5s:3]Q644VD35WV%m$pkiUng&tD2\c,[ccAniL>
%6;OWOW1H0M;Fn;`Nlm4=%QK(gh29u<gHa?<_:D13nqU6^kO@0_8lf-nrN]N@:[%IW,!:W%]ta'L8)[H9KF$B<(#LZQI<91-VE_j$
%8u>"C3.Zm9onmEdX.ftLb&,1QfK&pZ.aE^d[.;jNmN7pmP1:,:?!Uq&pX^Cj"Q)*IH3pk(qq+knhJT+F8+1eG#.E+8)W9q0]6p[I
%DP%%-W,St8q"H&9WNYV)PLN:LD`T%Ir?f47gq^nSKo#Q?WT^7!r^r;HU.+L\P3(7-m:=:\JV>LIGJTps2X.q;0DmD<gjqkY_H/pp
%d<1=3r]OCZaQfD=L_n$Q`$+S-4WC4>jd@Kdddtip")3sdJDV;.;sO^uM(*B_%&G=3)GKLBpO[&m*TlJb`b?0->oX,'GllF&?n($F
%+g!W\%V\qRC9NWl*?(ooW;Z`Q#PRd+pnO`T^l]pd6=3GKB8UcIiP,C_)ToQF%/T$!V`@;mbVS"X'8dqGKmEk$D25r+'cLuf'&5.B
%)L5:gb-2ub-Q)b?FUbIRB,LW.H#QdS?clJsf6?`A*jC*1rZu?FGO>7e(M)k3k(S6^qd9BqVgnNcO+73.n,N:BrfS\^^q]pGJ,SJY
%qCfV`T7?[cTDnHNJ,f,trpl+Le`GmiT^]e:W`<93#QO$a?iTt`^]3C;s76&Zs8!i;p8:-G<f6**rGSe)oDI]lj1kNXJ,K8kpHML!
%k>-RgT(N++=8sZD$sj$iHULTc?hp=8jVTYInpKc<rTfOEj8],E^NlNDs,(a%=$>gB^/om[2uV'PrU[f(Q[cG(X;rZD&5R*E+5Z?;
%.#RZ3pskHV_=$fnX8c7JWW2s)s7,^T^O:PWq.t>MqC%[(\FdQ5qd9C%YJ:,)J,GAbs87r8]r(7JeM!/:k,.12D;at\FF=%"J#rW*
%T6C2IDeNMNhnI>+s5E^%r;Q<F55b:()`d(a*4d/\RX@d:7(c#\nQ_`krS1iN]oXF-H\GGZ?_EaIZ&*L6C;5Al1X((C!O\9kIfI\(
%Z6uu@-%S(+<J'fm6-<8R2,AH:D7fYQ_4[^g(eq%M]2%)=^_la]r^PRifsKZASKM+DDJ(>)%4<f:9%O)eW=&\ofAeij_@/d4.q1rA
%Q2""fl9%jX\P#hgaHI>D0jl>k'FM0>YoNOr:CuK.m,".fh<ls#J-I[oLY-9N9n6Nu/kl`S6nbFN]<H\frM?a\OL<pSU'n/$ra"gU
%<2FV`akc]oqWqNFZc94m(bDCi&"u-Z\-TS2(N=iElZgN&gO.Vh.+1oej^[rdlK_\R9MS%Hioe^D63pZqdc;',<CoUr8B5Em17rff
%Z=DN!(]/$daQD",*CdJ3d@iRi6:]YdWgjob$jK`(DEV<G*4;j:-o.*K5u?QB-)SU?a1h6o1AKPZhFOiOEthk>?5B4C,9>pnc5IJ"
%hP][f:*%B&_Yp\Y%(nlY7(r/kQ'ed_%3J,D0//QLUs)bdP76X%o_LS/oa,7rM;iFqSDa>2cuG9=d3gpRqO;+^IN?jM&oc`W4i)CQ
%L6DD`IL52(\g1ST(N=go1W%ur3.KVNpO7K-::X(8KCi^]c7_&Fd^[1h'2?j*'IV_amFoa.StFs=!B>a9H>82&YAFY8)e6Rsq<HRM
%I'`q^J8&NF+X-cU_Vo*d\-)o_XW(Sl"MI+&^=k9BW*Bo0erhnI1g9$LJ=!rEOkW,X)X<J)<[GEX,nt6L6-YpT\ge=$"uI)c?pg'6
%8p0prA,86.>6Lk=de)pg6$![cY@6S43KRU%0,!8/\'f/io_Sl?2nMM7nn=*Ko:PA1@,gG1p21;cM-=Oifr9)X#%2;ID:<'Eadlk-
%d:n:jSM%&78F5t;3O719KNU]O"n7u*='Mm[KK:%]LW%[OdoIim2IPjGmg%XPK1hAXACOIDA4bXnETo++,mnLme9!e=RNjem:_X%B
%[P"dj0&(qK2::1/b;_Vt'V+-L7GLP68('D*VreG_262^Q1,RDH=4</]7f/[3nKVoB'DbAP5(U8/Rc#qHiHHu9=eqs6lcV"RRqtl%
%m"`g)EiIlX/oC8`q]kA*\alrim:M%R51nEKDptR88d6CA!8)&;emtK?m7["f!Ae4&X`ZI+iU.G[-klNGlH3N-TG7o?XoBbXFi8ru
%###XPJZ1:-r7;ONEA_TO)"k^u1Oc9'9U#8NL4LRM1c6]>_X`Vj/nT>821iRgIPtT@I-!Ni]%YV+<ASmG=nLIfPsi_+\bAp)pRYd!
%:[cK'NZ?\H#>+*V`Ncr\dFcFr;_b;hPd/\Tn&OOu;jAM/O(Dp)?.tQ6CmJ(HTcA.=nVTt.oeeu'^cW\l5CEg8BmWJUa&^m.#24Il
%jh"A9B[*Z5%a?$fAfOd.):/"go\ulTf5N5if@GWne)()0>tZb?*?3lHfS38A8Rf11'C+:01AS)N/Tj+/.@7XWFaUZ!ouj]$#`IOe
%clr6ggI+DDggq-Nk2[]^NSF(/`Rq)l:@m*1kf:<J4ARQ`N#q,4]cPA5oO$d>JMr;FgS(%;Zl(V)X9%nBl`a'`*Bnu%\s7N[W<kej
%qU]&T=qi%l:@\m]pul8]TZ2b0=FuYDV(IYddHnG49V\cZ=222nq[h1;V2G<178FN.\<JOn/P-3Iq1'!\XRNO9ji!'QYi].'?ClfB
%)<O_D^OMH&%1.T2Aa8/SbU0O9XDS?hiBF-eJXS2$#jD8L#R[ZV%c\B1^8TGgrR/S7_">^[h569$ouD?%A@#R_CRPkR.*<I@:pWK`
%"fG2W/sIR-eamm0%IdM/?%J2h#cS-(2!,Msc+H\a%Z3+Q[C?]7@YAZPH;+\)'=/c&C;]F@2joX6U[<buYe_HFoI2G$/[$F7IZiiV
%UE\UZd3;!bK/[&=-=9!8@n\>sh-nqHktTu)e"t#^Mtfh$BQ4dtJ%`A3`&[/U(G.+,+cDA.d.tKLgV;fmLUEtm?XRSIOLM,!f=^X)
%Bs]qq'4+:f(#Gdc4#'dj\fTb),f"8]'XOmhGX=mSH1'_\AU7lS1:Oa`E`=F)aA<(^p@Q6,E(.`=?rHcY;gE+Qnd-hCg-a9TS;sUn
%JIdsS=E2VAb"R!m<@Q3h^5sskM(D9L,W<#0d>p/.#=@*9Pc%&D3NZH=:c4%U>;392i]&?,>HFaJ55a6Y=Vo_u:lJA&%1.)>0KPoA
%lun)p,Vje_^oS?[r=[VOcG%%-.#Xr<P2?3[X7lD`R8%a<F,M/Bmu.J<55K&#o(q4aE"m(4H[dlGf]qk\Fn^FoSr^"/ELJr/2AW<j
%g2*O]$Enap>ud9RO,7dkF)'UbkY7BZPm4c9eeE+aES(qMI+,\<<>".N;8S"^_..t;L7k#a@YmNh2K'*OcN$j-,;C*X^tLQfF-6Q>
%2CP#Ba_!8^GE:No\XaPU>,pDYRI(e^;&WOheXf5tOdHk[!!b@S&+sH7^:R?_=(9pD2+7'Y(rtp.hJTQXm-ba8FI[@B04>$cAUc-g
%E`]o<]g!otQbHGl=U@RIefYO"CYeG#[Xqg[2]?Vk.80Wj'-NeR^Y:heC1_hXgSO?#4:9$[Uc80qZ,J7'.kH&1@g#,;7cOl%XKpR4
%r51Fie)L4/LYiur'I^QZ(#:LcE#!XJFr:q/B)*08Vb&VQ:S31^k.o1[T@A:0l+"Ms[lp#u*Id6qJ"A&1nAh]N9._Y.g\+T_WCh_M
%HM^U/F'LagL&H$dUOdOXA_8KT1J)O!3qTmF<@OM@ZYm4OIPTNc7pah4Y)MU,SS"MiV&d]#2Mhg;-Q`eD\"RI;AN3i"Du/s;d7-0Q
%)5$8,Ah!*o.<[]*g.tIpkm[S2CZ`PsWLW/3]l4i1@FF*Kguj\@GTd7U2],-5.XeV?9MnK"(TqeFrfV+-:&=C8I*\Jf3F'V8YtV&7
%@_bjKi'_mlRuVRCbo1ogE!%>g:kHeZX'1A'e$M#c&uLcj[Tj/.Kt2T<i\1G8bRlX("'A+PRm&T=kphH97poYR\6Puq+IlJ[c;8).
%P#`Ks`keWNOMKfWHQnhND#$IN;HjdtGr[Ek$H2R/Z13=7E8:QD6mE,`AN(PuP#_fM&&:"LqSJ(q?RK90SM.Z^F.+`FaCqgKmLA%n
%5/8T6H<`,-BVQ+WL0Pi=9+Of;T(LZMa)f_\`>;OMg%"BUXJj=+U=5"2FhD";NZYtQ8Gp)],A<.fFHaRnCMn4!%lkE.YjS^oJ.?-@
%Aop:`_WA/;76eRDPkoRuU)hK8d:'5.at(a$hqk6a[MY\NA*&#6p"Rft/N*!_TC'_(oeejJ5PL3Pn9YE!BNMsjL6>=cctTrX_>$Pm
%LZjK]nX3I,r>k6R?tVFQW)%8^)U!N/hL3Y?=AWV=R#6jJZ+g(kpC63c]_U?Z:aN53L5t_7bj@^n/`4[IQLWnKlX>],k^b!g56.a(
%)i_Vc_8q%mFh\X!N#TH'CqAm%7Jn,eeR3\T>9<4p'qJ"da(FM\R8(QQ&=^]!I!#1rfJlbW21[=u-Q,Z[#_W]1q>ULLGT7I4U?rg;
%0;ZWgLTG-Yi$$DZlSUD??$F;:>afj,.f!/]Ap*_E3)sZ"0s9/oo[;KQG^8@(]n#LjLM%sPQ,l$]ee0p'l)>p&(";@J6Xoj41:YfL
%4foncg_nI_4*Dd=n0PP*S?*:sbVb[a'9$FtZ%+d#ia_nfk-KnI[$:!Z5,)2*7pDXYC\m7K?jm)=@5$me3:>r!/X4luBn"N:!=Yl^
%0_l/]4A;I?QCk??aM4P>f?qj#A(mD[bMN37am"Y-q^"3\<-Q%3:N13d%G(7=EJj8ZCTaJF[9j<2b1dHC!$?^EIP"e3\c#@GHe#7s
%Wp>(&qk^9YgFpD=94)?/_i+aH@H]IM`*r<0!Ro4AHNjB;\iG1hoc`5]T.Rglr?n^6),AA7GlRZEi:P94T)JTLAhdd2/6f$$F26PV
%:seUkgpY,ME`UgJ_I7PHEUPaj9XhR%]Z@Bpk@WIX'JKkWGEWiJjhk@Q</[Crk43S$eLH5O)HBpNXA2=3"EpdDK3RXU0,QlU%h6,%
%ObYX`7EClraVE)$Cl+DN]kgcMLO+!&GM@!5l-KbbjPDB/VuSm)DT8e-/-;sA%UljTOK)i!T7^KaLSeaUD!6rbqL3uWeBd5h:@e`d
%>*a<BMDC`]W_eFO+/aHGMVNWMDXB2A`3s@I+B_.21RdkA-h4#rU&5)a1Vg@`mkjcDFDD=68IUN`d,bChQEXbL)IXI$X4VQ9%);as
%=V$_!:eY1h.(:@^@,,+`.N#:V'HU?L(b^\M+?l8BJ/[ZZqn0/Tp&0?bAP+4=)Q+[p.8o_8i-or5&E_264ZYWD^o?;EXb^HN&Iq[K
%_p8`(qZ&P1ThT57[T<uXp/9:HZu.nJ9/`WQ/Y<aV/.dk&($tu\AXM`,)Q`&:I:sGndPNi"!DLI&i1:lNDDuoq#C*ed*d4CHOW+G<
%f9b9.TM1O;-V-!&hp?4m%RCKuA@L"1<#KQ`-pQQAc;#WSq*ISuQG'5SR>,E7**9Y:jjGc-?2?t38`p]97$[C!U<j?tH*WncU9eoP
%BH/<<GrAp!,O:oLY(7%e[]lN)]W3NQ`ai2S--Hr?r,"u?O4.f!F\-,]X6MS!;3phNUcR<*H7_+XJCS+Ec2E:SjTW3NSGhpd.G5E>
%%@O2E@O0T1dmN%6mS7HW:(ON`..BU<.ChN5-aWQgr[p3NUIdq'\iU9M8[Q'9$?'Xbog/3XTrbG$3V[b2!`.7eQO,61E8Tj3W$#km
%ODEP;..Yt2&/iS/!l;&nrEU02j?*MV&?f1[Ak4N\,S*k]i5Y2A/TV89\]gmJ:!XhC@82$H&2"\-WZ@:GXUHXDCh6=`)`^$lq/6VI
%Q%4,s<!>!79GHR\mMmodbker$W.oehP3Oul%=kSn-]XS;XX`SA_c8DHr.%aA(hITa:bAU3=.V#P#GZt2k=2.k>7rRMaFVEL6?c<6
%%Qt\eU6tood08YZ3JD+I03-PSMj\T'34.I!VIG4kdi!q8-L^2"P/`IQMe\+!CZu,0]R2rl@pU.'_fT(M5[hC6-A+q3qX2RY4b\8J
%^&'3!krotJThOH"l`&T)P;'!d=_@pi9)NgC.rCCNM4[Z8J?+%lKGA3Kb`u2.%L%nt[Cudmj9Psb<)FCT=nV25\@?3teTegeMl\8t
%O=b.4'"'E!m6H+dQLM3:=C'G4Y05sCM:3=6Kh`LCk7$Bh.(]Q`a#[p*F_YBo8e'<#DCLs2o<W6DJ@f[4CE7G(Dsl+:<um0@g\SGl
%gW]aPa`Aj_:e%Jh@0"G@F^(L8dYWfM)Dd>`6P`U2`c(b$Rk<sH,B!lYbnaBJr-i]3fO3cKgubBF$R<QPZ#n]s^`X6HYDR:oI``Xn
%A7"(U4=\C#_OqIpF<++q3_gh3b4`1QYdX$O4Et*r&kn9cLWCPV^d:[%=]s:<;lJ*=gXT]g<("\&DJCA8qMZH!g#2(6q!q):W2fA\
%g_DIsFD[pW\o`\uVdA@SqZWKb\bRBj@7Ca@jc,IRBbX=>mRD,RK%C%p*)cC;EmFTh5Bes!qXS.;-e*R"2qkk;^\A9^pCX<+n]CGK
%%'AU)KBc5%.&pU"DMMX]"Ar+S!oM+D8ECZF,5'CDo%<KRl?]YgY9WDf?S5'UA8rZ6*2#Igjj$4!W/U5Od<XB6.CHeVE.cs=Q-_>t
%pdW*$HNtqEf+*`%M^:VaO/p_#e_sGG:5F82:u3kBI,ate+`Zb<Y?kJn-[WQMEc_(KJt=Xfa7:U8k6kQSS*eqtq#\4!FsEn/@_p]i
%kO=%Jo-H@T<!ZiZJogg+YdPW!^"o.)p4I+7H^LQ+NbkA&q].;&'^Z/)n#F_-];Nb%:+TfM@5^R@;VEeK]@;37c-+2O/:V9%/HekY
%rCA`ik'6Y2T\soP;fY]5^>o%>QDnVG5"`l[nq/5nVBN<,%qeM#j4pn!p1CZ:[<m\n:aK_Eds3PmU_Pap;\ghIbuY7mZq/mQl[Eeb
%`0=tV[OJX5V+,SCk:CS3m@Io8&TtXpL.-BU#7<%aI&#Vn&m-4sBFqX>T<@C6V+-`Z$5KsXV^3E,&mmef:R^\79DcY<i-,<4r@!3l
%JgA$-X%1Z$3,TiP&,1_5_cqM/),>;6l\lS>".Y*SI`P"rB.ZPj1Wa77&1opNa`\be3+0E;\iFfb=4!e,-`TO^BC;o+r1[IF9SE=U
%'>CC1V(nFkf?ZC1<s>Klr(bI@nWc@iD&m9/["Ctff7)t+]j*\jdL#-?a<m])*?HXd`,kuecBRacq6XY!h-Y33U[VY[[]%)_QHG$6
%%"6i\ZjkJF@4iQ>Z!,#\>WR:e)pR+89c(Kal!.(g0lbKa'KS?=5_:uHo!K!b6InVsO'tq"2:T$@>-iEP+'C1>06>EQ#unCOaSiee
%fH/$E7L?$U9H^5H,@gCg:7EquDp6)I7Snida47;7S]_F$(`bqi^7\-_`!2o*n!J1A1RpGf))fc#hW],[MtgR\eLG`fj.'K,[6ZJ+
%S7<"55q1h<Q+A1n;N)aj4^Na#C9Z3@F,lAeLRVDc3TiR\S1.'clufk3ZZFDJQ8n%F:7Unrejb@%51eZdaA])"V4W((gV$5l2@X;f
%oK5Md?\Sip3&gbW1j*0q@ar(bNk>Y[ekV0FX:qGs'HS/ki=7-n*'<7E2Qi(cSXGl/7BSK3:T'_X:Hd"^N,uKZc<+8l3%$_$=9Aoj
%r1^X-]2su3:)6L/7MWp'YjP("_DhdDFmCF<AcNn.DAU=g'e5Bl38ZH'S7af9c?EA-kP:I'ELpMe1!]Cf/)raAVD6A;M^6;fDERMC
%j[M/JH0UDX36rUXK_+!6`nJ^*+Yh:6W%l;;*aRnngS_a^g@0,q.F1X#jct!(hI=(0if%sV4o?-AN,q,$gr'-Z=P&1m>%5Ub['ZE'
%c@I"X(CPs1S?8-M!1\'>\2\Jb"!2g.&`a2-f8W@7S-*RK9bkf2O/nWGLeuBR*B%/mEXql\3%%\M2O6nNN]H,^_hiBI_nnB/5@fH=
%r(;fbT&8B1kP6WfE?<Aepu]-?N,Y@-f*LQM*tmNpGF9&gF4V>j4HG)%SEKEOCKVQV`]29h0JUlE=>e*D*n+hCIBLJ+/Y*Jn\)`gr
%E&P.u=>sP!">cR-mFPu8<AI2/@@3TC,*1'0U4J!CYf9gVn+7/^2R>lKn\q=p3+VrDa$#'&9//41P)6Fkl%\Bc`+``:H)A<2hY3NN
%.r0FX^Y"a:aEKkXmq&Y3hrd;o4SKi&*=F)B_:cn%YT$`e$?dY0$)c`jA>)/VXsc3Z35QnRL/[AqCh);j3h=j"Q^4/L+?%e9@U$cC
%bf76Q`:sraCK(tR$6(L*ai;JBZE\RTg(`2u.4!@8UL\\*G7n4335Si#ZK*GdrJkg-4A"$ma:0MGL('qFMUOKG?=u_cZ>t"6,O:)4
%7C@7<'.8rG`5ij0c>%JHCRe]mb8)F"7;!NsOYp$]-!=C/Ad$"?X=RaKK/>(d?ZpZtX'8`%3/bh9/3r$T@`?D,.JfBi/APc)YlLb(
%^"ZXNju-7pPDuuf@Ul5V1(u1Q;DPNJgT-0r^<nL5g`";Oaphu!<c2<OY]=(r'.\9rR97"DbtQ4]+dlGXba=6Pa-PCQqlFuTCRe_H
%,;)-24/4.R33:V$[]fsOAqec*fc3ruF^n*PrU<,`fttVce@h!__?(M>10&!I4C""#XDu0[MM9#d_BZt*YQ,+s\%7P&fMWm;`WB2s
%;AL40=L%DU2AT]l`L;oXXI>D-7b3U1Od4m9AF6T<=o"E.b/uB&XK;@!AnC)m1b1(88[>[Cj-cI'S(R)/g`+A\arP,<<pjA%Zgq3(
%4"H@1>L([T1-6uq_dmB@nS2Z:*nP+OIBLNWbcGfFZ$pRsb+B2(`OVY>^4(d5[(apDG?rYn7ZRP.V=b;$(j)UU^4@JGM'%Wea?Z`.
%f\`T9<sb4rAb?M748$,5Wa]5!eOM')VfR2c?\VK[+.h1La[*NU'hpdk:ic6uU6io34KT-$=s?cjQZb$sH!+>.et/J`QdB9c^?NC6
%WO&Iuf5k&(*[Z"FegT$I_A=CI0Il"jZdMua@j?r3!<jG6YW4-`Yd(Lkc<4Q%G;3`E@Y$i)jn)\-b6hQ*G\"YmKAP)c#7Os]Gh>YK
%?k^J]\K='b1%[4WW$2sGL0e'#+u9^2aHCB[0[pU#DE2L;h3*hN63>oHW+`o_Uk(\5HG2X6"9Vn\gd,BUhU=6KN<fa9V6\='k<q!^
%B/a"P1VqEWVYsps0PL6kR3=sP-ib"Vpc&kE,@m1(,"++mVl*o/&M.EX"PZcsJl/Jf4X<>s_siUEOV>PjBKXeC*QS#j]BfbLa0E[F
%F=^Onn[PrnG\/YGTX@f`1uV-4=b=5#9J@m&Bq71qJcQfCL>Z#b%&N494f<mOKS9Yb<%um+W:g@fJt_382pn-&2NpRA<%s:,Z?GsV
%L"F>&HO;QCm%tF71kZZ9"G6^+i<uP>_<*('+A=I]2gG\,g1$7"B7fNT0YqAD.5W@gYVeP`[(8$E#k+NB_.FBeFX@s>Y^!P)Qsa"t
%/l+0C-5[ZXS<Ckp6O2;=G(o3be#I,M$&4"@m#!;?m%kGVS-_(c*LV'rF=%h/:5s((1;P)mBW3&m"9W7#PF,_k7#'^$4:Lr/9bg.-
%@)UhjAQ5lC'dacIgGNDm$&2%0*X='ETfl.8HjUGo,?*VpYnat?=qB0oU_pLMB$TthE(];]h5ae0Jl@u]RqHN&:]=.qQSP'^,<W\1
%ZM6L@mH&8XrS5So(Ljt_kUV-'Ecms'+>g?[iGps=mc&1V=Z9"=cEU/'3gLa5T`Z&c'g/tNP^#/r.&^&+QB0+KXU9o]goh6-[)hs&
%\*tgobA[45C[):WJFc-929a[Egu*Fnm3-CVh4J'5_;jPq6.qMa:R$n2S4?qQ`o^LEreUQ]D/7gF*p'4-q]W/8dbt&OSm8K)[7Fq$
%P:Xh)psQ>VGbH+f2G.3Q!o.Yg!`uW!A9>Kp`5hLTeb4o;Ffp'gR+FOP+at6q:>!gAMIf[:W.W/4Zq`9^MJj[*At>>__ZJI$N;P-<
%4k":^OT=_8#\&\m>$&3lV/@E*gaKuuY[U5++p8ajZ']F7U3J3?k,LXP,,JmB56.`fGml3P__-Jj0^%:(_$n$5.\p>a16GW.!:Y^7
%$,PCd]#'<3W`Oq,c8>JPMqN3l7]n/!"O**M+NU`HFGnnc_'eJLcmJ+..4b,oZg*PVmZ&WAZlQ;ba;14Qc(5.%'JW]]6_53Dq,9oM
%!\BJ&bL1^PS5D$W;YBN>E==+ihfC&lO'Gj4-(rpMDA`;M?TNpsqm5`ce!1qZ+/2D@^;@@9fDct\+8UZ<6Hi0"qqlE,"[$$sj$#a;
%).=*XV!AtpVRjUtVb./7KK,O",*SH_i<g&CD;/&HM9jFS[!\j$^U3*$FKIuXblajTpX]_X`GO_H];"jF$p8:+AupnTqFb^M=Lm#?
%%iE>?:4u@2VK\'g/g<,d1Y&aTKcZb&]blYj<fn9(a6f1[?Q=>WA_3o76t]:Q@eikAB9o437J;tCmTL2\<kt'01AfQU:IEX:J4fW9
%i05`]QkM=Y<"s6.]+#9o*El@4TAc;jM)i\]26EHsHT5foVtAdQ#XpkR1l?I%CDg!m8pB>&I7`sS@V,_ZV!d(s5,I^*C0#b.XVo4A
%9F%VF^b0jOHr<a]kqS5pL39:Ic(]E/64Xj[la"/"iToXC3ruBtfh-_OCe:_>j2-5?$\h)+s8@eSZEiW(Oa^L;Ek=sT%GAR65rrk$
%OL*n<F=D#Nn5]QG8Uqt13BG?S%*.AsZ:<'tf[[RgmM=+[GD%O\(*jpc<!VPZ3!qVW3]oXc*XL<a^8?f^ap)$)@BSOc#?HiQ\&7a)
%h4:Uq5<Qq>$?oUY[4?tn!Y6f<?D_H,S3cUkU$I"JR/_QLaaRLTXiT0*HS3)CcWEdc(LTsuXr5-+bm<\_1B(I>Uu[jp\'U,k^UEJW
%b65>ArV1cR'\I^oYo[Q/B!<?^]HW>$0>4KUd_aL'("T-J@S1/4!7kTcSd>C5oGRd0[665hZYse6f^_ono"5n]AG-7%1-;`cS@P"E
%^s\XdaR!`1jSM2roGd(n2ZS-h^_5b^\EmnoqjD>hPeu!q=\e(a"$=(-Ya&fnoL`Q%9DU7IGVBljM0\D-=YVV=4.ZR]1'BA&;?:rC
%;?>@kRN7OuY`O5"d5au+^mJGG0h<e0Rc+U_<.HjDUQ\RVedR&/V?5P:.B/e..R9SL.2O,Eq+G(mqL6qsd!q?j*r,d<fK:/Yf;%Fu
%2HebL4I[k^n,W?:607V$;4Z'NEd/N=Ed/NCEd/+^Ed5B!LL7",r1t1cNmPZGS6D;+GeiTdSN86:!4tS[:'L0<VJOm/o,Dul]505A
%oSV0fD+qb5(\LEu,:qWRGW0"fAs!DZ!Uc*3`0_W#B4n7f*\bnD$phOP%.QZ&e!SFiaI,K=b%&@r*f>2mIG7gl4CIi(pF@!KLc#]i
%>Jm;2WJYr=Q7$ZkLOW^/Ldu^$?W*0Xcl9m$N?@'i`7nZ3`$5tB%MoiLUl1_%:fG<m>Y$<!O@3U):WF;@Of9%J0rr-^HepEhZC33K
%+RJp`O&SP1TP]EQ$1\H`(kNJm8\>:?RWobkl?Bd9hkM?O\"cp@j*6C)lBG@BA3!T,it+BP(d^YR?tGSCddjsVV5(l%[oF&Zq_hMM
%gX$MNHb`V",M)h/:/sDc/Vps3MFTLfm=l#M3#GmUB5/rmm.=>l#OCsQU+t`c\icaGWd%bJLFO@7lZ,K9c^ut?6IXtbd]>qEgR0T6
%7peJJl_mReG#Fm-7j@[m$ASVa7seR1'OiMLa-h"[iF/f1R:I?Iib#UkV97e7=NKL8l1R'AGUTP<*mUrJB5p(8"L/[G<i\:lkq!&$
%m%JA6f)rXqPH<t!->(q3l7EdqV9dCj]YWQ5"e6lAhns&959BA2%_",UA@1'>"fI,PT6\0Kj:93<D@_"#LU[$Zdp#L^3hHn[5X=p%
%4i1HHW^.-2PC2:@`_1RYLAHFOV62Y!0jkgh9:&s:o"T-ej*+Z,0AOMWf\FGr'Bb(08%q4p#r@UF2a_RLJ5s[uMd6JFb'f<.=@L>N
%oi6u=k/=`8XS`D:B6a9'148js\9&BgFuMd4Cl4Cg/QCd3<*U"?WDEmmhBVsfL`B2TF_"UBKAZ5e=7?)hYaUI\(bYp4$F!Y2=n)l]
%ei"\28DG"HN>b0Q0b+om:?AVg8:ED&dRuBG4o0^NJ>_9GYT7q8DaHbd?l6!R[L2*",ChLcX,$=inMNg3:scq:d7:J\0W2K8WOet9
%-RkWJfsaNk'<-l0'Wef'JVR:>h6lP+fAat\Z*I%@)oP4qciDHfDa0D(`b][l7BqSlarXZUm?AcXi%@+ipBsZm-a>YKaf1A"i4f"m
%GGk9b%9Kd7+<0q<06\/[16\$q1\k!E4_\QTcBg]j`_pdZ;G/KNbafik\F'kF%B8VYJHlZe$W1$2j#NK36buKGk\hi^CUk-S+[>me
%mfBLk5<*[4f%W^fS=5<b<5@Wg,(U,?KEIN%s-]\)gGcD*$a)Nu,u+kRQd6CY4<9HKh47Z7$kiVV/[A_9f!A_Glp?c'hX&WI=9,Qc
%TXu-E`+O?<FB3h3]n'@=_q#SF@6W]X2alh)[[\G_RV`J4iIaG55"^G6$kcsYljaJuF7XObab18ScLJP(-'"2ZaYb?@!LX3SAlI'0
%p++a[l*f`#_,rXBfK=8#LdLk1"3-k'Q]1c!_@M+<n31HKEmQRS>Q\J'\BhfnB>U84,#,AOA!,W^k2Q_hcH''k[PC)o^pA%LA&e'L
%WD5)uQe\.!p>n914'OC1l#"n]]4^^V[uhkeiUEqE<P/2&ebfD9]"6bcb0JYpQMaR"&U+^s1nZpOGs\r">b&jsYN_g'$?p1$<,(ph
%0p'pKo"EA3:FNp5%hpc(2AL;9"[!Zma5%&GF8@Z=\n>QZ/g.F'Gj.'JE`$+Ck<,Up"Jl@TO<,4>9AP@/>hiT#@Q3[/%K/u*`1MkZ
%Li_aTIhUWW<R;TAYqa]OLM=ic-4#nrpST&$Yh2SH/]p=mL/]`NX&CdG$(1P]r:-V.&1p&ZQIC+RETn>u1Am8I%dn$D$;brpBY"PT
%is6t4%Ze$a,(Q*^"5"ifRO_<>>J[pY%V=`-l%2I@+^Ei_a0-_RC^7WD"1'PX%?<!=%G!'Z^6E8Gn;I*6WEbQ48[1]nF_6pRgTqm3
%D_?0&hPehkG3&-c&\W/P(pg"f7FM,cD-9be=-SSOQ;iP`FS_MKLE]5<UQHb.UY;:k\7a[deX;9)LMBB6G\>Senp@:dXEt]BU])%k
%Y)]<HojW'^4m,7Wf]7dIr$]?4Q!333:eE'WOb3jS6lro#7fcBI2)qc*\e+aIIM=LM&W$?5]WcI&1d?kblb>2<MVhFh=(oej_R=8p
%IMB'ORBats'$TBhmKip,4>U#C#8$ku>X"H8c3(BUW==jjW<XtLMYp,9+go!_A4US+0,[[BB53=Refp5#Q.o&ZX]lHSL=FcnOWh,T
%S7Y</rMsX%gJE\7WGU-uL=A,mbja>!]\@*G;bR&2is\90+\RV-ona)+^o<>-&u5M]cDJ>N)=#S2*sK1#igqpXSA\#RRF-@dqBJSh
%ntQHqI>4Nqgkp0CEj))[,<q(TE/"trUPN1s*FsU50p=h[r$]FJENAn4K"2,OeCb(=q,&(Nq,%Ziq,,m"Bn"S*;NW'/]t`]"D;V<n
%^t'cn+13ttk!s8_XSG^tDa]'(eo@-#[<8_E:q!V?Susn`Cc.-5V:e`#(l\*cD7"&(<$'P'EIG"-D\rM_5\=KO+92.ePE1e_H@>40
%J/LLI32J%1_OY=m5.baC,KJ,?D]W-=1:_K2pRtbPc)cTK<<EYKMOTS+f2BF^0U7'<gOI9?D7%KZ9lP-+Tj1*@C>Qg%`ptX-O13-4
%9qLn0!^3@`L?C`A[<W.U$<uTj!-;n;qI>)IOec\h;eZ3!A;0,Cd$@o@KApNJpGFFAI6BVKJ*H9LH,Q!68_s>0mf'VOgnf(uLOli]
%!6At-?qCO;ZE\/<V6OTA!P:ZhL=o\I,3@^fZ1-6]A0K.9+rop&/7Nk'&?&tp(9kt"H'XHoFC%i"$L([fpbVIaALaE?Y!"`ALU<6Q
%^nj]UFO;1Bp!ejUViWIYF=b46,?N@!Lb2]Ki(<Eh=ZY+IL'.I4@JtL;RZ9g]\pt'm48>C[Uqu&dJFDaBDMrTf[\o81,9;]u@1B7$
%=<%k%Kh[qqKhceLB&mID(btW;jC^_fe1cC7\RV4kog$JZLYjQKnY6hYpUMmTB0)?;)OJIpN]XOUNJuPJ?0ckuLX\*e:A^kq+O)JY
%$WpV.40WfX^`sOgR>qGe7G]=>GJpLC:b<]G]kJ(D8B6l*k0+gBA'%AhOu@`&[;=\No;,kDVhL#B[#1[R4nFO_&jA7`dkHpLmWHD[
%&gaKENWj6(:9h6L/.Sn_0?J;e@'1SfB'YI[3n=B[_j/la[WF)"9_T]C]0"lk";`p99?)R!OYIjaTBJoISrUeP[*r?W@rZ[[@]H;8
%Z%Hjmdr[.$OQmfa9?.,#qY!ua=:`ko3Yk5Km7re("k^N7RZ>A'A8@I-A(@$.!KiC23(T`:`rbBl>r3Qp0JD:Wku^$iF=d7T-qd)t
%&j@],_Np8%7Z%j1o<C85<BiT(UR,i`i=83E$V`&&2R`%s?9G:%"MfPa8hePW]&BT=-$6+iK8sVeWJi.7</)&lC57KqKc_eIOW\bF
%RSk+<?)fYU4+[VqU"rh?mO8aZ<,J%&Dfhrtp%Z)FV,.W>8B&<WojGVuV3&5']D&1/\Lt;:V,/?]U^<SEKgIRm]M"7bW6\GVm"*N[
%:f/R^mi#C;,u[_'!4&G'.OKBSA4s0S9Usjr/VS3sOh`HT3N>.]DK,teWfC>!dFo%9FeboA=UNOJPsi\k46C'&(6KN<kAR^UFOAO-
%i<,V&;AiNDe.'[GID3Ra@Lmf&dFhEb#pJseCajIR.+G;[dmM#0gI%t#rR*47>(nKGatSqrY?WN@*#cZN,$,*rTa*f7>cA`bY#L,h
%.k8$m#<8ubG$*s+(_CT/EYa[3I7S0'N6oW`Xnq;.iW8M6T^7$[457hSq;[&XQ-i!cg0l-tZ0IaTY6\8<=O^2LVa%t9(C=.M=Amh7
%V<A7IWKX.Y7S$:q;Y>o9a2h/(!$niaRO^3"Ke13jPP@aKRamb;7$b^JCOTG$Z;g5%er&0(d0#lGd_eaRQ_lI<Ybc(FB745^EK[k=
%[BQKJB,Xu(@u2f1g@+L_;QM!_DX9Fp%knsrcj1!>,UErk*pO*U1[uOOb%6E_pOEl8_1`KX6_.'h+RpLjfL\TQH`/ac`#.s:js%f?
%HN8@[i/Y1")DOHd4THu"JT]NGi$[oc_F%;Y0h^6<N]HJM_hn)k_\1bC0:f6`+LHom,f(/]!M>V!=YbAT#)SeZA3I0Q;LrcZM:EJa
%H,b.qDd:i+0P!>NZ;HUVKn_BcF3(1iK_80.C\mjMN0/5LqRo+(J@UZ-/fdt,gK4t7ehfO&cWLc,;)L]AR&l(/r.2k6BNp/rB0EJ>
%NN6+dlN,YlUou96[!36ElTsghfXtb9&^YPjB-ldCokfS%=#oZAKg"\-#@NnE<Uq2SaGCEhlkG61*Zng'5%N<5&&?I%T\sN92h!fi
%Te&nV:ctj;*2;0$rc&P'<AJ[Wbf:leUT)4i9OBEpCrK(ejo`Z!CS;%*JOQiVI.Va$'([9aM><6A@m49<Zf%E0+7N1Ym;6K"eDspk
%jo]6`#b0:4@Eg+UdbUEZfqmuZ/\eZRZ71I5PsZ/1R1GZE;6GYo]lrIO5=-eaGIDH#)=mkDYR]he$M=F%&!]CX+'9u8P96@ld,OP3
%bQgB[ZDu+Res,bCRPQ$F&j8.MYF.kX0cr0:Qk):F*/?XJ5/PTnaKUdKg6n"%6@Rj?:*dC7X+A`JNVn=g+NY^fr.)a3EaYF8!;LZX
%.Nq#a.10'HOrpoi`Ko4f/ZHX)6!K2/cW/$sls]o'-U2S&6p`MU"r(+uLror%`Y<Y;G#;?j\/J,E7L?!Rr?_-EeW:D!C3=#-P7;9)
%<hfq#GF8_n>,&B'OGP5H$EQa?:8:j&3,t'b$14:EYQl]PLV/<SLDoibX??4^3'X5%:rESu?>t84><#K\G?Cfo^m_a1lnL(nc8:k%
%co#8iOUIA668s[c]@*\/-p#n%`\jt5JU4"j[iVPgM-@U1:9ACs8dZNF)D;X_,!*GELZ3BZ_?HJ8o1oChMI2<hj@Hh*?MlQ;eia&j
%h(gom:Ub,Y0@N0XFf@e!b@E1"AMTeR1-7%9R2[Y.FMoj2V/#q!jHm]`*q&/*^J"a/e_R=dQU1;Lma4,fbI#4K1VZU&<_PJ([^"BO
%EoV%T7C;.()<EWt/^n;I%!B$QRut=#DAcD.MKBJNbHqumVrX1Y)cp&;1+8J'C1lOmBcI*%rA"h((/I(.^J%k*'PDk4?m-/$m<4,'
%H;L-PR>)B<>P[9GfeI]pi:c7NF7+UiS(VRbI"7Dj-H#,9!Alsf-&rjdEN"&LA#?*`4EJ`>kEf[nStntRfoep4n!D<ZR@@sr?!mPm
%k*g"g/"2Z?kaH3AphAlZfeI]qA2sBmEiXY>PA=cc`AN9&EB0#81N@!C^&)Cq9VZX&3+pqZq1`a+H*0Ke27%M9\RtEQKki$1aYgEB
%igOSW,e0V9Xr1X'NG8"/!,XX"`AIarp^pJ#Ms.;-;3'c@J2O\:'\<btW)"S>R61J4CBfb58uL[;iV;r==E2Tm):@*tRV=S.X;0(*
%%=,&k5FGXFkAs36DiQLr[NkCe@,dED.[aXuF3Ko0`@mF%dekj<97E;\:4MGnkn&fSRn\UAd:'nHmO>V3e@gd!&i$dr0[Vn!DJJjn
%e+_)7\tPo[-'f<$:[E'o/&TIc6%-?Mq;<!2ZY+d/><&$MW#jSuEnD"n+-F'J+5qIXr/>i5ZEcAfN%C8PoEYnBXH*4Ynk_CMRY5Ei
%A"d\u?87sHTeb`*R>l@,e+p_,jm"@V&MUKZM'WIVW/7q"DIW:7Rpm][I_W=>=M9a1LP=9jbJ^9H['`+jE+'^P:_`JkJ[@RJSja\X
%B`T<4!'1@g9ZJ&kG%E4>dVa"F"RU&P@tpa*m/prp>%5[]WO.M.<%3Wl["(qn3b_;l@!e:t+DH^:kqg,]qo5@s?FcX4ad9e`QCV'P
%h;J4)@q-^qK+je'5NF&*'km]@f,84"G_nJKIOTi;A)ML>49sBupiYFrL@`Sus7YC2><$`8!INKOe`Esc&^mSWb72[RUkCE\i"SJQ
%0K65;iP<r3/5sM^=qg$FS>rjKV,"6k@;]Q+Se(N@[lYSHgjEjX_cF:$f,95\Poo%EL:Fr(F7W>$$fY7aoMJo^7t[6apBKeHo%Jj0
%.N"^uHgR2m!n[%rP9AfD>Fq>"jB#_<?bo,C!OiVrVo2Q2LGf3a&4q7W-Be.SKdR">qDQE[(;F>>T+FR>gg*R1,)O*]Wcg.Q4OHgS
%LIbkhj3.65ggJ4=2MeYbC^jHJ1l9/n1ZPc#%j_i=X,Iq"K*mHcRY`;D66]h38uY-$Y[sh\RRgR)JCpDm@M4NJX^n[d,QbP>j@k-C
%MUu^#-\JEaiWD)i`!oau`(G#):Z8'6@O73ae<Mn97*^_^)l\o)b]?`_p^ihI4e\"Z_0J$'8h]Qu\@*-+?b'UFOgq*YO]]SND's_[
%8:85&8/09h@5"/SQI$<QM+",q+VbVM]TT83]GJSRdMc2UI:qfYps=dA'/QWnn2-2<g(3u4aA0D?/!DB?.O5(REXJ-bV3iE1jT%Pe
%3eNCfL`7-+L`7?1L`<GlLm=c2hfYoZ8?=g%g,%M=a6Y@E(,HB<`#tEO?_L5oTh[M&Rqb!F&CGY_^uQ(fB?oVB^nc*JQ*U"8hQ2q:
%n;(4.gjCl*6r)7n"ED;o=pS,)+-A2m#->rlEqW2)<RHBAYH=C&0&b,=7meA<K2!GMi#*dSkTb!:=nNBgGH,#JqM<mZ<ddB=1$9.,
%R?#dG3doNM&c(f`kneb9Np5XU-M7u(Cfdm,bk)M#0;[D6;'1o0?ei7`I7.Il]FK?XY--6;j/J*LXgkBlaK@/`cS0c8^tm'b.Zh_o
%4>[BoO@[S4S0=!8*Heo70B856\mnG)PF^;oJP72K98"boX$@l6k$`1bG5s.Mq%>2l3^h-YRG>][OSHUb+n5U1HTJo6'GC6'`T_fJ
%ON<.anP;_=6G!K/=sq>U*;]3f0[:#@S(%/1TSJ7RA'V5*bc;K,/!&E`10,R3EgcKk,:fQk/i$19@"n4^o*X_$)AU[B0R5UBa84G#
%i=2OUqQe;G6@+o^^c(%uaN^\*(1!!>L9K0/+MBNOlF!h6k/R^.pW6+B]1#!iX,mh$?gc,a`P6HDoGqL:H(PgsQrY?#I:8$5=s+hf
%I4-nU=OE$B)l,hfWK54f*Oj!NK/&2YkeOi;8CU/ei$cHE;-;*n."$Qo:6Qdj&_?gBnoAVX9>gm8-YMZ/_L?nR[X%nGKT$@4Xc:W(
%bfEcAknB?%%c85ETqC3mWhXKO<(Gj&=0&+fQb&M+OusGk;Nu@uPSJ<$/EcV&8oj2ABddsf3pk\%UK9oOULG(?UD#GHZrT\H?s4S!
%6_c^=#"s)\q43UUUR*1,&Q_q%Qa`%JgF4fEMm^%lZ]!Zm:,QQ$U*.AY8*,O'V8Dd%!KP;5n")+d\a;WGW1Msi-HG009DO2Lc@c,h
%foIB=\1ktB]`:RXWS\]bp+rpFg5Aa?LF:Mm'mBC_X?*hM%;_?D?I$5(h7KNpelYUX.+Y:h;s!(\J?UkBO:eMfnT[.dR!a<t1_'c9
%ZX,(WU3Qj*Pt5%@oK5%E@O\]>04&<1p5m+DUR]<&S=!7d[J`qB.briRTHQ4`++@!jH/_q44WY)C^"Yto\nh_l/=+Y:*jS-=(4GGl
%;%\<fo_ejc$bSE+LF7n@E[YkjA_'Z3;?33@Cm)ib:L@Eir&1Jf4+/U9VHr_hCegF\`+cT)8m$ik40[I[GJZg+7lfA".Wi_9IZ"84
%K@rKlTph4$0WGSVCO4'-BMN%a"Y?o:`q3f7/13064['sSNYjEB1T'^Gck,'c4tg_mID;Cqhg%;OaWV`&aUFZS=1+I,/G2,kIU!_!
%9d@<<9T]?+RL^VlpV8bfJrP)dF*:i<HXa-Rq462jg'$pj@_lKa<;md,ZhQOZN"9<iO<_mXSB'S#_TCAH[mYn]40G9D%Mr.^;<&ZQ
%lRnqf9>4c[K6)$%10RU('>EXKlYP9%MBR,\*\8Di6KUo7e[lbjA9mqc4E=>T?91Cdl@.aP"A(t\M9=U`8D,n795XD*Z>>.<Qj[WD
%4GMG!I;jeGVVds<_$m4N&&jkd,O,B$p;&]6epT7P-gcO(:0S2MJ%g051S"0T2pZs>K+eshj$gCoU?NbNkZP5IL8<AV=CSgC<pbmD
%,]VMR;!D_?6q"=qJU(5=PA5#X3;(R<C+"u?^'.^87`BG^,c>go.,pPUC1dphRO-M0(2Bs@5X9[tQQka<p3UcO\R4'Ep8j>9C4'N>
%L:Eg$e]o5Qb*H!g;:I@1JkW3#0i+ft^eCbV?uXmc+A8^<C`0pP</^Ke6#C12/W+>7SsJA-[:mq9ZY)G#(;5rq".3&Gd9r8u-.U9Z
%`3GP+b9>m.8+DlI$di"sWm+XVeaBB_^LrP&^p7]nbU'bs<\;?dAG`^nR`>onkaF)<J1(51p)rMoV46,>,h5Y7Gs"jh8[\04<$Y&8
%]eLasGu?5ubJQ$*</[Gl9s^!FWKndQO3WnfbEn)c>m>d5BZ'*#4RF)j@E:&A,%jf=V\:)WUKeb8P:Ke;I]:M+=B7#.dW-CnB@Yl.
%dD@ujXBK_.>E[OfRXdMuG!dRP(=,(Zhp%D>RHgJ68hFAj;unPH(,(,]"%u6<51$/rUsu+j]/p3[V041eS>F`@f5.``7P1L6EGSNB
%/Ok_:qj(*;g2E;)CDjPO$Hd2-W5Y]l9$i_u4-Kcq12:GoF%dIZo85THQ;J%Vo()43;*.^V<D'7H@EGM1YEproi+g%I3*c79F)')p
%b6.L%;i?e6cp2raB0F,IF*YN<]@qYC&_IhlG"G<;Z'n@$gB4,$kWF.48X^l%(<oB?Grk9DP`pdcFqJk]S0V(MCL2ooEfs7_n4cg/
%*)Rs%P*1?LY`**=!=PsWZ]ZY/Xl5`LZ]]iaTcEUFDij--,rDGDD5\^#i5\3;8MZHZ7HiA[P44mUGERn11e/6f'p]&nc';Qs-&FJZ
%S^\r21XsuK`)!6UTa'E@YqTrc&dnW/I]9+g@<C/4d+@q*km;VC=Li16?g7g#/1##5+9na.Uik`RC6Fa%A#]$OUa.Mt=*Ut\:J"a1
%VUiPM^iE5AGtDp"Q&Y9lUm4&Q(5`5Q;t7@jhC$hcp66i<+^<9O,X>B::c"8Xa>9!&fH$Ek3Bk<OOd':t8-7q"H+MD"VU$4;g4kgX
%F=ZsTFo,@)KT^PjXnJSt3[;XR#tZNMH+JXH'9Y<n]qH_q$!9/]edIcVOtrO?Otph[8\iPnZ%OC8<6/lZ4q_0dUrXi(M,RhHbhX![
%!jZCM+pC2:g7mAu/e'>`ROK<bZR4+bA?T6HiE/8VHF&?3D>?_QQR>-l513\5T>:#[JAhiNo8t_C/2h,I8\h'n?.[JO`!5E38K<Om
%?X;ME%o,bgb#h8,g0r;ib&cVglj66$[Y,o$;3(]3*sn%>_,<H0k.S;//KY:dAKk>B&sa/S,C;Had)a7mF<iD)Tc2'q,V3E=RJ'`P
%;JB*7KT[[sA0\@/rA<Zi8/sIh=3>>)%(Xq1>PkH9n?<R&L=DrFl,94QFL4Om2+nP]!2gM1RqM&D5Q<+%pbSG#p3ce=900uT`;euQ
%NtX`n;ni)#"QuEA&_6jd]/8:-+ZX>dChp4G`4^1sD@WRMFcGbYcmqKJ^kCAV/-ctFEacBqG/pZjZa&@eEIn^TflkSnfeT)Po?,#s
%hSMjOD21QID*]RsL@@3Vg$nr+LNd18)pTao.EmNu>G^a?[Mu8UWORk'oiqSp0C<2\RkS(7]F\\uB`?H3iN`umL,*W*++RF:MD?\Y
%93=+ifW"_O6`\++PhsmB"0@lXZ<Z=,SE_"\0g?]L^a]pX":\mF\'o4Q%O0nh?n#(i:2>#+lqno"L3+kd^T;S[;WW\iN&n%jD!r99
%:9?U$Lf1#)S`#D`s&LOs,=]^+QlbM0dU`/E\IdOoQ/AuiRMu="Cn0J,D`m*/ak`Xp>q%#0;W)1:8II`qF_k`iHD:WUJda,.TF9`h
%(YTnH`7E70BS62P^U&<3PmHVXOh_9paXHlFDJ^iu,rZE2fB#&;$nN0:Q1+4q[Eh_g\&k__r/$l1@UD<i/m(,NGT(XCK^7!FW1adW
%I%WMNZHD],qBt>-W8bp=mKOsneUGRraXIJQCN/Rg\uh@8>hgZlb]Z6hFI,i)2OF=*8J,f0g$1ZD8qRaqBhmrjP6P.&SH"!jO)hk1
%Z3LOEn;(a,R7+i&K\C5+GbZ1C;ABk/^KuPW?DT?q\%p6uQ$4%:L6be]ra*_Bf]a"_';nk0Ht4[g[A%Sc<=`f6OH9V]X@Pgsq!DQZ
%n3MdVY7,h@=>bb`:3oLLhlTj_K%$e9_O$m@^bR3H4'e31H!jYVFFuk=Xnq(dd,-nk>j^n:k$]B-4<5Q$<^tsW0Ftc(OmV9*lL&dB
%VSglJkgH<L8&TLH@*+Zf>IV4;>n14&\5+V"4QImtb]=8LclBg]Fr,9AP$CJX`$8hb>#D(p,6g1bB-L]TZ6X#,`KL14`'K4_42#nV
%]6-`PbMqUp3RO5Ydrd5+\Fn\$PPQ6srP2+H8lMIUfLWIVI$*a0PboZBc'uA<@P-/5)4US^:g'&6?(VkJb3RiL'J>\0?kP++Y$sY,
%Hn'dt&$b98MZXUK?ZLA=#rmth$VC`YT44QQEUA*5IB))C;Wk[W/2b+2E*eP_T,?f$HFLeiPZHlZ[GEMoH$FBjb;DQijoMsnqW0&4
%!qQJP;Qd2Q#ah`]LV8mB;>dWZLS&%Zr02sQ-++[#lr*g(/WFenidJA:_*b&J)Ab"&Zr7`Oo,%qZX?7X=Q%%@@mr4Op%/EsX"\()n
%g]F_QHjMiDkUds3jG#rrJ[Ed+)VIc[=[@XV`e+l.KS$Yj&9'S-&;?=Y18#qe#%GG%93U4]P1ml?]Z_?Xb7G?7X+Oj)Sj(+e=U&a#
%RnOIL@\Soi]2O%QZ!nJ">&*fCEf._I/2ulk[n!?WZXE/kc'?s?cQNcpC$B@%\(-5?^*ae*&rP5o4]1nST0[qj>(1g*?2E6,7@.h-
%HFl8J5h]R<`hU'F0AAJ4&:eB"_FKH<;FlW[a9CERj9Ik&1Z:5o_uB5gDHbF#@&mY(EM+7F&+ZT)g&*D?7>W$)!PNd'*]@,2mQt`^
%qi#5fkR!7GN11S1#fXO&(g?"%O]Y-#e1\+V-QZ6r)A6a[6#FclFAHn3TL@(=;'$Le3Y$4=XXFb8Po\/`VjT8Em0o,]YaZ;"iB:n`
%_s2=?pjF1JDtk"-M!AT2%StB+P"M8`%*V6dLs[CeXW60kNi=#-+1T"2"he&L0ESSFmTCeUB#@@uJA1)fK1TnnTBQPU#rMai'[rb)
%55r-akCsODoqf[%/'["G%$6`C#:fs&(nZ*I@<\>2nlGfq@OuaU30XNO8jl%E\MWN8Tc__,:!K5VjeZTA@$=A+mQACj8@aPnb+Q`1
%#XN/i-H'k5e8YIhVj94ZDV+qIh[@.;9RU<GNIGAJ`"CHu#L.E!OTD].!8fBP.0Rk21:0*t\]!""3Mo7DM5hp,XJJ*!Y?]4B,KWei
%-t.Ls0>1XY@.TK(`,FlK9B5jOhhs@:Mm)V:7M7Fu*SmKqom=2>(O$gl/9%@IhfW'&q#s51H[[tu6?.W@YHCO9*aPBk2-Lb:3DLG%
%;\MMQBBHG1Q\H(A:9Z<0*-?SS+pn2eG)Fk\[U4V(U&'3plUQ2MB)dPW<5h^S<L_r?+cCLN;oAoZ;/6Zb7a^\6KVMXU?<<k3UZG5r
%)77LH(#PqQpBt09,Qg9h!sU;2oofn,eARS]`0#G<4q!YH0_@%a9Zo%,_3&$#>9J``k;p:(qdFQ#N\k3G#luJiEutW0+CE)h&/1lF
%>AiZlQSP)PTH!If-@^rAh-2Eq.]imL@##2p23!:jVL._7_fQA^eNf!b0@+@J,E]@Q.9)%OcfHt(7&5UD&[q\/_G#FN0b(e![pB#'
%4/8J8Xr_pEcB-KLF,*8\!"t%'$->#@NjkrMiqr\<pD56V;ld!_HRV0p46<pbga&E5k>b/Pq1.`T^>D.XIQRRBqqcG4&.b?rh+dA4
%nFji)c[L<t](GV4N//3u^&,fW0X.\d)L**>OF^DMd<:=-'<%`E@B%2t"a2:U%gsN2,f*5[W+dl4amB:RN%b-s(?P9S_U0R^6f,[0
%H*+=@Kg3EL+X=?*5/QiAgI'i6pW$50k7qUqT9rB"CafY!UZ9R"^kGu/2jW=nNamA[qcF"cd2e=4!L>e<</DL.="N3WWE$SSO`V2@
%QnBMojHnYm@&>f/$Z*0T^c8OgpLB*G!.,`E59?SB]&5^gPP&6\InITt075Z\K>."n?0J2TrP2*aE]2T*JQ\uuW2c32>QC7o@VPn$
%R%?ZuaETm':9lO$.J<=M;_l0XnnIc&mB$0k<a5M;->acjWSlbdn3Mb>:mYTab1/.$B.8(k#c@/CoWSX^(S#^<Repmh&6'k'g*c^K
%JJ*V*IUX+X#b'1j\.?3eqXRM)oIRWs$=.Ac%E:<.Ct-PSH4stbBinH#j:o"P0=bBA-hA#Ra1%^20uCJTgDo'ABqgu2#i=Rs:JCoP
%A5`T?Cb+k'MJ%X^'u_A@P7T=?cAcX'Q58N+05W=g:?unC@Wn3[Ve[V8i1[sgXIepW!&Hqi?61-[^ht*ng[,lu>4]ZDrHMcoLk"[V
%B6S^nP'=[-FgK%;(^%P`4eUT]4DX208^!MMj:/G-T_=-Q+GSC9jD[p&,L24?>llh,Nj2!>^kRZJBs7Ws#pa*f6Y2]KYbilS)a&eN
%$EWr1<nMP:_+a>88$OC'@Mq+J5gtao?<P<EL8B3&?9Uam,^*i`e1YZFN>-"m\6=G89ohaFd&Dfk!^?O($^+$"dTmZ7BVA%-)GG`o
%VJ7q-9"N_2G=GUI%^9QB*GOqh-hVH:U"g&1AlXg&<p^N\+CM#Qn/-Hn-og3d^WK8F9F`YASuko7UTd#^db;SgD0*kL1eiZI%L]uK
%BRY\B#g'B-ba^n7X`:.Oc+a^`)?h4+fU7:"77\lCbh1=F(2n8"eVE'3ZbIQM<=V@I'[-]cOb!^2,4,V":EHh-BLc1@Km<r`JXrPD
%g*&;%:.^]ORtl*Lp4FfBc9l4o/=pQglua:'>V)n*1mP+:)d-4f*p;sCD5Hl,Ul\2rb3bM`F^mla#2E2_"3Uh-mDRLYMC!S7U"HRa
%Q9Aul#<WK>>5&jaQ;.4U0`I,Aqe_l^-^uDWd5kR=6Ir]>:>]ki%i_:Z6L]Cb[^6VSSj.$Ze!_Wn(&EsL>FKic:cM<np>(p5Y2?Tq
%N'#H#Pl,3GAiEm[c&7<SJ=<%t?8VScZL>+9X^%0_DbdYY=lC53-Q:,=?K&1F-Q4HM(:SeX6UM;N'p+8@D0ie4[f0"%MNb4`7OBi3
%>+&]t,Pf]DAe"_o3RJ2dMs_Gr-X'ZE#b7H!AU-i[GG:eH@'rEpHtXoKV_T@ILB_u5560/f`Y*El*Iu+a#&Kg<l^/1l[HGb,Bg/m:
%lLXF2gG/Gr&O($R]<eRI:F#f@-Qh%PM[p9LEgoFDB^F\lF4"6+XBp1>'dG=f'ZAKI0.\%Jg5ZU/rLP[TZilgZcq5"h8.N#44L)gF
%BP"_lKKIO9Q5jR"m%1N<VB95jTOlaqBIkpkD.5/PN/3lBBGdT=Z>UH_)TI4#h/u_C?%B3_/bNLlTV_*M%^[7!#MKZG"0D\<`uSj/
%Y2fquNGhD6fcQC[%9RcM5oaR*^h,)B#?kPU?(3P-5Q_d;O#YM7362T:&otGK5V&>I>9%<-(@1:X44#Ye2>P64BK'PiU9HkV(H,3'
%\:koh%T0Y5@re6--jQ&$BUihd^0Nj7\O4Vo[Wf$(csHVKSHfUX!HjCF3uBL/c+8ll'_;a*39?QYRD9HK2elNh[%WYh0`_Zb7.j"g
%qW.E`#a-NifK+R-Wuk$`mjHg3E(VOe\pO%u7k18S,P./P+(:.R@h_rPfGXl"N&Xu`W&f5#W_8m@rLDBPP`"Lf>DQf\]XH<4m(`mF
%U:eO$45:@eP:Njf7@^M(O.7]_c_H)R%83],M>[qA!R+O'I:$N)cu[+sFut1YP3R+,HEKnq+,:mqYj6>9]GJuVg>Hq=f&jB(hP8b^
%OWO$1L)We5)@e#IPOJ`m`>J"(&+@MT?MI>*Ek+2SK'i;2So.`g#4iY#YK=-unuL_8osHBK)"EYg`oqpi%:;,U54mn*ST^'dG)u0:
%o9I&(%cK@gN9pQ(h'\YFph@\&`X]4]'GgImFRD2uQn@hSG8lDWGjeAt5oWK8;#-f(^D<n^H''Lqm'?/Mg_'_7!g]3*F`7',5'e$I
%7NJ)L7msFTbCp.0KplVD`<%o\=WctYr(SuLI<h9r.2+_-Vh"@/jQO$7AQ5"okt*D14JCs)E#>Vh@T74olKU4>OE@R!e"mG]eS/WR
%<`c3`FbXCKRU2Y+>FhY5"30=WSTb^)e$NBHD/EJE!/n7!`I.0_.7cjPD/)@GnAP]fPJWQN`<g*mqXLjNAN6!LG.JOA4#!j(klIDb
%>FP%jC3TI$KFcG"Z<3Q%#OJlU0dkNNm7UA>I-^;?_AZ>?s-9u@^KXm2E`8dA.D<'k9mC<1Y/H2"(112^e*](ZY^EFHf>cgW]^B]E
%S7\9cHuW&]j0gon/1jVJDMusJlf'`a2^&s7Zp*Qi.2;/YEEXuC&<#"Q0>1S[:ts!V(D:e<$>LmA0`p99/LYJ2klJM)[2'#G(b'u0
%`$-h9Sj=0R`.$e9c!TZ$TQpA$*U:JV9)$l!KggQ`jn(F@M&]9),m#kV*B4Ug;cM,21cp6lGJV3-!=oR^+ErLR?CWf-Q,rd:..?o,
%[i<!bnput9[D>B:LW^>ai;Q$>8b/'K3!Y^MaVHnljQA/2#$!f5?_pYMCo^NUUAC]Lnm7%V;#smV0;YO!<)E68r$(bi\'QG_k8\9X
%oZP#1DRZjXS\AH=D:6VNH:?:i?4pl9V%@p4%__:Wg=SL$HbRQZ7R@(tL(f6uI=UXfH^Pq#-/=8?&,AEn[KJ<Lqd]?L&Q?'-`)cX"
%T)J_<2`lfs`kF#<dQ_sG0THK@-2;5tbp9rLIAIhj5GS$oL?*_k>)pRRE-f-uR#$W);gq:UNptl@+[r?@M<.5k^a_EW^'%nK>S7NG
%jSM'D>"-af_c2U/8Y-/<+nkP$oIhAhQX5P(&^dIMY<Q.IjU_/3.Ha^>k.k/M*2hV./a(FPeA=Ra)00?unmdF#]J*+E/'\%9O9WAc
%BddA]]$uk27Lci19.on+'m;"Oo0/`&;-n)M5QE8T4V4q,X*&W5jf699n\aBAN0@bnn\_?@H$,\n^@7'rbO'TbSH(J543!tkXC@b?
%LMbq[XN!b&]dVPb;?o(1e8^7]m#jG+fQ`!H.Us&Pgq,@=:f+CKb*T4>eLO;?@AL*+nl$BUFF%a7L[(5^Cu`:1K#Nane7m4CJsgYF
%rIlS4b5OEtlAR37r>bc(9Za<JF+kR^FRO:_d>t3[N3?&H(Acf"PEcA+]A5LWb6\eXF6@#o5s@RU#FV<KL.j.15-h]b*S31R)>[/o
%BT,tEhHblNNp43b5*t5PV@EtC]uE)oM"fMM%_Jum*SHec^lJ(+lY+IelQ5@W\ZW3X3YIZd*J*?T7m\fYJ_Fr-&aO*R4HX+orU?2G
%`]A"U"<K_WJW`P%2:ccbj7N"1JfXf3idk;ECs1F<7mB/).:9[;,MI\M7-c/QEMIY>U)c1)X94N,TE<JfNHUss:cKXEg49l).Y-sG
%Na<rE2ha<nO%6^TdrO<_*Pa4N*T7L$b:26[mcZOfmM>6C0b8I>ILUMVh9jR#E(>X]\7::?gsM0VZ&io048C2XJU,Tai=9tCnPF&1
%U$JnKE(B3hI&/:THb9GD?XMe5-p=sZnICM4iP]>bG@W8D4*K6Y)nAg1_B/0eYf/[X-Bt96nW$p\N\8@60M]e9hU.N/a]Fe[74;B)
%W=)Y;,CNpVGO29K4*F`c*Q4Jf/+F*WrAEF4\38gl^f47biuR?hq&8^0&MZN58A#%,X?R?d8E1i544%Nu&b"X3HGhoARFaW`G@2+k
%O*CnEc4s^N`!T,MOR8ln7e3$UH8tZ7iuOLP`>9gZIQ?"$nW)Cu(@Tm;g#F*VIK(qVJb!?O#aJQ)),C*7eFM&*lmFd_G2GDdH+W<*
%RCAZ(8DI$(4q,,KE->9qH1lm"gL1^:iK1'>IXPa.]D)j4LtmP2L32Z]QmO9u_X>!s&`noi-3,`@^g]7]!6@u*\\p/33Pt"MKd3l_
%ho!G7H%gV,Y78g'`_&e%-pGC,EURceYrqmP;G:W9JudU\$P^)uW6aDsKdR.FS)\g$C?:BL93fH%:NW[rpQ?g3&9.Wu<2]'b]QJXK
%p'8+KB)4)tC^`*>ctUKBUF;M;2?]VHjhZ8RMH>e[QJbd&k\KMW7>j7YFe&JL/FeIcaGJ&Ph0ht+r1M!]n?*EK-SS9+c:#qc!=B@k
%4-L=sFGUu#n5@F9P/?:m?iHRE89ZED'e@$T3A5%[P^T`)P?cj3cb&L]AbT]=i.ZrgKFLIh\8\qqNK`A#c7KbLkEW]17cW8YVf=n.
%dPr<cBq,^XBUfcOR!uc\jP<Nnh.`B\[4J`0iacOobM[CV-i1]g;.X`V/83>6ZT,-E'PS2<PN1]-oj([i(X4nn=bXi*A'X)XYd$1X
%9281o''FtdUt`o/iOhdYNYmTd6Y#NrfW2NVA2`aV<b1Rr6^AI,2hZ-0WNGQ'Jo`nSiPPQ\1uVSsG1nk^Kp*-8cLGo^-RDUEFO=b-
%a-L@'$%l/E6u8n="t)f,<7rEN3)-eX)ibV-C+7`iYC]mhWD7=YE!!07]X/EoKYi"c\*GarVf6*eSSh=2KbGKVghm`hduIG'EUL%B
%3IsnKGmKTI5BFB_k9k;_<-?680KD--Wk!#$aa&H?DJ#[X3@TWhN8Nti:/!5IKc6'eI:N_S0fbZqX@l/pE[(+c/Yd1*A8Qe>E[E/&
%i_T0@30TPYkqiX%0KGs2OQR1<aiREmdp12DjFjVW&VP'l.OcLO'0-)mKPDiSm][6_=l;$C<k8h24cqnl6r#Se#]9[2S/@emm`M"N
%laa!;0Bo$%Zik:dneGl\+(<7P.68-u@WC?GU+N0V!hrfD6rB(qL%p?X<^XK<#)a$<T1\<R3UA-#/9$1(<:fUM>R8$!rGbYL0RmI-
%0#SZ-T$]3%`DcYGVT;#<TmGLuW;L8$FI0T`3rL1_n5(DDq@-iTB+,hP;52-N[VPY1mdP]296#eI.(,Fnc/moXH#GX[L+SKS]Jo]_
%fC4i4FsXB\NXp,k7-,kMIRq*BE31f^=4e=ON&_f9%PJK)#9N9?U\gIWg4cO:7n3o!`.iQl,rdgr,plt0%gc!J\"hAp<7b8Wdm8cP
%n0A9X\gumZ>16bS<l`t_MW3u,j'di?(9ELnl:G4??!/$f=teh$6XQbcj-2C3e#.4;GP'c6O^+CZPniNKb@kn88<M]T>f\*rlJtoo
%,eV(@9CbXA5RejN>s`;$HAsoq]oD<"q/V^;^c:'N\U]]J&+D\E?u<M7gI$XhKEZ&:6t#`K(3SCe&*,&s#BDV:JR#k'E[sL$\bIFk
%KVV0,W%KjaOk`gI[%EghWB[[72POr%>hWI?_]u_d5HVY%NoZog:5Zj&g)O1u<@j<&YnY;SE/s#IYdWd2%WlW9.)rlF6$*bS@/AT(
%o\)hGddsD!l>(-nOm^0`(f%/h[e=/(3]jY-D'/d!arS`!V>:K(Z_u>52^=K45MRa,j[eh'-EH+1&'dX?b`b<[keSiDJ_\XY8_jKZ
%p^.aFpHU@8H+;:R"`ai'QsK&D!kBPUFF#3V7"pX@aTW[KL(_TSjpl![jR/C*EYFrf\N;@)h"45\a\=FR,J!(;/X2_gdmCUE6#nA4
%[@Nf>WJs'*S%9i"E`:;0-oX3>j.U08j@F/,2'0l!_<%SN4RLUKA$fX`VG$4i63n"]Nok)s3KuUoMp$Gu(TY&<--!PUQ`\K:>c^`O
%H$9nE*S!%94I-AV\a.j6\NhBi5%J@anMQ6c!m5\NR:.rmXVT"^()dSoaX)*i06+u10ok<%f9\<C8IsqNR)a4\S:e@6/CE8F9-2>P
%09r9Bl1I3.Rm,;r\Z&#<1cMh57rtGZ4d[0oO^kr$dl`qc3nIlPBcQ29DAk:8T#K(I?u?m:3LH9?X@I?\^s3>SF")PSc:*f&h)+)J
%mBu,o?pPpP,?mL8jnO!Lds8@V/0bn.aH\>4f7[:rYsb]gE9>a>Y`NXOg$-Gr[D59$SrI#;ZqdpB_QF()>\YG6@V-G>7l\&&N(b$"
%%k7J`hlSLO=R+\/F`K&TFo$,*lrq\E?atbpbG_e;dS@"-$X\>g,JBDLp)u\T2E5$,LKVRboFiP8[ICiJngsE:39bf*GBRgiK1F,a
%)Y5bRNUD&.8(>VfF9k?.-I;T7N_E3NI5>[u4(R0FP]NU?rY1`"3>0PCe,Z)(CX]=1DJa-E7'01%4H*H:)T&B.!@VMe40t76=8+6/
%V:/^>7][VmrYW:O$l2)&#d"l[=B,p&<h$@eeL!-%C3Ncn[JV$Uh(Y:]QA7l.jbjYYb"/POCUi)V\+m:NhQ9JMQk\OW/i/-S6c6h#
%'&#W_VooNCOdTY206dH+c4%m,ouI8dkld];&m<.0dYKmkdWK.7D#M>X$q9/sr>KkRd/K-9E"\CDiMk[`"m:Z6#h=k0b_F.'D3&oH
%c_N>&_kJo=l;raNU+ugEI8G4D6W'r.@qq_n__1X7MQUQUT=T2')85o.4Ws!UROZ-QOdUK+SuR^mm')Dli1]+''Tj:2Ie-*q%^4KH
%q!]2r>"[rWlRn(+/;^LRD%ouUF><J(Nhra<]]>k:'MSpu6qC1RY>kHW0<D+2-!F9"1G:5q7Z>2;BsgDX7\Nj`8k1^I'WO&[/:bqm
%'X,ojV_b(p=V"8d2J*X1ng*<CH3@+>j*X\-d@fm^6kb&@4.B-G?cmCBLQe[HJ>6G-^Q9&&:ku"\hstG&U*rWRaX86$Tqk<U*3'UG
%:m<8>TQFJqd$g*?7:+K<9AQ)^GYpDI2A_2]ZOL$`1PHXQi*>r-R.6o$FuN`\(Bs0r6_NqCG0G5/K[l;\"=Wo)Bk`!G'/+*UKboGX
%Cb=]KabuTbq`5CcAu+`R0o?]Q*##q!4^ZcPb<C7/01F3B^4J&6<j;3/1C?QfH3@*eN5BN>Mc?'@),&2P*HhchDUslQ1SZ^AbUADM
%$g9)sMC!kEBAgu^((:SgW9F!5LWda/o"#HF_^KY:@Rd3_9?a=TF_9,5$T![-PJ`(l"jGs/M&?KloQZfYUKDSN=&NRi\QdgF;1MYI
%aGEbF:?4#2+\&SnXQd[%(#%56N+)r>\)58b6N*nKe4AakE=BF^5^6/)D6uo[\R?MT503-s<oeSF4(f8eE*a5*d..a!]94l"ZriC\
%U2kGr05Brbk=*)Xr&\67!dUPWnU[;oSBZr!"a`JL(B.Jp@f.#@=tP?,)I6OFca+8$Id9l>0ONG&T41*geWVB%Jm[idS!.*$\Nm_j
%D1n3oqUlH5(;"NT]!t2D(?dOq&b>/;K$bWG..25V2\T=%')fsTMVoa>+.Mapj*Wj],re>4G#TYFCLhIkKQ'bH.25ZBKS*=I%Pu$O
%:uNj$&p,38SjJ`132hlP&do>h=WuG\+WU./jc[J%_>uc(6`Je)1GO_p4RH6-?bfl-8KIJbBPtHkC>3l.H/I>YGua14m95lVhKCJ+
%/\LJ>=-)%gY$$V"BY*KOGL:MHWo^)cGl,_:g&6_U5mlGDLsU[-(pXHC'>:-q87]J`J2sh>T@kki*@tUDpJ?JPQmqAJgTRn0c;F:.
%_75<.@oQ#g!LBrcXo9a69(^J:J:&NE'oO!Tep>h6qnKm9WXg'm8&tQ.`=#N#ju?j!5VsNaUti:%\)-PUn0q$X@`&kkmtiZX1f[*5
%U.=!VEa%+7iK>BcC_*Zc.6@Y?i_/_l`kZ$cIIAT;<:]<TX:)[$fN3GB/T8FlL,cLFpW/FVVu/M!"DZ_r$o2!21@&&Hef%KQ=co"p
%aQFO<nNPps@.2TQH?`p606N+]4Y1#L=/<O6/5'Q^+:hda(i4N1VtF&lm!P$KDD,SJ=Yla7rC\-5LX.Kco^MT#FY-Ah1KM9aH!up&
%qu*&^%[4$#,/i2?-pIm,D6=:gk)>m,`(Rg^qA15RBU5/_Q<[Z?fZM4="#Vi^MdY*+HAY[!f%Z`H<-V([ABBY/5Gc&tr%,XGVK_cR
%\Bsn?b[(7M'6Jo7,IrU/bGLe^\,j``!XbVJ('NA8F"M$,-cu)b"Z``Xnpo^;Fn\k#=%kp:_eSP4foiq.?Kldpl<.O[cJ;!d6`RT8
%Pt0p3^rOY08o*]+Q,MjI;GWgc^fFpd4E:9Bh2q2XH&f!cY.+gMn;tsP:.0dkpkYHD`ZDnc3CRT%ji*"`aV9$KEG6+sO%1D*kVLFl
%c@A'G=2WM[!%5\W_AL8s2I"*m:*"r2e_2Q4%a7k<222Ubji\k':,l]EN6DB>p>[(-Ipg9RaDbTWCp:2hpejW#<b8#6S5!Fn#e!9H
%UOgf0@&3"']4U]U[_Y;SmqhltpVo0:9HZFSfV5F5[:kZaPnd.FO^FW:H>oWN=Kiu)S6-@6=PIquMkFo/cDn"9L0(jB*f[Buo_e3Y
%6e`_$m_k"A1a37]LY_:oplSYID>Y>'U9`oLkY9-aHV^9,5`c`^ljE`EZ6CdA:j>rm.i]pI6mbK`@';JdPoD:VYC$JVJ[>\l&[io9
%K%P+@L!_+>`RX^0dNXKih\/P=+D1Q#TLBD5VoojK[fu*C.qM#i*A^keL(c/u!D?_?oLhZ3a=ifl&c)Bj(6Lg[Bb@mA&hP<:S^AX%
%)]L@QG=SArjIS/27.+LD(8S3sBG#O>(bHqm0(Uu;'0dHMJBq>,o[9>!U^V,B9704h70#6sRdhT3Nb?1:^3e2?<oZVfKlUf4Bb>mL
%$B?NJ&]D7nar)janEG_HPO6s":a!CV+sC`<]ElBGO%3@VTeP"gM]c'5KS@et"?r@W?M#Q03K<Dq>/UM!>"")Y/`Hf[#G-FeBG(':
%JejJUhe3Vd.ub:+gEWsI;SsA$+uc^1,'$I)>"%d8UICum2-**d"XuQu#>?[]4jtRrMTB9]Yp/aX2-**dep2[l0#_`<*mjZ;Me[.6
%%-R6MH%aiA8!kTX'e[r?pV!K[m;uiUD.:PVJrL&iQ$X8+Q_I;J/--S^J8.LNiB79bV3m-?&-H`KA(%3FJoXGQLKII:7@)/ah!Qk3
%'$(<K?Bu!JHhkYo!t'B#?Lm["Eah8/2.gh0Q!Sb>SIEoCH_bP=M(iu_K0I,nU[bMeG"5%k;3(u:=T[dk8#@ZlC#u`d^ldmWmb.0s
%q*0.0jW!ajl?Q<Q#Np#SoBbX!6V6ppY6V`=b`jlH^P!K];)hPj.jroM':WsuU347@%5*OkSn/Gln^7JG^IQ^_qVRYT,/lrIEY%*o
%o#`n^oq0DC``o*$D]#>@kUt'JetU=siX[_t,22r0^(4n:?YdIt/cjU"ciW0`RRJFUJ6b/WZ,Di->#d.=)kJR;(o1*kM<J-Al-#pP
%[FI:F@#sF+Rgd#\m<uQokj*J=N2TW!rYKQm^es)]%X&Q)O"C9ZTCFDRCL"#/Ep7$Aq!(UkVrnar)\9CgM_@'cN:?q^4[n\5qYQ8C
%V8[]s<S:L]`#TdkpV6jnK9HT<JURT">]#&F>/Z$g^ti@9GH^Te_V`;7n5p[_(jG<d<=5cS)"Cfuq7^3D*`%Sp7FWdC@(oU=3O&dC
%[YV3e@3b:Z`nDhYMh0A&%Hf%V\p@+E&i^^@S-.?Chp#]Z>+ucd:5Xg18L6,$kb;@BA&4G&I'R6-SXUj+DmqLgEG=FklK/4#m4MYF
%G^FKU,$sQqBAP$9pe96q!&cF_3/$=f\!oG[mbi9C+r.Kt7KiI!(o+`/$Yst=@-F$XZS&>9^f!RT,sY<piUBc8m:t+GdL((.UB3;,
%k5gZ_PG-_>`GG@uRiPLXhUW[=:d3hE:T0Hn[SpDU*%)3YdI`_E$94$B$d#+/bnWkI4D:DJqjoLA*FBumf.TiL9!O#RL+N?Bjr!B^
%23o*13Vn#PR6^dOhf$O&eTP!L&-@T+/kP+CME)2OKg4Y$b`8B'9?EXkj78n6.#USY0:`D\G6+p6gokksW`Z$h::es$p=7`Jk"=t3
%!>"K*.m-/l'l5`!OR7?b]fEGUcX9+TrFEdomJ'jrb.-;](@<G,SDq=/]ZibR%3Rc/,]O0&*4O"^-rI/aYZ>;QOiH8+q8HORr./uA
%?XN[Y2K%%=2Ea6u9WNY/))rrWdTm(tE&*>7"6U^F5)W&>@5=?FXHjur%Trq)"'253[bdSaggeH0\#)6(mfSe2?J8$;e5KAM!ECG)
%a;.>rE/8;8In,mRW*jP=Ap=`,a=j6Afp4r$c3j@:YS/WRj!S=uTuj6f%)-;2It3`brVC%^[Gr@^ekMJYS+_;SNCDnKSB[e[-U4],
%MA+hS)mHV5aIX@WXEni?h,7B*_5G%Gl74>'*"bl>%5ELLW0I,f96$!q-VF=>-Dd<$7?j'8&'U)@dr"O;A'5/N2:\QX7QoWkS1hm\
%#CQQq-<JGf:R+skDd?MheJRtEoim#gJ]Mb4*l8mhW!CoP\6s]1p;BLAA'W1B*kH0%THi2t](q-Rn(fpO=97HTU5V@e?6u3b=?@c-
%<seO=m+hCD.KA]IQA8hYrA1O&HG7sP_0*%XnbV9:"hq6f^)=60K3]!@&sQmfGgb6^8,1'X_XtVfka:,:"egB\Lg\`qG94o*k:ae_
%:<keCWHu2[e8@5`BQ>PZlVrqcO]*p^dBfC.<6kRYYs>V[M+&86XSNBI<ddFNX8W-`<A-StJ^l4cGZl8B=3n>dh-#Tse]mWX:&ip?
%n!mU\?XQj_Zl3R:Xh-Gi(d>cM3I^R9?'##Xp:bCaP,-7k*Jo8*01[dc.bsH(eP?aoW0'Eq9J]D\;_+,u'WHr16<QmRqYRP*ei%U@
%F$-c!<X_Ma$UsMHmV\A.g\,dWj^2&>]KWQU?G:m/R6Mi:GlRKnf-5L$A$$q8j;#I4+uu;dedSWQ-AT7om4CXbUpVp)KlSQ+]eWSS
%H)3)ZGp0@Xq+-fJ#&UR&OANs;[i(!h@N"7_K.X>J%Ok9gbFR2g)Xnr:qb1XhOWg#FqZY?+@_'sB$F>V$/7+i<IZhmF[e0T`>Rl#g
%L/5Y@aYh+Qg/0PZZAX>aR*4op?Np$U?Vc9am_PJDR-WV<A/3>]Un((B*s:gCHVQ_C@Qj%*E^cS:)+-LFUN-]7Jr56Q/b:$:1YU't
%7s<irp3M]I+dQ0;;`NAdPe@IfAMI6E]T7=Sc=gEGHQeer7b1bB/'W7YAUbE>IFFNp`tHZ[Qt:a&KJU,M&*?GCK=4,[9/s,^>rXLe
%<B))B'$gF%N#PDLYHhULc5cf$[ZkS\4'^HDq:eV)PKhM"BRehmqEXb$,XeQ9dq5L`_rqJJ>H4e06m&?fmkGJd@Y:!?52(#W*GGVO
%D^DTm34aqOIS-_(7c0>#Ld$uF7iRA$5YH6<:i-bl>a2osLCem,/VSd[is:_&%_lUk%.]"/3.Et.<#\545]_T!\p6R5XlRAfj,1*e
%7U?86qX,`P4%(/[8"_fQJrl?:rTn%*EkjQ=>hNDu?/Jjfc:`@)+3'o(V"lCZe)MPADC>pSImf%aYtlTXopE209rWKBb5>gVJC`iN
%n"_884oP>M>kU=C^H\I^+RG55q"n.HipU6qLYX'qgl6K^OB6r3OXtuHBY-kdIm<)1<t.iQIk5W/Qm@@3Mp19C'Gl?ZJRfQW)Y4)2
%gjbdE,]<GTf=fr;r<r9Pd9CM!;PSaD]B_bX-55IfZu_<2&75[2Ygm99<qc!BRS8g0-=4jL!4$d<NT-0G!a:u5DPJP"-',IlCte'!
%*S*5nZM<r)VrYP`'%<Bd[82n9Qg?`T:Jp<=NitDe0,9mVA6*5m2Yr5hMG2IP9TGPbpB>uX>",;HG_XW1h^(h_grN?TM$Ym$EVQM?
%44YPKRe,>-Uf!8"73323I-Jl#B0dk/^B5JoDr%_X;=JjA^KC>N/%E;mk_,0#1DC&HD[bVDM2;Za%7b=mdInPUn$jgKT>)@/Ilaga
%;"!7<:OJs8hmq4rPJ!k>`P'8J^keR+-fr-KPI'bS6*kN7-SZR%o/Do":@"WR,q2A!ZGLGm_4Z$pj$/;R.29%<2DXb,NDGne/K&='
%AXSkb^Z.$g`0_64@I[&l&`QDhk?00uiDX7er5oh&Gf^W[XDG=l%<u->-sL+;3to#"3O6FP[p8HeF4:*=/E?:uj:Qt`AC(OtP,aC)
%gEn+X1L)^eBIDu/`p,GBjHDLAS<`@j=r>^u!:S2S+(QF4>DtHmgaB&D19[l@-aT=A+X'Nr(.Y!\%kg4<[sJL*);Y.H-cfGuL::[t
%bXedScr07O(:;I\*,ORB3Ksh#1-Tsj2Z:#N]Y/;4r%.LZ[-*m.gKB")FF_g!NI^`=4P_up'tCGk2Z"q*(_!W+Ym)5.AjY"f/L+rj
%XD9/qB%+F7IiONi,8m??.)tC^o:GYp:0u9!ah+a6LQJ"0:BTH&IN1f=5-/;A;OUrX>SSN::rEZ3<cm`o.*fa\(6m"Q10VJ&T*^3n
%+DpUDnCa@iUp4UZ)TEf_#>5keUmW:UBsRdI?T&mL<$/EA'soG(YT[887!&6<2M22%e1%8i'oI.f!6.Kj,:X;1%X*]'2Jb1J-m[8D
%#"173)jeroeeS^gblIu::ok,ben0uP$(-W+16e%[Q,KI\EUlXU'=Y6_I2UA>EO:OmK[.Hh`4AAL-c$U\EAJjm&i.,"mT-V0*oHo*
%ft)&'br-%l`K,U_ol87DV0#B6Ee>><p4S)B)j7Oj@8+a/Z%HXE)F`fc:XM=%5m;WA*>8r?S5M^!3g-J+g`(TBVhuhQh^qj^!,6T&
%;DeC1/2a=CJG7mXp,XPC\2H@h%s]%878uDoR`jGJ.g',o!Z+F]A;,#h]CHuJG[[E'%@XD>ZuV-$;npT.e\F4b!1!.np')WjJK[,M
%?1DaVT\2Fs*6-JKT`2-.9fR>Id57`t)`$HLUuaS3N+4e_2dKEN1)V`K-1NJ)^l%`KZlG&d!n%e7D"6?7/r(V>TU18kr01d,%9_)U
%J!HX@3h$o(hkf1hHsGHOI)&"=0E_gT;<3mA,*-E/QWdr^nSMml@A-/3!mG%%L(T?[>rLVJ-tc*>3h4JH=S(jb$n*pD*jAUEJAi__
%g5]f+W^Klp9(R7WRD-9obQOiPi=B'*i=W<sD?2WA7XG,/hGSA:#(_9Jjj1QK"EM5PS#LK@TlGt!A7:[6R/rP3AkPJsHTO/2HQG$(
%ES'o"4rOY&;:l5&*[7N%n[hu[*;_-)5gaPXEV:>!c0GK$;+TiU]KacC+l@og-$$MD@Zbcr9#RBJ]2JnL2D-V_J0ilRjrb2f1)1.h
%4_>"e@d2"E%]c'@+1^&$bun\TU*2e\o/1AO`NNgHl0./IWa's,oYuG"$pO*RCPm(H[6U%5d=]-:I$jS;>T]XQ-`]a<KXE=4'c#fI
%=N]#RZH0V^`!BHV...1S,\oaJ"R$.0HQfT``m8&_'BE0f>$gb&)0]17K/s7HBcrq!H)Z!:%_b&3!gF1/f5KhJ3tiJ=/ngLT3DIF9
%@c5c+FLDH;@;mV9GAJlURr!Cs,j[Jd/+Rq433[Y2Tt9+D#qaY#70h(XJ=BJM#sJe'QGNp;=S/:LF2">X5iX39^`ROA%]ju<X^\V^
%+]=M9&Vl*G<S.gP>!QN[SNT0X;2]OG77JSp7R*&cE58hJGrAmCW>S<tcSJ]86?k$Wrb*0B93SYAH;D;i2Y0UmC70'$+MfsG2<"_7
%5@TB-qV((PUm4AsbhBMQ5mN@0XpL\V:j(Wnae4W\\WitCcOL-";6oEFI[4l4h0T)U;le2R"o!V>b0bQRH6&;V.81PGI,s'<+-/V\
%0t=IFQ7U-*6goU`&W1D$iOB`qcUp)*\A'5_r7M9.^Z<X!=9mqu#0[ggnKV+pK>Ka3Ail?tEqoq,\Hs`eNk^5qQqB!i"KmC^*TG[k
%.]^d+#a96m?qm-11_=Hr[D1Op;],rhA_M4Q-c)`+_ne$1_#o5nU.n_Xc7<c)o*esqa=k^8pe0,uV5lOuS_<j%NfVrDgGHV^9CTY$
%XiRk@+pWGh[&3;.@);VYoHh:`5Yg%Ge;-4RP/1BhP9#IX80tV!0=Vc(YQihV2JT,i$@8L&/q.Go%l-I@jpYM:m/#@N9TtMC1??Vp
%dFG>1P)X2*9L49Z[.&4i\EBF0<la$FIC.ZRDZ1>a6l+;1/"L?nQh1@^!9>oR[8UrdBZ&BEq&ChAnN/lragOn;2e9$=BQ7*E\FTF'
%'fN._"EKk^,jct"]nXRPCjW(b0]:"p@@J8>-S'>nF:M!1]0.#:1"]N.-80L'3!5XYOSt@3eegd+_3l>JW'K+mXAPbCZG[\@0MFc/
%."p=6"f!D\&!*=T\9('e\#85RXYUB!EF)Dh*<EGlm6CeATOD75;D$EeD_ru2`PiZ&[LZol8:e-[dj<GbE4U#AY@u2hFQ5UrJt9Kf
%,,=Zo.$qi<]\T=JTTIT<](e=8Y>%.'djm*GYU!OY`E8;.H;9%Z_^[`HEgQ_);StC/FD`'Zn7_(LrhB#p@$iGp\/c$+jVhcd^rfr#
%ph(@31n"`u[`]KaBq<LuWLa18+/1g?>:OqX-$].&cU#D"no]OImXq^T9A[c.D3#25%Zh9E"Dp3Yd<VZ]NWh?h7)tuamO^`'%1GVN
%XFjUGL*7#[FB;<_ZDUtYj-RVu"DsNPnEr]ha-FIr_fd<QoGFbu8($+b$3#@L)8G$fa5']IXYT*t*/F[2IORiY>_eP-chh1sZ!43p
%@?,&,q>4nl6hccVk.5-i(U^D!Jl9%@F"7Z(eK1?pQ4<kBh-G)3*#N,SiNG@""kpgtE8oOL9K#9@b<2[d3>Nf$C7pcs(D2!GNR+u&
%i+H-WeaL58QOl^W'41/WZ;Uc]a]@)'-\b@36C<`ukQ-A7?kVOJHpbTmF$2_[8nJ=eSrFD.'N[58"CtOK[nuiNau!kCqV?7dC^,)(
%J=BH6kHL?RD'_8Q"PntS%GV.emVsq9p,MEOUS6`Q\'f(R\KlCs.@S1kj-:A;+,@i-C(ti8[Dn+^I^4H)Ymoc9q/hF%E/4%d8"CPI
%;CE@1$&US12q&g?C?Eb*j>^7?I0W,CotM9@""c??i#9Vi8e+6P]"atcl\$&%XCGpE=TdAu3EV7RW7d=[c-HAf:$H??1Egk[CqJ))
%)GgWAmbe0oTRb%"D?hbubhSgjTaXbg?+g1$N.c_hi3,MZi@mWuh!&MQ1JSFGi!OTNNT3P@CG\`7FA+'Iq=J^`pu_6k.[,@=Ba3:i
%<l;4[L/&[1A[\j7&gsBuNae!-0_Ou$VM5]G_U[!,?P_AQ+BdADh%BX@`W=oKdtYmI7k;aDn$O,+C3Y?#KV!6X/h)^@qdL'>d74?6
%Z,^FEhT:hlK/4]FdHf0Z-nKAV+]#B9f!KFZVh_B]I_%W+WQ9B4a3HV=8D-g?]ecBNN9me7_8:J)BjgQO`qh8t(51OO/aJU2Wh\0V
%gkK,Di:`':\d$e<:3"[b\iTP7g=`hTUZOV?f-sj?L!XQqXEte;OmmTQ59o(COLm7eDTI:njGq*qYSL7.h3\BogU.HiQ2<I4dGjj.
%Qb?I6='Oh,)sQ`.4#pcon<YC^mRsVk%!c4`VrTU[I!QU!"jOkQ_gk*EfrVS%(t3RjL.)*-h$)j694.XV1K)t5G@=@-_="pQBg9QK
%fp,qpGcWQc&\[#E_$QUV:Gp=#2q/@joWZH]B>6Ocqu$`r&*PIuOM,K.n*e$Os*skCQTtIH^ARV9Qf%h@.5KZ>hnVq,<lo#^MYa4[
%"kJX@p0%!J%8fU7KY>8FZ-0\,;ucib5*M;YUl6FdAkTeG9WqcS.n3q!M2CGIl>1L*0)0Ru<ZjU),nU-:cJ$PInDWM&"D92lPh<WM
%#r)gucl`su%`k`Sk[\o?&3l0hTQCd2^ojlKdu_dDp&V:,jZb*q6)39T%AOeNARegl;'j'tm/$03>DChC,5m;g7F:0^JOI\VLo#hm
%)RX`Z'Z1<fY'm2$'toV"93lLOOkmUe8FP,X=9&>(<R8"5ZU5J@VbWG+PU8qY,encV)UTD^L9Ts=>p:2&#q.d,P9jHUr?q)DBJY_e
%?`<6Y"Tq#LCpV%8lrGH@7^8O6Z/V#Vf1?6n"hl3)W?GN/qnb_RX<K%]i4R[8l?:I+V1iF0D`-Ii\'+6IcVBVeIX`MOkk^nA((U&e
%!`(R2.`k=`;A@Uhp3B#p7Bm0qa#@^3rQrAJj@P*PWXV_2Lb#DFQ*jm)oui?cUEIeqSPKncqN5Yqd$S@#D]u-amZ/Y<X=%iW`+0L\
%*$VFnG!_q40U#*oQ`;[Ac?B-sj=-V>Lb'9?.2I.T`):/c;V0=-R<0T?,YGFfQL`$n;*]3X,'7;[7g:M5N_fpQ6H<"]%Z_LI)hSAE
%_n4A^Cg<-P?nU,o3[A\7ZN8t<C?4@T\H.Dk!T)'2=MK;5f=F$*;khA)Lc8g$+r]&_R4P&TDGo>=N0-?&e;@.en8U;YeWnf^:?6^]
%*@VcKF%jNdP5uA5(<9m_n.Tug26pM0(<nA(F>ek8Ro7#s6\aYRV#m/P;sL9,/!Y^sNtO6dS/eGki"o-f;9O\L6Z7R$OunFBju.s#
%ZBc./#eJ1]Q3HD6[IHE^7%jG(dCNVd"\^:0Aa),P3!eFUX58,:UN^`C0hBaB\OR"dE5jfsGP#sKM9F4dO<ZeInD#C9Y9K8+_PXZ1
%Z-K5Ij7/?5qY;dN^\Js)T>,[IorD`/^Unjog.sp8!Z0_gZcg[Eqr[Rp='o6^qTE7Fiq`2\4T>60Dk>q.5J-i;r:F@c5G(8[j'p27
%iZ]T&TTR>5`Ggu!"SV*cWipTE3LRfpAJ>VabbZ/9AfD6uFGcKIjq4DISe-mWTg#=G,po`Bc6&1u<O*YN*h8T5I?">sKAAetOZH;b
%@Sd="8[:0d0LQZ^I_SkpX;C=JJY6AKYr3cBi7&s$07a+SR@66<*nlgPh$_p0Y3oh4C)=[7+o$!:/0H$r]8`.*M/2dqh47Bkc^+J(
%]S(Q44R<Po%qK>9?aS;;Lld^^D;\cN**EFq,np+\@S\<i-b1B6"'^G#F+^;U?^EB],LK1a%YJdJSdZ`?>(SpVj)uHP0,[]7K$fZ_
%FWbPb!31+JOO=(Ig$7lB1Qk^W(%,F`TWU%Uf.gn0k3QaC0Gd->CV603qt\tVPc%VsnQjHSUhDCO4D'2Fd)0lHpMK5*ZHE7_*/\ZT
%QLo]Di8?IV%pbUPj"2*bEVeeY.9XpNc:'1M.gb=H!qfft&K[#4RItt.3GnTeBr!]oD!s(#9eG]AZXN<hFuc&eVd3G1a5[#e@#J%@
%Ah+a,;].N<;bImc0;CI#bhFtX1GQU\H70A)W^mV7L`H:6af9si5Nf/W,7P!Mn7u*G67PcaI,A;!&2&%lnFZosS"^bc5SIsZ*1:q9
%=b-KaF8r%ogJ+_,9W7XQ^Pr0pYel-hVi>DSZDG,j'<-h]6,jZ_Al']V>n,1('S/R,\1V\$l6t0nYb*p@0WSGC1O_W((_M;ams>$P
%c#BHspKKU$9b]FOBV\e_eUX2Iiru8HMK"6k-rVn3a[e-maoX1"4CLL#eFa#&:K,7YBH-Nm6:H*N3lLGe<2eS(8GF*mIB90uqE['Q
%=489#X!0bO;Qr)u_sb'ZB:t5Ei7V_2&Td):Oh<"U]'jHhN944uMNOaS2n19a"llf><-Y4%!VZ(p=l7@=n#[^[N#<XenOUu1JbA8$
%s1G2b+/fZX;_'P3B-Bk^P.^lQi$S0'HU1[u"W"5.Ic6YGl+(Ik;6^?8Wu``g_O*bu*8:2l6.lmR=Z.$c+N#Wn/+IKebb]DUm^e8j
%;^TA_(F(.$U+;)AV<1;TZ@s4C":IR9$&l]3!+7DL*VsYa>69F>!kF5VcmOA9-I"!4)\_Km.oZp5Y#'SM^-U/?pFi*"pf+E(NlC]p
%Cd\!7/p:&.OdK[6Yue:H3SCC*]D$B,$JCD?BVnaJ-uObITjKPLUFQk3J&LkI`d]6I6D[^!CgSZ,807/W2A_A.TQ:<H;q8/+!W2j,
%[tecViJa:8f*3!P(F(*-_)7&m$kb1I]CVj;<oJfAjfSXYqjNWrXbdaW^Yr'B"(8^<217G%f9gE5>B[5?\nZl''VqQbVtihdUX1/I
%PjSu0_e9R8N-Lf2i]<kaCh(j[P-GXQj]TTS!Z2r28Q7GhBt0QRNKSr,@PW)mcV>bnRr.ulW@,bFJh]DjU7=S0$6nWS?*)K`VC(co
%6meP"E$GaLIp$M#"<j$;[n227Cn;ClL=eUINXC/tJ4&R^B19."(EBSMZ!Rt[N*,7X)>C+e<qu2@O6VtF8n.sl__.uGXRMrPUBh/H
%Fn><F-(*;s:@j!M^p"/r?U,"A7`4^G0'QB?U#sL:3`dcOGcBi?$;B7&8[mpuX$Ip#ZW6t2\*7,hXA:!<2rTR%:!a?je#!Mg@*Quq
%'qYcKMi!&jhWQHTk?\?S9*PjK#0nuH5O/]X-j")5*h4Q.oNFFqDZjm!ZOT(l:mAN%1"QFj78H\gF&N5_8$5074<;YG%7F4OD<4A5
%$(<M*TRc%1Z\a23^=Cm6]C$W`GZK@t=>7_=Xt/`1521AKOsa+a]-<4E1q5A:Fj&fb-fYJR8SRc`eg9l0BNd+q`(Akq<Mmjl;(5Z@
%3rG)Vr?-%F.Y7\T0MYX"bmL:JQ<TB1<s:[*<gqH\q'#H7!A29i=5bR":&P_Y0"^@^pJI61(aTq6JW),d"a<cI0GP8W(#/cu_C@7o
%9)#(c,?P`_2U?KiaI^-La]8g-)G(Hd@kjb\#ugnsM/DT0:a%ifR`;dZ$P![l=2*heE&*MR84,I1Cb:NaZ_>>T98_\K2X=/NY5`JS
%+1i:LLm0&&&0,!C2$K@9joqOdU,F[lDu,Mq07,XWB'OEOr=ac8O!(dnkA\p=<(MT&S=qZ[QG.a)hdIBLKJX[P3O"Qu*X,A=B0L]V
%+X^e7d],D+r579TOa0LRA9uj-r6*-8&m'!c7e@rVOFgTb-FGc7$)Z*)=V++n*#_"9n"bAaH[lgXrs*7VHCPI=H6G&=_[>'Rr1]6!
%,=!bE.*r=ZE&07lK!]=kcA>m?W+,RQa9e]OTP\;-2DdSfT!TVk_3Uh<A\q)CO8q$oTV"sfa@aY`_HejGiLeq*P#]kW];i4]"(=Vm
%TaMd`,?O)FQ+m-[H]!k2_.=>!R:@)G0F[<f(i?p9Af,A"mE"5;q,T`I-T7-H["Eh90l!W=G6RVnn+QlIAG(EeD4!3f:QTW),$3l[
%B#'Gj!X>dD=3uHg\M,X%g75anAE_ihe'l[r\sbsh;IkAXf6U<1P=R3=8&2AKl4-R_Dm%`IH#E$Kdt0X"Xks`JSZ^Eh4^1a*q\,(m
%X:"+o18YnNTeF$a<C2KPV^^O77&$3g&G#1UooK`h_\QjkEh(9s6'fOi_go%PIUp4De!nL8)%O\]#>nA&49ei&B_Oma@YQ3:bhH`7
%$S,!;%^Y!npF6MY\Zk_*O5)_6<V_E3bn$ZPc#*Vqi+fBFNY^sqU;(3S&%<G"7jIo\:ESK9S4*l$OF-rCmoM=_5VpaMTlD46\r/&&
%\m;gA/MFAQ^1J?h>]s>'i++gA+LW)#Ro3j=,=>?i+Kb]T)R<g3A,F,$Clp,?5,6QFFBN]uke'/11?8k!#6HI)M0AILn!g<FG(k9e
%md1XlP%jfELTt5!b_WkD4Pb_^L-OregT/M]=H@_ek6&B_S31aHnd$%V`smcCDnoiKkofsl%a"cYhUiDZ;5fjpb+EIF<HU:*<2DEh
%%Kc!&P[0W<pPk*+pcW1'GMEiVrLVP-J(e)`I5O53*h:@;FY$KnA9FLGD::!K(5#%R.b"^4X=9lkRF_A5Fo>#^"Q;eM^d[;i(I*NV
%""G)f9e9:6!M)(a#Y:>IF@Z6YL"RKdpM1I/K3@LH6jfPW$f7',J8gV:E<+q>q2PB6#^K<Q'se5e_P!L-Pf#=7ZI=5l]c)4?h87Mf
%,;OkH.c/V'E=LDl=W0Q,[\=7:6Z&#F*K\s5_+/$4Vd6;La5ur.A;jSJeH_1U[j_1pn\.==ACmQOd$>rF2EqTlA9nZ%bfZiX*=(5"
%*9,E;W,:k`.$9gdS$3XY-W+fAK6'bRK]Q$#KlTH1/=[WC1^1d99CQD9%Vi<WJI9K*+>mg;oct`gWBAR4lOOhCV=Njb<U#PE5B?]f
%CKB8NBO6eRLR1'>]L>^(QP`njnq1s\g!psY^XYSoh\50*^\G-/"@\7)j]l@chj?Oc[5#g$#kH':0??KGdfc:r!O3#7YM=BS3QiX#
%aJi/X78E3E3*RN!$46QU(eljF$;H)Y!@!@#Z88>`lRU6n`%td.W\34;YXB@[1NG*`kso!g7]!3L#lVsV1=APd:Qan@@OM@YiT3+i
%qqJR;k;RbYm,]$jr9E8"je';5Z"sfHpFj:0n_68kqt#_!^A-;mYJ,C/nbR_uH[K6`FRu6oo(.?\na,5?^@7%6Ie3-LY?lYQMcX7K
%N!CC#)S"7's6%QYhu(TF<sr5/p\XRKQZk)h]m9/E&,+a1Dcu(]hX]FYgMcsKJ,/ch2nsY5qYC0ilcX3Qm(YTRc#;K%Hi7QI%t#4B
%:X4DQR//N8bKk\:lHRiiJ,SZoS!VGBrqBckIJN`mX#K(:%OjR&o[X!<ioO6k)F+.dS,N3.Ze*ME^Nnh2NVl_8]M#;L^Am%cBgSn@
%FBQZ!R+B2$Qo9st790e`4n!pJ%6_dDel\sqKGRl1VfE_nP46sJ)^I<DjGZ'@,SbqhL>Un4aDR;cGno[>G#M:.c"8gf\Zk?:7kt4@
%)=X.&O=V(>Z]4"S+`.tb`6G@gfLol+rqem@\-gLlc9IBMH5qhskl-$+,OS#UV3:g6o?jU6=^s;NU1B>m-&e^AR41!7Z&*CAU:_f:
%pGZV2n=\0UU4\We/,W//;E%nQcnGP:C^e,t!#2RcW)O:*;/=mn=WQe^d=1sNKn6cFmu\n?KgD:Vbru_h_e^)Th)&>djEUJ^3P]b`
%BClMJ.*JJC&RNqd*2i\Ob(5]-"jf"##)cd/8E?G="**T[r-^/5k0uX^W%r+m'2UFtr&'Xa&N*km*lf0Hl^Wj_WhrNZ+C[q6Ldd";
%Z6#:9j3X,I?-[']pFUg?NY-e2h^a1a+<t.h:@\W9VPm>igWQ5\?[f('n<QN>1pZ:-/Rdo*k\l2",Zo]0dB=N&Q/ZWkjj1k?808%l
%W?'n<QN<NegJ"o16#C4o!$qta*'g]k)eONTkVmS`![$!76cSJ`3<K`BY[>H,3%[6g<n3,fM@@N]8Tg^]CZJ0Lh+QrLjBEtF;r\6T
%)'XeA8([5!9;Jt_J:Jo!Ik2bg?NuMC!@Ms'qiq)^Bf3SjMsHuZo:I5uT-Ek3(7?i_6F!P<G'K-HKZn'$d\=p3PLCAo4"mKI:of\L
%ocX!3P6HYt,[r#`SA4ptgn1Od/3g'h)+U_%3,pS/oR0\\_SQMU2@HH5TsrCn?43:_+#Me15_M&fHXrS.AB-T$!)^Hr(M965ih9$"
%\%47Pj[F":/eYN2'p.44Z:DCdLA#neOel1Y@H9,`9m)_[E=%*p>Eddl/nZ^(<h9!`6W>.5LF2J\p!*i8LLs:r(rS"cQ;!-A@^rHi
%)BRkS<kP=AEj4577%i<i#,'ef').Fl4s!?7SmuP2cRYb=lFR'a!T(uCL',saK+O8TKg$5kISe%NKo;D\5??SBHA_&d%<EK5G"ERj
%3Ap66"NghJ+WmlP@!c3m-RtE%S?:04\N8\Kr1L^'N=F\n'<TngRlM_9Phb&k[&Q/:T[G6iF5#e5#O-@fmnqe2*`6ofU1)4h>DS7e
%^B::gn"^h,P>*jeP3P-fKs%F(]D^I^Ve#OkUpLX<b$=+b7*XsP'La._-4trZ1!=nkS:K*T2P/LlqYV9h>EUKl8:ls;W\i?p:/6%5
%67"#tUlE=iT^r20!qN4?!8pF<($1#nOg8CS5k*=Dcr=GK!(p"++id/SoeX4&=mcD8$/s-<IiWY:&.M-nI;:Co)V#3e.Q,p'X%&%m
%+Joi#KHe<-1hChr6@jc@dmsQG-@oiE'Q55f=)[c,.3f0'@T4)UOfOUKVS[!)'5S.H\T='YTI:4!I^1&*]dDX/DXUdInhYhq^!F[]
%qrrr?d=4DZ=C1@<JCG[dZ3%7'2G&!>,dS5/UYsuTWi^.+W3F,HJ7JZ8J,bSO/MX]%F,i'aER5g?EWKBMRjGnF^b09U[FYf[Bt#`O
%gTumignHQhrsi(nN?Oc'>>f%Sfl0/55CZ4o440ZZau^M65p,Jf=op-==`B`$IEoQdA9JJ_8KRi)8lD<E(t^XiDG*SL6R05$L773^
%2^Ahg8FFfZn7btD/F/A!8ER"2nm)9FjIus3/iE#cAu"k<A0s"i-G2_:!K_7cb:sFS+9Hmb1e$MWOm?"38?uWUGmaeBa'5mU-!7sK
%i#tRDX)W.'.S<`[e3*$RRZDobk*t(X6`=mK-Vtl>er1GC2pOsQ"oGY(*[J]JVO^?qS-]1\)'%#]-@Qfm&o=`jnknotD^eHr'_-4P
%Ui4RZ70-j^@JPNiZk)]2^rD;$[\pQuLZJ24];nEE&.tB]?9_AN!+JLVl4#=ZbD>4KqkP\m+eD3O-SnXZ?%_KuBefQkX9CY`O^,gs
%h)l<$W1UEfk8]J&VP'\&b>srVB4Pb61G^k4F`h*RE"/SR@EXsrOAQ@Ylq`k&<uM\XLUGcTeAB<-ENtIUj*lI%<b'gr18'bRM/8lL
%eU2-6-?><^NDSJ7+[8QZ_KL2]19sL_oJ=9<,.jZ(1)^/V[sEU`-E*'FPXgm8(ca&$Pit^uEa(FP1Eo"'-V[-0m330P?u5D#^5ZrH
%U2jj$9q2;(CY%+jCbMZ,1R6&+i^7hYBM=eI./'u^b12oXifgYt4f(d2j2kHc%T8-;*PA]-;<kB22%ml4A(6mm0at9%-d2<K$*tN6
%T^SCCr_^sS,Z_u8Lu&6'*uS5a@61YY8-pqHh1cR7(jIV6Mh7E]h,%U)BE$C+!(>=p2<Gl'j(/0$c.mC/@hq\%.^Y><#n]\[5Q*@;
%Nt:'Q6*=`t:rR7BCg;k?5"]-Ag@qoJU4L0)&RE-?l`#ACho&#2m^%,G+AL8R'QkS-1X<tun+BM3i04^HY(-AkZs%!5#J#I`I-pmB
%B9ICQ6!IITV3lY;TKR*si%SVqK*=?)9sE`A=51#g<01SDW4]?uedQ=@-;+SC16'L-(X6raJ0$bW%G6>ig9Ha6L`oVi48-p[9HaM2
%K?lSrQ>ZrY\.9>^8L$@G&eutGnt=qi>'QiB91a0>;DRWe;_bC``D#&Sbb\Hq"I1F*51D7FJM5r=STVO=/Yp!]?5OBh0TSt%]X%]<
%b)F9g-d0SM<k*q66]D1@UgbP1<dBZPq*E+g`E/##ZrpI]*]T+*)mB@C@:CO^DJmgq'.s@-3@hjt`J7bqO)P7,&Qn+Eg*Gd=d(0hG
%"bT6\)lKt!!t7-l"WU@:aS[Su4">W25rqr:]&;qF2[8Ac^=hO5CgC1aEcqGsa6WAhkOT]llV_IB=Atd0l(DM)3jC$Y1l1D?:s_\5
%9.(+\U8p_0JhRMF<H<U'E"$jnB)'hF@].9tm.A4-hWi]>YY1=95E,DelSs#f9oL$8g`94dg9*n^VK2k2`)lhU/!^<u"Y_&C>b&pa
%.Sa=K8^lV$*,5H?0*Z@j0f@]UmYU.@Y"gR&O\RQS"ltLJhM[1&BH.+rWoa_8M6qTn>_2BPgE3oa22AJZC)9:OC)8*lN@@,EmtX_8
%X3dRb:K;8soHDmIn7=otBg?egq25\FmnXb9Tb,DucOWHP\WF61-XG"EY&d8.a2iFBWWkn0RhOCAT[I]JMNnV)Rmk97oYjD=J^_:(
%YT)LB^=YMe`rH9UV)]e+]C@lD:LCgH=r)RCe=qUV)pX#1JX>\XiPu4MVnNfs#9(Vr/nad)5/B$"ijfhf6(o<&Po(?C[BkP/;rA9W
%FKaOjFU;=G"O8d8LmliC*$^)]B[nO;4(D-\1Gp[W.>TAEH,4p2r^Epd;H'"iha3F&VE%dOpD=I1YKI#9]OJDh^]n)@&Jnk1%5e:a
%^#fbop-KG*7:NF6C2QkB)=/A?b>cZDDJIgBO>BUU]c+"(jAt<EAalI@.MVPG!b>)gQI)gXPjaKgY[QOVKDMVLqZr.[Xa9m7#4K@@
%:ptafWp=,D,9m:t4K2WpOA:Dk"LcjXhSs\R.-&afiT\d//'>[;Q4H$d+2:NEiB7)t;iRad3VHI*7Kp'?+qnZc5`P`aIf$^IX:LnA
%O;pMuKr,*CV^g/tAm,b>@]u=RLOmm8jj)N^*#%:AOBVj%X@[ha<cUr-[iY^Y^f=teRrK)=GH+)^Sd(Q*o![0?`[+dhmBh`aL[npE
%p*)tgO9/7g<K*+'Na`\u/*IaP6P!"3+%hR$`b_7+a7)$c.cAQZ#VnLNJ]]7<NFPe]nhS[Zb]Sbf-d146N]ep@Hu(<R!EYRhL83**
%..\iG65s;74s#A88a.Y1n[)gl7,r98>Mm7Hf?_td9Z)Et45&#nUWb@5k:^eD5kd(&]f?Os9>h6G-"L^2DQl]"=PQrCO,"md?"npG
%&fUH]/WS!Vgh2\3jH5RpL="456mEl]fr+p'ZuWFVL]-a*`4"qsloXH@,e&g^?-[&r9C7chOGrDfkiB]6.%RM%7&WJ<RE_9f,3lk!
%eudYn\O8da%.(m?O-kmF54-HOG(W$Fmt-JN&m]kc<%lQ"MkmR>C5s2,=dPsOEc+464BX7-[jf<t6'3"(]MZ0_>(>%s_Bmo5iCXli
%]Mc6pH^.oO>\H6bNuD(#84j0>LUX!RbBD7B6oo'fHMU\&_M?9"j5P<&BMN1=KZ40A*'3eY`Wc)b+@$a&CQ`k#9+Ton>gV$[R6Jst
%o,=bgY"ca-UW/S1jFQ'6dC:N;e[YDDNQ.g`*&T@.kGWB[H1,Bi;>K,0k!QICDrE[+rY[=9qSFaWF->tq53L]ZU?EKN_6HP<+[-Q]
%>c_&;rQM1:hU?[MU&^HR]$]+a4@*;nE$`BMs&Tg#ILmCbp+O*ZL`bc.c3X@o[758<!eh7XP&*!GNejVd?W)e5jbnKeYUH\o-,@Cp
%'u8@rce8n3DnMXAgO^T!D[Hh@kbLE=rGe#a#mG\95S6YEUg\m4`51hL$"gPr1sAsK7mTQJa1u@,:YTT3B/+LdNTb@\)us_NlMOOE
%b9H%r39bHAnUHFfmh%_O-#lu:!7n3]&QUN9hZSc!/%:Z'O8FRM2%=e`6QK#pNsZbnRUa6f+B"mrqPXBP%MPT+G>]p8)d6@T$qEQN
%Pc##]6YM6&R,ar;72rp/m7WIsM"de/@miWZHuVJGio#UCK:kopk6^M?%H0KLRM_43Qa;Bq^@tS$E)EmmBr*<NqqBIgoVT-nWUEN+
%=D`JIB#WlcerN(7#tJ3lE:s$?l_@$>\2!].GZkh<=cNC6@#j'qq?W#TG&?Q_^3;N55$YeCh3e%FG2BX+&+FbO3sI7EO3KK9rI_)1
%6r*h:*_^u=NG8C7ed%(-73g5r><ec:B=Y;?dIQ(_%]c_XI]$8E55j:rQ9LfBC@$#Go\htg+2VdW-Xd0`>P]VSCJ0.rOPTON@um^0
%7K5/B&/MuJdfT_i=2%'G3J'aO?P[+La"+kl3m`F,94KUIOX[POXkk`X?rYXiikUdD6'?N!Eb3KFl8s#4RL'+,m"I%-n(s=F[]CmG
%8GS]+J\W$+s"/%Y<!IikQA'0cAZ74s#re0N2_HKuOHe7*G%"%J4E\gl>Cq\N&s9?Md_g=Q=+#ksB6.smN!W%MFNp-kJihP*@c9uT
%[Yc&'.pn1(Dtqa?B_(7H?[-3Ws*4OfL[u*AS0+\bo62^dE,r6+cPQ<6CgeD\Uqjn4>9Ck:W"I+jBOI1X[NknR_3.oJGjc>e[I'%<
%6L)[R4unn_=$O@lSt0lkj13B^31%u&k9o?Lr7rI%LaU79nbdEQs"U+XHgoQ#=$3']!`/FS;]L8'DLXd8CldcRnAEqMI3];bq/H>m
%%q(V8RJqH6Ils7d+4jK(!$9EmrEt'>OKc_/?'uVn\eh=$1E9iaQGU_MCVq*[I3EPkWGK5R%4UP4ah?Ffhga?40VdY"_fa793`m`,
%kRndJ._O)YHSmm1C7==$EjL;fQ:?h_mW>1k?baJ_o);_/)7s-pdEVc*lGYX6<8hUNg0*s,kM!c4O&'oOLSmr'q(XpWpVR9n/>Y'C
%U#%rkT`D)j;`Z[k%1p;I#l.YZ1PdFRF;FUd6GJ['Y._-^&':\3YAXD'$&lFf6g4=]i^Xla-ar9MC&1#ZkoYD*p);!qDG;Q]//66L
%0*3ELH^3>KW+++X`t=ui`hW_fo4V^:G@HS1;qW4*b[XYQC4YS\B$(=*oVa<M_!WSDBgGN[*=Aj_XDqUF3>@q_;I'QpGhRF#egMJi
%Y1YuROE1@$1/o^[CfG(4H9o8T;gApDmnepsqR%Y+)A<QG34ele'6^ae9U4Oe@9#UO,5oQu]#F/3<\bP]%(j^9P.j*:q/=i.CZNJX
%ca30FUm;12p393C5>hM5,!-Pj<*RY#m&\bFi^([R,"p%t_DR$qcuF&8$!'KdS,-JM'eZ`CU;Sl07s0tp@&4_&9@]k='hR."_5?(0
%#;X(#I@OhR"DCVu;@1R$CXklXT6*p/qW@]hqptHQKV4Jsa%dJog8kiN!Yo=b#pfILU7t\`Fk4T4d?[%ZDp5G^GX>SO<I/CHq.k,%
%XEQm=@g!A^-*qo'ZGD<F0MhE-m__-HAYAQDD%h94)UV("0C,VA3Pf:JOp>9`CnBmANqe[DD=GTE52"nF,/Xr3=QtOX1IkIl(1ks/
%-^_K>c=^oMP_9RGp/T\>qRCQ/%#aFi\P2<#)Z2$bS9I'#1!pMF.#H1kSqf5!!B&)GX>hMfik3(_$?6*;g1VAS64c,"97Z]o0#*Se
%)KuFUlD7@52*U[9H&Q-+kQC,5([g"WRL))+Dg#(T>QX7H2Yo]G_R1X@4bBqF<HV%O$Xb8.guX?b'=Y8J[<mD+Ej]o*ckb:'"r8([
%OHG]KG7Id!5(pSEG-P:KStbF'E&-IN'8fCuWLa7bO7Uj7km]IV9Wi`\PX/O7(Z^cYZ-X]]ctKmjcK$/cdA;C3p5Ai:_@_+-Suq:U
%]fk9,7cT-eok.G\!%EV3Jd.pIG>Kkg=#s!r[]RAE;(uqlUT"A.l*Y[+(JQX;p:HIcK.`>kY!g^6&LG5Sp7"C0a4[#kWNumq1g3TU
%SJI%H(f78QcsUNqm*WB6]BU)2,4DMc2a:9(&R<uA4kP97K]Cb8^OPS+V^VY6a@[5aL0LlS7^V)N!#FW^C^6o(W`UR,fZ'2Vo(_#F
%gVDt'"K;Skk9CAQTe-%$1_talq06C@#EF^<_@P]Zl/L?!2P]5e<*Dd1H:W,HlJo_$G?$HG,2dZSPGek#aB]>Sn$@k#ihaU<D6DU;
%P2NgbdR*M+B,:p`Nr[nla)-mo37.F$B+t2>8#i&"b>&JnP/:M#$$.=7B1J:Ag-+(-=]9!s"AL36Quk^!ngm?3Z)nIh<#iIiNlH4n
%R:uZ;W5ZK8J7p*p04RE>,b<3Xe#r(:''K7\rSN+plh"Q!HM-CuZgV55rp6sdprRHGIJ)V"]RKSFiPk+)s6-M%SpgLqo'FmW]_TO=
%q`eB#HMuim2da=KEV\`m?iLiT4>\/Ta\RBYDu]FL5Pfl_Q*%R~>
%AI9_PrivateDataEnd
